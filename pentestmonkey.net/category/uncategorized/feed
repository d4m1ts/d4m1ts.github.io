<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Uncategorized &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/category/uncategorized/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Fri, 11 Nov 2011 17:30:22 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>Finding IP Addresses of Other Network Interfaces on Linux</title>
		<link>https://pentestmonkey.net/uncategorized/finding-ip-addresses-of-other-network-interfaces-on-linux</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 16 Oct 2011 16:12:34 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[ipstackquirks]]></category>
		<category><![CDATA[pentest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=497</guid>

					<description><![CDATA[The scenario for this post is that you&#8217;re connected to the local LAN of the systems you&#8217;re pentesting &#8211; possibly in a DMZ or multi-tiered architecture.  If you&#8217;re on an externally-facing LAN, you may find that there aren&#8217;t many network services to explore. As your pentest starts to look more like a vulnerability assessment, you [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>The scenario for this post is that you&#8217;re connected to the local LAN of the systems you&#8217;re pentesting &#8211; possibly in a DMZ or multi-tiered architecture.  If you&#8217;re on an externally-facing LAN, you may find that there aren&#8217;t many network services to explore.</p>
<p>As your pentest starts to look more like a vulnerability assessment, you might start thinking about the following:</p>
<ul>
<li>How many of these systems are multihomed?</li>
<li>What network services are accessible on the other interfaces?</li>
</ul>
<p>In modern network architectures, systems often have a mangement LAN interface, or a backup LAN interface and potentially other interfaces that are more interesting than the one you&#8217;re looking at.</p>
<p>If you can find the IP addresses of these other interfaces, you might be able to pentest a few more interesting network services from your vantage point on the external network segment.</p>
<h2>Finding IP Addresses of Remote Network Interfaces</h2>
<p>If you&#8217;re lucky you&#8217;ll be able to use <a href="http://linux.die.net/man/1/snmpnetstat">SNMP</a> (generic) or a &#8220;<a href="http://www.nessus.org/plugins/index.php?view=single&amp;id=43815">special NetBOIS query</a>&#8221; (Windows only) to list all the IP address of a system.</p>
<p>If this doesn&#8217;t work, you might be able to bruteforce the IP addresses using ARP queries.</p>
<p>Linux hosts will respond to ARP requests for all of their IP addresses on all of their Interfaces.   i.e. a multi-homed host might respond to both of these probes from the LAN you&#8217;re on:</p>
<pre>arp-scan 10.0.0.99
arp-scan 192.168.0.99</pre>
<p>This is counter-intuitive.  If you&#8217;re like me, you&#8217;d probably expect the target system to only answer ARP requests for IPs on the same LAN as the client. Indeed Solaris, Windows and AIX behave as expected.</p>
<p>When ARP scanning, your source IP address might be important (so also try 0.0.0.0).  Reasoning for this is discussed further <a href="http://pentestmonkey.net/blog/the-science-of-safely-finding-an-unused-ip-address">here</a> and <a href="http://www.nta-monitor.com/wiki/index.php/Arp-scan_User_Guide#Using_arp-scan_for_system_fingerprinting">here</a>.</p>
<p>Using <a href="http://www.nta-monitor.com/tools/arp-scan/">arp-scan</a>, a Class B can be scanned in 36 secs on my test system, using 3% CPU and 1 MB/s bandwidth:</p>
<pre># arp-scan --bandwidth=1M --retry=1 --arpspa=1.1.1.1 172.16.1.0/16</pre>
<p>So it&#8217;s just about practical to scan 10.0.0.0/8, 172.16.0.0/12 and 192.168.0.0/16. It should take less than 3 hours and would cover all hosts on the local subnet if you used broadcast ARP requests.  To do this for 4 source addresses would take 12 hours, which is a more significant amount of time.</p>
<p>If for some reason you don&#8217;t want to use broadcast ARP requests (maybe you&#8217;re not authorised to test the whole LAN), you can unicast requests by specifying the destination MAC address:</p>
<pre># arp-scan --bandwidth=1M --retry=1 --arpspa=1.1.1.1 --destaddr=00:11:22:33:44:55 172.16.1.0/16</pre>
<h3>How to Fix</h3>
<p>Changing the <a href="http://www.linuxinsight.com/proc_sys_net_ipv4_conf_eth0_arp_ignore.html">arp_ignore</a> option in /proc from 0 (default) to 1 will remedy the above behavior.</p>
<pre>echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Exposing only part of C: over Terminal Services</title>
		<link>https://pentestmonkey.net/uncategorized/exposing-only-part-of-c-over-terminal-services</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 18 Sep 2011 16:12:40 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[terminalservices]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=473</guid>

					<description><![CDATA[Ken Johnson gives a useful tip on his blog about limiting access to your local drives when you make a Terminal Services connection.  This is not new, but it&#8217;s useful enough to be worth summarizing here. When I audit a system via Terminal Services, I usually map a drive to or from the system depending on [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><a href="http://www.nynaeve.net/?page_id=2">Ken Johnson</a> gives a useful tip on his blog about <a href="http://www.nynaeve.net/?p=176">limiting access to your local drives</a> when you make a Terminal Services connection.  This is not new, but it&#8217;s useful enough to be worth summarizing here.</p>
<p>When I audit a system via Terminal Services, I usually map a drive to or from the system depending on what the Firewall will allow.</p>
<p>Sometimes, it won&#8217;t allow either, though.  In those cases one of the few options remaining is to configure mstsc.exe to expose a local drive on your client system to the server, accessing it via \\tsclient.  But, you probably want to avoid exposing your whole C: drive.</p>
<p>Assuming that you didn&#8217;t have the foresight to create a dedicated partition for this purpose (I didn&#8217;t), you can easily simulate a drive using subst:</p>
<pre>subst s: c:\share</pre>
<p>Then you can configure mstsc.exe to only share your S: drive, leaving you less exposed.</p>
<p>Nice tip, Ken.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Post-Exploitation in Windows: From Local Admin To Domain Admin (efficiently)</title>
		<link>https://pentestmonkey.net/uncategorized/from-local-admin-to-domain-admin</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 11 Sep 2011 16:28:06 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[windows]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=479</guid>

					<description><![CDATA[There are some excellent tools and techniques available to pentesters trying to convert their local admin rights into domain admin rights.  This page seeks to provide a reminder of some of the most common and useful techniques as well as rating their effectiveness to suggest which ones to try first. The premise of all the [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>There are some excellent tools and techniques available to pentesters trying to convert their local admin rights into domain admin rights.  This page seeks to provide a reminder of some of the most common and useful techniques as well as rating their effectiveness to suggest which ones to try first.</p>
<p>The premise of all the techniques is to obtain access to as many domain accounts as possible using the credentials stored on the domain member you&#8217;ve compromised.</p>
<p>Tools are briefly discussed for each technique.  This page is really about the techniques, though, not the tools.  While tools will change, I suspect these techniques will be with us for some considerable time yet.</p>
<p>I&#8217;ve tried to rate each technique in order of how much effort it is for the pentester.  Some technqiues give almost instant results and are therefore worth trying first.  Others require password cracking and are a last resort really if nothing else works.</p>
<h3>Very Quick: Duplicate Access Tokens (Incognito)</h3>
<p><a href="http://sourceforge.net/projects/incognito/">Incognito</a>, either as a standalone tool, or via <a href="http://carnal0wnage.attackresearch.com/2008/05/token-passing-with-incognito-part-2.html">metasploit&#8217;s meterpreter</a> will scan through all the running processes on the box and list you the delegation tokens it finds.  Without doing any analysis yourself you can try creating a domain admin account with each token.  If it succeeds without any effort on your part, so much the better.</p>
<p>If you don&#8217;t succeed in getting a domain admin account straight away, you may still be able to abuse the privileges of a normal domain user (e.g. to list domain accounts and group memberships).  Perhaps try the techniques below before trying too hard&#8230;</p>
<h3>Quick: Dump LSA Secrets (lsadump)</h3>
<p>If any Windows services are running under a domain account, then the passwords for those accounts must be stored locally in a reversible format.  <a href="http://packetstormsecurity.org/files/view/10457/lsadump2.zip">LSAdump2</a>, <a href="http://www.nirsoft.net/utils/lsa_secrets_dump.html">LSASecretsDump</a>, <a href="http://packetstormsecurity.org/files/view/62371/PWDumpX14.zip">pwdumpx</a>, gsecdump or <a href="http://www.oxid.it/cain.html">Cain &amp; Abel</a> can recover these.</p>
<p>You might have to stare at the output of lsadump and the list of services in</p>
<p>After you&#8217;ve correlated plain text passwords from the &#8220;_SC_&lt;service name&gt;&#8221; sections of LSAdump with the domain usernames from services.msc using the short &#8220;service name&#8221;, you should a list of domain accounts and cleartext passwords.</p>
<p>Investigate your new found accounts and see if you&#8217;re domain admin yet.</p>
<h3>Quick: Dump SAM-Style Hashes for Access Tokens (WCE)</h3>
<p><a href="http://www.ampliasecurity.com/research/wcefaq.html">Windows Credentials Editor</a> (a more mature version of the now obsolete <a href="http://oss.coresecurity.com/projects/pshtoolkit.htm">Pass The Hash Toolkit</a>) recovers the SAM-style password hash for each process from LSASS &#8211; including domain accounts.  Initially, this has a similar effect to Incognito.  But has a couple of advantages:</p>
<ul>
<li>You can authenticate using the hash long after the corresponding process has terminated or the system has been rebooted.  You can do this using <a href="http://www.ampliasecurity.com/research/wcefaq.html">WCE</a> itself, or use tools like <a href="http://technet.microsoft.com/en-us/sysinternals/bb897553">psexec</a> (<a href="http://www.windowsecurity.com/articles/PsExec-Nasty-Things-It-Can-Do.html">example here</a>), <a href="http://blog.tenablesecurity.com/2007/06/lmntlm-hash-sup.html">smbshell</a> and <a href="http://www.offensive-security.com/metasploit-unleashed/PSexec_Pass_The_Hash">metasploit&#8217;s psexec</a> to authenticate using a password hash instead of a password.</li>
<li>You can try the password hash in conjunction with a different username (or all usernames) using <a href="http://code.google.com/p/keimpx/">keimpx</a>, or similar.  You&#8217;re hoping for password reuse at this stage.</li>
</ul>
<p>Gsecdump is an alternative tool for obtaining password hashes for running processes.</p>
<p>If SAM-style hashes aren&#8217;t sufficient for some reason, <a href="http://www.ampliasecurity.com/research/wce12_uba_ampliasecurity_eng.pdf">WCE can also steal kerberos tickets</a> (PDF link) &#8211; e.g. to authenticate to unix systems.  Pass-the-ticket as opposed to pass-the-hash.</p>
<h3>Quick: Dump SAM, Spray Hashes</h3>
<p>Dumping the password hashes from the local SAM using <a href="http://www.foofus.net/~fizzgig/fgdump/">fgdump</a>, <a href="http://www.tarasco.org/security/pwdump_7/">pwdump7</a>, <a href="http://www.oxid.it/cain.html">Cain &amp; Abel</a>, etc. won&#8217;t necessarily get you a domain account, but if one of the local passwords is the same as one of the domain passwords, you might be in luck.  <a href="http://code.google.com/p/keimpx/">Keimpx</a> will help you try the hashes again the domain accounts.</p>
<p>Careful not to lock the domain accounts out, though!</p>
<p>It&#8217;s probably worth spraying the hashes against the local accounts on other systems.  If you fail to get domain admin, you might get local admin on every other system if the local admin passwords are the same.  You can then rinse and repeat the techniques on this page until you get your domain admin account.</p>
<h3>Slow: Cracking SAM-Style Password Hashes Crack Passwords</h3>
<p>If you&#8217;ve already tried authenticating using the hashes you&#8217;ve collected and you&#8217;ve tried hashes against other accounts, there&#8217;s probably little value in cracking the passwords.  <a href="http://www.openwall.com/john/">John the Ripper</a>, <a href="http://www.oxid.it/cain.html">Cain &amp; Abel</a> and <a href="http://ophcrack.sourceforge.net/">ophcrack</a> are just a few of the password crackers available.</p>
<p>You might find a pattern in the passwords used.  Possibly crack hashes from the password history too.</p>
<p>Another reason to crack passwords is if you&#8217;re targeting a service that insists on you knowing the password &#8211; e.g. Terminal Services.</p>
<p>It&#8217;s starting to feel like a longshot now&#8230;</p>
<h3>Very Slow: Dump Cached Domain Logons, Crack</h3>
<p>If the domain member has cached domain logons, you might be able to recover passwords from the corresponding hashes (e.g. using  <a href="http://www.foofus.net/~fizzgig/fgdump/">fgdump</a>, <a href="http://packetstormsecurity.org/files/view/62371/PWDumpX14.zip">pwdumpx</a>, <a href="http://www.hacktoolrepository.com/files/Passwords/CacheDump/cachedump-1.2.zip">cachedump</a>, <a href="http://www.room362.com/blog/2011/2/14/cachedump-for-meterpreter-in-action.html">meterpreter</a>).  However, hashes are salted and they&#8217;re case sensitive.  If there&#8217;s a reasonable password policy, you&#8217;re going to need some luck.</p>
<p>You can&#8217;t use these hashes without cracking them &#8211; unlike the SAM-style hashes.</p>
<h3>Other Techniques</h3>
<p>There are of course other many other techniques you could try.  Some are more open-ended or less likely to succeed in the general case.  Here are a few ideas:</p>
<ul>
<li>Trawling the filesystem looking for passwords.  <a href="http://support.microsoft.com/kb/155197">Unattend.txt</a> might have an admin password in it if present.  You can probably recover the SAM from .vhd files.  Other backup files may also yield passwords.</li>
<li>Trawling the registry.  Credentials such as VNC password and SNMP community string can be recovered.  They might be useful on your quest for domain admin.</li>
<li>Protected Storage.   This might yield passwords that are reused elsewhere.</li>
</ul>
<p>&nbsp;</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
