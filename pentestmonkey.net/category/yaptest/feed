<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Yaptest &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/category/yaptest/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Wed, 31 Aug 2011 16:19:28 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>YaptestFE</title>
		<link>https://pentestmonkey.net/yaptest/yaptestfe</link>
					<comments>https://pentestmonkey.net/yaptest/yaptestfe#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 01 Nov 2008 12:48:00 +0000</pubDate>
				<category><![CDATA[Yaptest]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[tool]]></category>
		<category><![CDATA[yaptest]]></category>
		<category><![CDATA[yaptestfe]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=119</guid>

					<description><![CDATA[Full details about YaptestFE can be found on its project page.  If you&#8217;re after the download link, it&#8217;s on the same page.]]></description>
										<content:encoded><![CDATA[<p>Full details about YaptestFE can be found on its <a href="http://pentestmonkey.net/projects/yaptest/yaptestfe-overview/">project page</a>.  If you&#8217;re after the download link, it&#8217;s on the <a href="http://pentestmonkey.net/projects/yaptest/yaptestfe-overview/">same page</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/yaptestfe/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>YaptestFE Overview</title>
		<link>https://pentestmonkey.net/yaptest/front-end/yaptestfe-overview</link>
					<comments>https://pentestmonkey.net/yaptest/front-end/yaptestfe-overview#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 10 Aug 2008 16:04:45 +0000</pubDate>
				<category><![CDATA[Front End]]></category>
		<category><![CDATA[yaptest]]></category>
		<category><![CDATA[yaptestfe]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=103</guid>

					<description><![CDATA[Overview YaptestFE is a Web Frontend for Yaptest.  As of version 0.9 it allows viewing of much of the information in the database used by Yaptest. The Frontend is designed to complement the command line interface.  Sometimes it&#8217;s more convenient to browse the database using this web interface.  Other times it&#8217;s more appropriate the use [&#8230;]]]></description>
										<content:encoded><![CDATA[<h2>Overview</h2>
<p>YaptestFE is a Web Frontend for Yaptest.  As of version 0.9 it allows viewing of much of the information in the database used by Yaptest.</p>
<p>The Frontend is designed to complement the command line interface.  Sometimes it&#8217;s more convenient to browse the database using this web interface.  Other times it&#8217;s more appropriate the use the command line utilities to grep and cut the data required.</p>
<p>The Frontend is optional: it is not required in order to use Yaptest.</p>
<p><img title="yaptestfe2" src="http://pentestmonkey.net/yaptestfe2.png" alt="yaptestfe2" /></p>
<p>&nbsp;</p>
<p><span id="more-103"></span></p>
<p><img title="yaptestfe3" src="http://pentestmonkey.net/yaptestfe3.png" alt="yaptestfe3" /></p>
<h3></h3>
<h3>Features</h3>
<p>YaptestFE v0.9 allows searching of IP addresses, hostnames, ports, port information, host information, passwords, usernames, password hashes, group memberships, issues and most other entities stored in the backend database.</p>
<p>Data is displayed in tables and can be sorted and filtered.</p>
<h3>Limitations</h3>
<p>YaptestFE only allows viewing of data.  You can&#8217;t use it to run a scan.</p>
<h2>Download</h2>
<p><a href="http://pentestmonkey.net/tools/yaptestfe/yaptestfe-1.1.tar.gz">YaptestFE v1.1 Tarball</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Update: Use the <a href="http://code.google.com/p/yaptestfe/source/checkout">google code SVN instead</a>.  It&#8217;s more up to date.</p>
<h2>Prerequisites</h2>
<p>You basically need to install ruby on rails and the appropriate version of Yaptest:</p>
<ul>
<li>Yaptest v0.2.1 is required.  The frontend won&#8217;t work on databases created by earier versions of yaptest.</li>
<li>Ruby on Rails.  Install this via your package manager.  Package name is &#8220;dev-ruby/rails&#8221; on Gentoo.</li>
</ul>
<p>If I left anything out, please mail me: penetstmonkey at pentestmonkey dot net.</p>
<p>The Web Interface is best viewed in Firefox 3.  Opera seems to work OK, but some of the JavaScript features and rendering don&#8217;t work too well in Konqueror 4.1.</p>
<h2>Installation</h2>
<p>$ tar xfz yaptestfe-X.Y.tar.gz</p>
<p>$ cd yaptestfe-X.Y</p>
<p>$ ./yaptestfe.rb -d yourdbname</p>
<p>Use the database name that you specified when initialising your Yaptest scan.</p>
<h2>Usage</h2>
<p>When you start YaptestFE, it will tell you the URL to connect to: (http://127.0.0.1:3000 in this case):</p>
<pre>$ ./yaptestfe.rb -d abc_co
=&gt; Booting WEBrick...
=&gt; Rails application started on http://127.0.0.1:3000
=&gt; Ctrl-C to shutdown server; call with --help for options
[2008-08-10 15:56:26] INFO  WEBrick 1.3.1
[2008-08-10 15:56:26] INFO  ruby 1.8.6 (2008-03-03) [x86_64-linux]
[2008-08-10 15:56:26] INFO  WEBrick::HTTPServer#start: pid=16463 port=3000</pre>
<p>There are other options if you need to tweak the databse connection parameters for any reason:</p>
<pre>$ ./yaptestfe.rb --help
Usage: ruby yaptestfe.rb -d dbname [options]</pre>
<pre>    -d, --dbname=name                Database name used by Yaptest.  A database name is MANDATORY.
                                     Default: none</pre>
<pre>    -i, --ip=ip                      IP address of backend database.
                                     Default: 127.0.0.1</pre>
<pre>    -p, --port=port                  TCP port for backend database.
                                     Default: 5432</pre>
<pre>    -u, --username=user              Username for backend database.
                                     Default: yaptest_user</pre>
<pre>    -P, --password=pwd               Password for backend database (not needed for postgres local trust)
                                     Default: pass</pre>
<pre>    -t, --type=type                  Type of databse backend ('postgresql', 'mysql', etc.)
                                     Default: postgresql</pre>
<pre>    -w, --webport=port               TCP port for web server to bind to.
                                     Default: 3000</pre>
<pre>    -I, --webip=ip                   IP Address for web server to bind to.
                                     Default: 127.0.0.1</pre>
<pre>    -h, --help                       Show this help message.</pre>
<p>Now simply browse to the web interface and you should see all your test data:</p>
<pre>$ firefox http://127.0.0.1:3000</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/front-end/yaptestfe-overview/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>The Yaptest run_test API</title>
		<link>https://pentestmonkey.net/yaptest/using/run-test-api</link>
					<comments>https://pentestmonkey.net/yaptest/using/run-test-api#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 05 Apr 2008 20:24:37 +0000</pubDate>
				<category><![CDATA[Using]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=100</guid>

					<description><![CDATA[This page documents how to use the run_test API from your own home-brew yaptest scripts. &#160; Examples Before we dig into the details of how to use the API, it&#8217;s worth poining out that there are lots of examples in the yaptest tar ball.  This documentation is provided for completeness, not because I think it&#8217;s [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>This page documents how to use the run_test API from your own home-brew <a href="http://pentestmonkey.net/projects/yaptest/yaptest-overview/">yaptest</a> scripts.</p>
<p>&nbsp;</p>
<p><span id="more-100"></span></p>
<h2>Examples</h2>
<p>Before we dig into the details of how to use the API, it&#8217;s worth poining out that there are lots of examples in the <a href="http://pentestmonkey.net/projects/yaptest/yaptest-installation/">yaptest tar ball</a>.  This documentation is provided for completeness, not because I think it&#8217;s particularly needed.</p>
<p>Most of the pentesters I&#8217;ve seen use Yaptest have been able to copy existing yaptest scripts and modify them to do their bidding.  The following scripts demonstrate different capabilities of yaptest, so pick one that demonstrates the feature you&#8217;re interested in, copy it, then modify it:</p>
<ul>
<li>yaptest-nmap-udp.pl demonstrates how to run a command against every IP address in the database, and to provide that IP as an option to the tool (in this can nmap -sU).</li>
<li>yaptest-nbtscan.pl demonstrates how to run a command against every IP address in the database, and to provide a file of IP addresses as an option to the tool (in this can nbtscan).</li>
<li>yaptest-tftp.pl demonstrates how to run a command against particular UDP ports (in this case 69/UDP).</li>
<li>yaptest-showmount.pl demonstrates how to run a tool against all hosts who have a certain string contained in their &#8216;rpcinfo -p&#8217; output (in this case run showmount against hosts which have &#8216;100003&#8217; in their rpcinfo output).</li>
<li>yaptest-nikto.pl demonstrates how to run a tool against ports based on nmap&#8217;s fingerprint of that port (in this case run nikto on ports that nmap thinks are HTTP).</li>
<li>yaptest-amap-tcp.pl demonstrates how to run a tool against all TCP ports.</li>
<li>yaptest-httprint.pl demonstrates how to run a tool against only SSL / non-SSL ports.</li>
<li>yaptest-tnscmd.pl demonstrates how to set a hard-timeout that kills a script after a certain period of time.</li>
<li>yaptest-oscanner.pl demonstrates how to set a softer timeout that only kills a script if it&#8217;s produced no output for a certain period of time.</li>
<li>yaptest-smtpscan.pl demonstrates how to kill a script if it produces too many lines of output.</li>
<li>yaptest-nxscan.pl demonstrates how to run 20 copies of a script in parallel to speed up testing.</li>
</ul>
<h2>API Documentation</h2>
<p>The run_test API is the main (and recommended) way of running external tools against hosts in the yaptest database.</p>
<pre>my $y = yaptest-&gt;new();
$y-&gt;run_test(
        command =&gt; "external-program -h ::IP:: -p ::PORT::",
        filter =&gt; { filter_key =&gt; filter_value, filter_key2 =&gt; filter_value2 },
        next_parameter_key =&gt; next_parameter_value,
        ...
);</pre>
<p>The follows sections discuss each of the parameters that may be passed via the run_test API.</p>
<h3>Command</h3>
<p>The command parameter is mandatory &#8211; the only mandatory parameter in fact.  The value of &#8220;command&#8221; must be a string that contains a template for the command you want to run:</p>
<pre>    command =&gt; "mycommand -h ::IP:: -p ::PORT::"</pre>
<p>The command template if formed by writing the exact command you&#8217;d normally run, but replacing certain parts of the command this a special mark-up.  Replace:</p>
<ul>
<li>The target IP address with ::IP::</li>
<li>The target port (if any) with ::PORT::</li>
<li>A file of target IP addresses with ::IPFILE::</li>
<li>A list of comma-separated target ports with ::PORTLIST::</li>
<li>A list of space-separated target ports with ::PORTLIST-SPACE::</li>
<li>A file of target ports with ::PORTFILE::</li>
</ul>
<p>So if you&#8217;d normally run your nmap scan like this:</p>
<pre>nmap -sS 10.0.0.1</pre>
<p>your template would be:</p>
<pre>nmap -sS ::IP::</pre>
<p>However, if you run your nmap scans like this:</p>
<pre>nmap -sS 10.0.0.1 -iL ips.txt</pre>
<p>your template would be:</p>
<pre>nmap -sS 10.0.0.1 -iL ::IPFILE::</pre>
<p>If you run nikto like this:</p>
<pre>nikto -h 10.0.0.1 -p 80</pre>
<p>your template would be:</p>
<pre>nikto -h ::IP:: -p::PORT::</pre>
<p>&#8220;But exactly what are ::IP:: and ::PORT:: going to be replaced with?&#8221; I hear you ask.  Check out the &#8220;Filter&#8221; parameter below&#8230;</p>
<h3>Filter</h3>
<p>This option lets you restrict the hosts / ports your external tool with run against.  It is not mandatory.  If omitted, your external tool will be run against everything.</p>
<pre>    filter =&gt; { key =&gt; value, key =&gt; value}</pre>
<p>The comma above is interpretted as AND, i.e. only hosts / ports matching ALL of the supplied key =&gt; value pairs will be selected by the filter.  Read on and it&#8217;ll all make sense&#8230;</p>
<p>Possible &#8220;key&#8221;s are:</p>
<p><strong>port</strong>.  This lets you run your tool only against specific ports.  The &#8220;value&#8221; is either a port number or an array of port numbers:</p>
<pre>    filter =&gt; { port =&gt; 22 }</pre>
<pre>    filter =&gt; { port =&gt; [80, 443, 8080] }</pre>
<p>Note that you can only have one filter line and the commas above are obviously interpretted as OR.  Any mathing port is selected by the filter.</p>
<p><strong>transport_protocol</strong>.  This lets you run your tool only against specific transport protocols.  The value is a string &#8220;TCP&#8221; or &#8220;UDP&#8221;.  It&#8217;s commonly used with &#8216;port&#8217;:</p>
<pre>    filter =&gt; { port =&gt; 22, transport_protocol =&gt; 'TCP' }</pre>
<p><strong>port_info</strong>.  This lets you run your tool only against ports that have certain attributes.  These attributes are stored in yaptest&#8217;s port_info table.  The &#8220;value&#8221; is a string.  Typically you&#8217;ll use this run a tool against all ports that nmap has identified as HTTP (or SSH or oracle-tns or whatever).</p>
<pre>    filter =&gt; { port_info =&gt; "nmap_service_name = http" }</pre>
<p><strong>ssl</strong>.  This lets you run your tool only SSL ports.  The &#8220;value&#8221; is 0 or 1.</p>
<pre>    filter =&gt; { port_info =&gt; "nmap_service_name = http", ssl =&gt; 0 }</pre>
<p><strong>ip</strong>.  This lets you run your tool only against a specific IP address.  The &#8220;value&#8221; is a string.  I don&#8217;t know why you&#8217;d use this feature.  I never have.</p>
<pre>    filter =&gt; { ip =&gt; "127.0.0.1" }</pre>
<h3>Output File</h3>
<p>This parameter tells yaptest where to store the output from the external tool.  It is not mandatory.  It defaults to a name based on the tool name.  If you were to run something like this:</p>
<pre>    command =&gt; "ping -c 1 ::IP::"</pre>
<p>The output file would be called &#8220;ping.out&#8221;. Next time you run it, the output file will not be overwritten, it will be called &#8220;ping.out.1&#8221;, then &#8220;ping.out.2&#8221;, etc.</p>
<p>My output files are not going to be particularly self-documenting are they? Can&#8217;t I store the target IP in the file name? Of course you can:</p>
<pre>    output_file =&gt; "ping-::IP::.out"</pre>
<p>You can use the same mark-up as for &#8220;command&#8221;, but some doesn&#8217;t make sense (like ::IPFILE::). ::IP:: and ::PORT:: are typically the only ones you&#8217;ll use in output file names.</p>
<h3>Parallel Processes</h3>
<p>Yaptest can fork off several copies of the external tool to speed up testing.  It is not mandatory and defaults to 1.</p>
<pre>    parallel_processes =&gt; 5</pre>
<p>This option is useful for lots of tools, for example on an internal network if you nikto on each website in turn you may never complete your test.  You probably want to run (say) 5 in parallel.</p>
<h3>Timeout</h3>
<p>Yaptest can kill external tools if they take too long.  This option is not mandatory.  The default is no timeout &#8211; tools can run forever.</p>
<p>Some tools misbehave by just hanging forever.  You don&#8217;t want this delaying the rest of your test, so specify a timeout in seconds like this:</p>
<pre>    timeout =&gt; 60</pre>
<h3>Inactivity Timeout</h3>
<p>If the &#8220;timeout&#8221; option above seems a little too harsh, this option may suit you better.  It kills external tools only if they produce no output for a certain period of time:</p>
<pre>    inactivity_timeout =&gt; 60</pre>
<p>If you ran a command like &#8220;ping 127.0.0.1&#8221; that kept producing a line of output each second forever, yaptest would <em>never </em>kill the external tool. Sometimes this is what you want, sometimes it isn&#8217;t. Choose carefully.</p>
<h3>Maximum Lines</h3>
<p>Yaptest is able to kill your external tools if they produce too much output (e.g. 1000 lines of &#8220;connection refused&#8221;).  By default yaptest will not kill tools that produce a lot of output.</p>
<pre>    max_lines =&gt; 4000</pre>
<h3>Parser</h3>
<p>This lets you call a parsing script automatically on the output file created by yaptest.  The output file contains output of the external tool an may contain information that needs to be parsed into the database.  It&#8217;s not mandatory, though.  If you have a parser for your tool&#8217;s output, you should use the auto-parse feature.  If you don&#8217;t, then don&#8217;t worry.</p>
<pre>    parser =&gt; "yaptest-parse-nbtscan.pl"</pre>
<h3></h3>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/using/run-test-api/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Associating Hosts with Security Issues in Yaptest</title>
		<link>https://pentestmonkey.net/yaptest/using/associating-security-issues-with-hosts</link>
					<comments>https://pentestmonkey.net/yaptest/using/associating-security-issues-with-hosts#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 01 Apr 2008 17:48:28 +0000</pubDate>
				<category><![CDATA[Using]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=99</guid>

					<description><![CDATA[Version 0.0.9 of yaptest introduced yaptest-issues.pl.  This script is responsible for storing associations between hosts and security issues that you (or yaptest) have identified (e.g. 10.0.0.1 has the &#8220;telnet -fuser&#8221; vulnerability). This page illustrates how to use yaptest-issues.pl. The Usage Message Usage: yaptest-issues.pl query [ --ip ip ] [ -p port ] [ --trans tcp&#124;udp [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Version 0.0.9 of <a href="http://pentestmonkey.net/projects/yaptest/yaptest-overview/">yaptest</a> introduced yaptest-issues.pl.  This script is responsible for storing associations between hosts and security issues that you (or yaptest) have identified (e.g. 10.0.0.1 has the &#8220;telnet -fuser&#8221; vulnerability).</p>
<p>This page illustrates how to use yaptest-issues.pl.</p>
<p><span id="more-99"></span></p>
<h2>The Usage Message</h2>
<pre>Usage: yaptest-issues.pl query [ --ip ip ] [ -p port ] [ --trans tcp|udp ] [ --issue name ] [ --test test_area ]
       yaptest-issues.pl parse file [ file ... ]
       yaptest-issues.pl add --issue name -i ip [ -p port --trans tcp|udp ]
       yaptest-issues.pl delete --issue name -i ip [ -p port --trans tcp|udp ]

query mode:
        Display issues related to hosts or ports from the backend database.

parse mode
        Attempts to automatically parse a file and extract security issues.
        Currently parses nessus nbe files for a few exploitable issues and
        the output of nxscan and tnscmd.pl.

add mode:
        Associate an issue with a host or port.

delete mode:
        Un-Associate an issue with a host or port.  It is recommended that you
        ALWAYS specify an issue name.  It's not manditatory though, and it IS
        possible to delete all the issues for a host, or even simply delete
        ALL the issues.</pre>
<h2>Parsing Issues From Other Tools</h2>
<p>Yaptest is able to parse security issues from a small number of other tools as of version 0.0.9 so you can keep a summary of the vulnerability found all in one place.</p>
<pre>$ yaptest-issues.pl parse nessus.nbe</pre>
<pre>$ yaptest-issues.pl parse nxscan.out</pre>
<pre>$ yaptest-issues.pl parse tnscmd-10.0.0.1.out</pre>
<p>You&#8217;ll get lots of lines starting with &#8220;PARSED: &#8230;&#8221; if everything working correctly.</p>
<p>Note that yaptest-issues.pl does NOT parse all vulnerabilities from nessus.  It only parses the ones I thought were interesting at the time of writing it.  The idea I had in mind is that yaptest should store a list of the vulnerabilities that would help you actually &#8220;demonstrate risk&#8221; to your client, without clutting the database with issues about Web Server disclosing their software version or hosts responding to ICMP Timestamp requests.  These lower risk issues are all fine, but they&#8217;re not going to help you <em>penetrate</em> hosts more quickly, and that&#8217;s the major goal of yaptest.</p>
<h2>Querying the Issues Database</h2>
<p>To list all issues in the database along with their associated host (and port if appropriate):</p>
<pre> $ yaptest-issues.pl query</pre>
<pre>test_area_name  ip_address      port    transport_protocol_name issue
--------------  ----------      ----    ----------------------- -----</pre>
<p>a1 10.0.0.5 null null MS04-007<br />
a1 10.0.0.5 null null MS04-011<br />
a1 10.0.0.5 null null MS05-027<br />
a1 10.0.0.5 null null MS00-078<br />
a1 10.0.0.5 null null MS02-020<br />
a1 10.0.0.5 null null MS03-043<br />
a1 10.0.0.5 null null MS04-007<br />
a1 10.0.0.9 null null MS02-061<br />
a1 10.0.0.9 null null MS03-043<br />
a1 10.0.0.9 null null MS04-007<br />
a1 10.0.0.9 null null MS04-011<br />
a1 10.0.0.9 null null MS04-022<br />
a1 10.0.0.9 null null MS05-027<br />
a1 10.0.0.9 null null MS05-039<br />
a1 10.0.0.9 null null MS05-051<br />
a1 10.0.0.6 null null MS05-027<br />
a1 10.0.011 23 TCP telnet_fuser</p>
<p>To list the issue associated with a single host:</p>
<pre> $ yaptest-issues.pl query --ip 10.0.0.5
test_area_name  ip_address      port    transport_protocol_name issue
--------------  ----------      ----    ----------------------- -----
a1      10.0.0.5    null    null    MS04-007
a1      10.0.0.5    null    null    MS04-011
a1      10.0.0.5    null    null    MS05-027
a1      10.0.0.5    null    null    MS00-078
a1      10.0.0.5    null    null    MS02-020
a1      10.0.0.5    null    null    MS03-043
a1      10.0.0.5    null    null    MS04-007</pre>
<pre>To list all the hosts (or hosts and ports) assoicated with a particular issue:</pre>
<p>To list the issue associated with a single host:</p>
<pre>$ yaptest-issues.pl query --issue MS04-011
test_area_name  ip_address      port    transport_protocol_name issue
--------------  ----------      ----    ----------------------- -----
a1      10.0.0.5    null    null    MS04-011
a1      10.0.0.9    null    null    MS04-011</pre>
<h2>Manually Associating Issues with Hosts</h2>
<p>This is as easy as making up a name for the issue and typing in the corresponding IP address:</p>
<pre>$ yaptest-issues.pl add --ip 10.0.0.1 --issue telnet_ttyprompt</pre>
<p>That pretty much it.  Refer to the previous section for how to query your newly added issue.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/using/associating-security-issues-with-hosts/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Getting Yaptest to work with Sudo</title>
		<link>https://pentestmonkey.net/yaptest/using/using-sudo-with-yaptest</link>
					<comments>https://pentestmonkey.net/yaptest/using/using-sudo-with-yaptest#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Mon, 31 Mar 2008 21:41:46 +0000</pubDate>
				<category><![CDATA[Using]]></category>
		<category><![CDATA[sudo]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=98</guid>

					<description><![CDATA[When you first install yaptest and try to use sudo you might get the following error: $ sudo yaptest-nmap-udp.pl ERROR: Environment variable YAPTEST_DBNAME is not set  at /usr/local/lib/site_perl/yaptest.pm line 126         yaptest::new('yaptest') called at /usr/local/bin/yaptest-hosts.pl line 8         (in cleanup) Can't call method "disconnect" on an undefined value at /usr/local/lib/site_perl/yaptest.pm line 3247. This is because [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>When you first install yaptest and try to use sudo you might get the following error:</p>
<pre>$ sudo yaptest-nmap-udp.pl</pre>
<pre>ERROR: Environment variable YAPTEST_DBNAME is not set</pre>
<pre> at /usr/local/lib/site_perl/yaptest.pm line 126</pre>
<pre>        yaptest::new('yaptest') called at /usr/local/bin/yaptest-hosts.pl line 8</pre>
<pre>        (in cleanup) Can't call method "disconnect" on an undefined value at /usr/local/lib/site_perl/yaptest.pm line 3247.</pre>
<p>This is because sudo has (very sensibly) unset the environment variable YAPTEST_CONFIG_FILE which in turn prevents YAPTEST_DBNAME getting set.  The yaptest scripts no longer know which test they&#8217;re supposed to be working on.</p>
<p>The solution is simple.  Add an entry like the following into /etc/sudoers:</p>
<pre># Allow users in group users to export specific variables</pre>
<pre>Defaults:youruser      env_keep="DISPLAY YAPTEST_CONFIG_FILE"</pre>
<p>This prevents sudo from unsetting the YAPTEST_CONFIG_FILE (and also DISPLAY because that can be a pain too).</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/using/using-sudo-with-yaptest/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Storing Misc Host Information With Yaptest</title>
		<link>https://pentestmonkey.net/yaptest/using/storing-misc-host-info-with-yaptest</link>
					<comments>https://pentestmonkey.net/yaptest/using/storing-misc-host-info-with-yaptest#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 30 Mar 2008 21:18:05 +0000</pubDate>
				<category><![CDATA[Using]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=97</guid>

					<description><![CDATA[As of version 0.0.7 yaptest is able to store arbitrary information about hosts.  This is particularly useful on large tests.  This page provides a few examples of how to use the yaptest-host-info.pl script. To query the host-info that&#8217;s been recorded for a host: $ yaptest-host-info.pl query -i 10.0.0.1 test_area_name  ip_address      key     value --------------  ----------      ---     [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>As of version 0.0.7 yaptest is able to store arbitrary information about hosts.  This is particularly useful on large tests.  This page provides a few examples of how to use the yaptest-host-info.pl script.<br />
<span id="more-97"></span></p>
<p>To query the host-info that&#8217;s been recorded for a host:</p>
<pre>$ yaptest-host-info.pl query -i 10.0.0.1</pre>
<pre>test_area_name  ip_address      key     value
--------------  ----------      ---     -----
int     10.0.0.1  os      Windows 5.0
int     10.0.0.1  windows_domwkg  WORKGROUP</pre>
<p>To query the OS information (collected only via yaptest-parse-enum4linux.pl at present) on all the hosts your scanned so far:</p>
<pre>$ yaptest-host-info.pl query --key os</pre>
<p>To find all members of a particular domain:</p>
<pre>$ yaptest-host-info.pl query --key windows_domwkg --value xyzco</pre>
<p>To find all the Windows 2000 servers:</p>
<pre>$ yaptest-host-info.pl query --value 'Windows 5.0"</pre>
<p>To find all the domain controllers (this information is collected via yaptest-parse-nbtscan.pl):</p>
<pre>$ yaptest-host-info.pl query --key windows_dc</pre>
<p>To add host-info just specify a new key on the command line:</p>
<pre>yaptest-host-info.pl add --ip 10.0.0.1 --key nis_domain --value foo</pre>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/using/storing-misc-host-info-with-yaptest/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Interrupting and Resuming Scans With Yaptest</title>
		<link>https://pentestmonkey.net/yaptest/using/interrupting-and-resuming-yaptest</link>
					<comments>https://pentestmonkey.net/yaptest/using/interrupting-and-resuming-yaptest#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 30 Mar 2008 18:09:36 +0000</pubDate>
				<category><![CDATA[Using]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=96</guid>

					<description><![CDATA[As of yaptest v0.0.7 it is possible to interrupt scans and resume them later without duplicating lots of the scanning you&#8217;ve already completed.  This feature is intended primarily for multi-day pentests where you need to stop your scan at the end of each day, then resume where you left off the next morning. This page [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>As of yaptest v0.0.7 it is possible to interrupt scans and resume them later without duplicating lots of the scanning you&#8217;ve already completed.  This feature is intended primarily for multi-day pentests where you need to stop your scan at the end of each day, then resume where you left off the next morning.</p>
<p>This page explains how to use the feature.</p>
<p><span id="more-96"></span></p>
<h2>How do I run my scans so that I can resume them later?</h2>
<p>Basically, you don&#8217;t need to anything special.  As of version 0.0.7 yaptest remembers which commands it has run against which hosts and avoids running the same commands twice.</p>
<p>By way of an example, say you&#8217;ve finished your TCP port scans and start running nikto:</p>
<pre>$ yaptest-nikto.pl</pre>
<p>&#8230; some scanning &#8230;</p>
<p>Now suppose that you need to interrupt the scan.  You hit CTRL-C and leave some nikto scans completed, some interrupted part way through and some not even started.  You can resume your scan simply by running yaptest-nikto.pl again:</p>
<pre>$ yaptest-nikto.pl</pre>
<p>&#8230; some more scanning &#8230;</p>
<p>Yaptest will not run nikto against anything that you successfully scanned before.  It will only run against those web servers which had their scan interrupted or those for which the scan wasn&#8217;t even started.</p>
<h2>And this works for all yaptest scripts?</h2>
<p>Well, sort of.  It works for all scripts that use the run_test API, which is the vast majority.   The only two exceptions as of v0.0.7 are:</p>
<ul>
<li>yaptest-arp-scan-local-network.pl</li>
<li>yaptest-snmpwalk.pl</li>
</ul>
<h2>What about if I actually WANT to re-run a test for some reason?</h2>
<p>There are occasions when you might want to run a scan twice.  One situtation is when you kick off yaptest without first configuring your IP stack properly.  Yaptest will think that the tests concerned have finished successfully, but you know different.  You need to make yaptest forget that certain commands have been run.</p>
<p>Lets stick with the nikto example and assume that we need to rerun all of our nikto scans.  First find out the command_id that yaptest has used to &#8220;remember&#8221; that nikto has been run.  Yaptest-progress.pl will show you all the command_id&#8217;s:</p>
<p>$ yaptest-progress.pl list</p>
<p>**************************************************************************<br />
*                      Starting yaptest-progress.pl                      *<br />
*  [ Using yaptest v0.0.7 &#8211; http://pentestmonkey.net/projects/yaptest ]  *<br />
**************************************************************************</p>
<p>command_id      command_template<br />
&#8212;&#8212;&#8212;-      &#8212;&#8212;&#8212;&#8212;&#8212;-<br />
1       nbtscan -b 32000 -v -f ::IPFILE::<br />
2       nice nmap -sU -P0 -n -O -v -oA nmap-udp-::IP::.out ::IP::<br />
3       nbtscan -h -b 32000 -v -f ::IPFILE::<br />
4       ike-scan -f ::IPFILE::<br />
5       yapscan -sI -r 5 -i vmnet8 -b 200000 -t &#8211; -f ::IPFILE::<br />
6       onesixtyone -c /home/x/tools/dictionaries/snmp-communities.txt -i ::IPFILE::<br />
7       sudo nmap -sO -P0 -n -v -oA nmap-ip-protocols-::IP::.out ::IP::<br />
8       amap -u -b ::IP:: ::PORTLIST-SPACE::<br />
9       yapscan -sS -r 2 -i vmnet8 -b 1000000 -P known -f ::IPFILE::<br />
10      rpcinfo -p ::IP::<br />
11      showmount -e ::IP::<br />
12      showmount -a ::IP::<br />
13      rup -d ::IP::<br />
14      rusers -l ::IP::<br />
15      nxscan ::IP::<br />
16      nmap -sS -P0 -n -O -v -A &#8211;version-all -oA nmap-tcp-::IP::.out -p ::PORTLIST:: ::IP::<br />
17      bannergrab ::IP:: ::PORT::<br />
18      amap -b ::IP:: ::PORTLIST-SPACE::<br />
19      nikto.pl -nolookup 127.0.0.1 -h ::IP:: -p ::PORT::<br />
20      dcetest ::IP::<br />
&#8230;</p>
<p>We can see the nikto command towards the end of the output above with command_id 19.  Now we&#8217;ll use this id to delete some entries form yaptest&#8217;s progress table to make it forget that it&#8217;s run nikto before:</p>
<pre>$ yaptest-progress.pl reset 19</pre>
<p>That&#8217;s it.  Next time your rerun yaptest-nikto.pl, it&#8217;ll scan all web server because yaptest has forgotten that it scanned them.</p>
<h2>What it I only want to re-run part of a test, not all of it?</h2>
<p>There are some options you can pass to yaptest-progress.pl if you only want to rescan some hosts, but not all.  Here are some examples:</p>
<pre>$ yaptest-progress.pl reset 19 -i 10.0.0.1</pre>
<pre>$ yaptest-progress.pl reset 19 -i 10.0.0.1 -p 8000

$ yaptest-progress.pl reset 19 -p 8000</pre>
<pre></pre>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/using/interrupting-and-resuming-yaptest/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Installing Yaptest on Mac</title>
		<link>https://pentestmonkey.net/yaptest/installing/yaptest-mac-install-notes</link>
					<comments>https://pentestmonkey.net/yaptest/installing/yaptest-mac-install-notes#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Thu, 27 Mar 2008 21:51:51 +0000</pubDate>
				<category><![CDATA[Installing]]></category>
		<category><![CDATA[mac]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=91</guid>

					<description><![CDATA[Deanx gave gave me some very useful hints on how to get yaptest working on Mac. Install Macports If you haven&#8217;t done so already, you&#8217;ll need to install MacPorts. Install postgres Next, install PostgreSQL v8.0.x: port install postgresql80-server It is possible to get yaptest working on Postgres 8.2+, but the solution isn&#8217;t documented here. Install [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Deanx gave gave me some very useful hints on how to get yaptest working on Mac.<br />
<span id="more-91"></span></p>
<h2>Install Macports</h2>
<p>If you haven&#8217;t done so already, you&#8217;ll need to install <a href="http://www.macports.org/">MacPorts</a>.</p>
<h2>Install postgres</h2>
<p>Next, install PostgreSQL v8.0.x:</p>
<pre>port install postgresql80-server</pre>
<p>It is possible to get yaptest working on Postgres 8.2+, but the solution isn&#8217;t documented here.</p>
<h2>Install PERL Database Drivers</h2>
<p>Install PERL&#8217;s Postgres DBI driver:</p>
<pre>port install p5-class-dbi-pg</pre>
<p>This will pull in postgres 8.3 as a dependency unfortunately. This isn&#8217;t what we want. We need version 8.0. Don&#8217;t use 8.3 even if it&#8217;s installed for you.</p>
<h2>Switch to the &#8220;Ports&#8221; Version of PERL</h2>
<p>Unhappily, all the PERL scripts in yaptest are hard-coded to use /usr/bin/perl.  However, the ports version is in /opt/local/bin/perl.  The following dirty workaround will fix the problem, but I&#8217;d like a cleaner solution:</p>
<pre># cd /usr/bin/</pre>
<pre># mv perl perl-old</pre>
<pre># ln -s /opt/local/bin/perl</pre>
<h2>Use the Mac Version of the Install Scripts</h2>
<p>Version 0.0.9 of yaptest introduced some Mac-friendly install scripts:</p>
<pre># make databasemac</pre>
<pre># make installmac</pre>
<h2> Building bannergrab</h2>
<p>Apparently this should fix your compile problems on mac:</p>
<p>gcc -lssl -L/opt/local/lib -I/opt/local/includes -lcrypto -o bannergrab bannergrab.c</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><em>Everything below here should no longer be required.  It&#8217;s left here just incase someone needs it&#8230;</em></p>
<p>&nbsp;</p>
<h2>Symlink psql8 to psql</h2>
<p>Under Mac the database client is called &#8220;psql8&#8221;, but on Linux its &#8220;psql&#8221;.   Change to the directory containing psql8 and run:</p>
<pre># ln -s psql8 psql</pre>
<h2>Add the postgres user to postgres</h2>
<p>There&#8217;s no user called &#8220;postgres&#8221; by default like on Linux.  Make one using the psql client:</p>
<pre>su - postgresql80</pre>
<pre>psql8 template1</pre>
<pre>&gt; CREATE USER postgres;</pre>
<p>NB: The postgres client is called psql8, not psql like on Linux. psql8 lives in /usr/local/bin.</p>
<h2>Fix &#8220;make database&#8221;</h2>
<p>After you install you need to run &#8220;make database&#8221; as per the <a href="http://pentestmonkey.net/projects/yaptest/yaptest-installation/">installation guide</a> .  However, this doesn&#8217;t work as expected on Mac.  Here are some notes to work round the problems you&#8217;ll encounter:</p>
<h3>Postgres OS-level user</h3>
<p>The user you&#8217;ll need to su to to install the database is &#8220;postgres80&#8221;, not &#8220;postgres&#8221; like on Linux.</p>
<h3>&#8220;dropdb&#8221; and &#8220;createdb&#8221; commands</h3>
<p>These command reside in /opt/local/lib/postgres80/bin.  This is not in your path, so all references to these commands fail.  Add this dir to your path.</p>
<h2>Fix &#8220;make install&#8221;</h2>
<p>Change the PERLDIR in the Makefile:</p>
<pre>PERLDIR=/opt/local/lib/perl5/site_perl</pre>
<h2>Some Install-files I made Earlier</h2>
<p>Actually, they were sent to me Deanx.   This <a href="http://pentestmonkey.net/tools/yaptest/yaptest-osx-install-scripts.tar.gz">tar ball</a> has modified yaptest-db-install.sh, yaptest-install.sh and Makefile files which are apparently more friendly for Mac-users.</p>
<p>&nbsp;</p>
<p>I hope these notes help.  Let me know if I&#8217;ve missed anything (pentestmonkey aatt pentestmonkey dot net).</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/installing/yaptest-mac-install-notes/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Yaptest</title>
		<link>https://pentestmonkey.net/yaptest/yaptest</link>
					<comments>https://pentestmonkey.net/yaptest/yaptest#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 04 Nov 2007 21:58:28 +0000</pubDate>
				<category><![CDATA[Yaptest]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[tool]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=118</guid>

					<description><![CDATA[Full details about Yaptest can be found on its project page .  If you&#8217;re after the download link, it&#8217;s on the installation page.]]></description>
										<content:encoded><![CDATA[<p>Full details about Yaptest can be found on its <a href="http://pentestmonkey.net/projects/yaptest/">project page</a> .  If you&#8217;re after the download link, it&#8217;s on the <a href="http://pentestmonkey.net/projects/yaptest/yaptest-installation/">installation page</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/yaptest/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Yaptest Configuration Wizard</title>
		<link>https://pentestmonkey.net/yaptest/using/yaptest-wizard</link>
					<comments>https://pentestmonkey.net/yaptest/using/yaptest-wizard#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 03 Nov 2007 17:34:07 +0000</pubDate>
				<category><![CDATA[Using]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=94</guid>

					<description><![CDATA[Some users commented that the creation of new tests (i.e. databases and &#8220;test area&#8221;) was unnecessarily difficult.  Version 0.0.5 of yaptest now includes a interactive Wizard, yaptest-wizard.pl that takes users step by step through setting up a new test.  The old method using yaptest-new.pl and yaptest-new-test-area.pl is still supported. Thanks to all those who have [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some users commented that the creation of new tests (i.e. databases and &#8220;test area&#8221;) was unnecessarily difficult.  Version 0.0.5 of yaptest now includes a interactive Wizard, yaptest-wizard.pl that takes users step by step through setting up a new test.  The old method using yaptest-new.pl and yaptest-new-test-area.pl is still supported.</p>
<p>Thanks to all those who have tested yaptest and given feedback.</p>
<p>THIS PAGE HAS BEEN OBSELETED BY THE USER GUIDE</p>
<p><span id="more-94"></span></p>
<p>The Wizard basically lets you create a new database, lists the test areas you&#8217;ve created and lets you create new test areas:</p>
<p>$ yaptest-wizard.pl</p>
<pre>**************************************************************************
*                       Starting yaptest-wizard.pl                       *
*  [ Using yaptest v0.0.5 - http://pentestmonkey.net/projects/yaptest ]  *
**************************************************************************

    THIS WIZARD CURRENLTY ONLY DEALS WITH THE CREATION OF NEW DATABASES
                               AND TEST AREAS

=========================================================================
Database Configuration

You are currenlty not configured to use a database.

Options:
  1: Create a new database
  q: Quit

NB: If you previously created a database and want to use it,
    quit, change to the corresponding directory,
    'source env.sh', then re-run this wizard.

Enter option (1, q): 1
-------------------------------------------------------------------------
=========================================================================
Create New Database

Enter a name for the new database.  A subdirectory of the same name will
be created at the same time.

Current Directory: /home/user
Enter name for new yaptest database (or CTRL-C to quit): abc_co
-------------------------------------------------------------------------
Database name: abc_co
Creating directory 'abc_co'...done
Creating database 'abc_co'
Config file: /home/user/abc_co/yaptest.conf
Writing to config file /home/user/abc_co/yaptest.conf
Creating file env.sh
Restarting wizard with new configuration

**************************************************************************
*                       Starting yaptest-wizard.pl                       *
*  [ Using yaptest v0.0.5 - http://pentestmonkey.net/projects/yaptest ]  *
**************************************************************************

    THIS WIZARD CURRENLTY ONLY DEALS WITH THE CREATION OF NEW DATABASES
                               AND TEST AREAS

=========================================================================
Database Configuration

You are currently configured to use:
  Database:    abc_co
  Test Dir:    /home/user/abc_co

The following test areas exist in this database:
  &lt;none&gt;

Options:
  1: Create a new test area in above database
  2: Create a new database
  q: Quit

NB: If you previously created different database and want
    to use it, quit, change to the corresponding directory,
    'source env.sh', then re-run this wizard.

Enter option (1, 2, q): 1
-------------------------------------------------------------------------
=========================================================================
Create New Test Area

To create a new test area (internal, vlan100, network123, etc.) enter the
test area name below.  A directory of the name name will be created at
same time.

Current Directory: /home/user/abc_co
Enter name for new test area (or CTRL-C to quit): vlan123
-------------------------------------------------------------------------
Database name: vlan123
Creating directory 'vlan123'...done
Creating test area 'vlan123'
Writing to config file yaptest.conf
Creating file env.sh
-------------------------------------------------------------------------
=========================================================================
Database Configuration

You are currently configured to use:
  Database:    abc_co
  Test Dir:    /home/user/abc_co

The following test areas exist in this database:
  vlan123

Options:
  1: Create a new test area in above database
  2: Create a new database
  q: Quit

NB: If you previously created different database and want
    to use it, quit, change to the corresponding directory,
    'source env.sh', then re-run this wizard.

Enter option (1, 2, q): 1
-------------------------------------------------------------------------
=========================================================================
Create New Test Area

To create a new test area (internal, vlan100, network123, etc.) enter the
test area name below.  A directory of the name name will be created at
same time.

Current Directory: /home/user/abc_co/vlan123
Enter name for new test area (or CTRL-C to quit): external
-------------------------------------------------------------------------
Database name: external
Creating directory 'external'...done
Creating test area 'external'
Writing to config file yaptest.conf
Creating file env.sh
-------------------------------------------------------------------------
=========================================================================
Database Configuration

You are currently configured to use:
  Database:    abc_co
  Test Dir:    /home/user/abc_co

The following test areas exist in this database:
  external
  vlan123

Options:
  1: Create a new test area in above database
  2: Create a new database
  q: Quit

NB: If you previously created different database and want
    to use it, quit, change to the corresponding directory,
    'source env.sh', then re-run this wizard.

Enter option (1, 2, q): q
-------------------------------------------------------------------------
IMPORTANT: To use your newly created test areas you must first:
           $ cd mydb/mytestarea
           $ source env.sh</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/using/yaptest-wizard/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
