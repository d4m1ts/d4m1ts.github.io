<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Using &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/category/yaptest/using/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Sat, 20 Aug 2011 16:02:24 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>The Yaptest run_test API</title>
		<link>https://pentestmonkey.net/yaptest/using/run-test-api</link>
					<comments>https://pentestmonkey.net/yaptest/using/run-test-api#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 05 Apr 2008 20:24:37 +0000</pubDate>
				<category><![CDATA[Using]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=100</guid>

					<description><![CDATA[This page documents how to use the run_test API from your own home-brew yaptest scripts. &#160; Examples Before we dig into the details of how to use the API, it&#8217;s worth poining out that there are lots of examples in the yaptest tar ball.  This documentation is provided for completeness, not because I think it&#8217;s [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>This page documents how to use the run_test API from your own home-brew <a href="http://pentestmonkey.net/projects/yaptest/yaptest-overview/">yaptest</a> scripts.</p>
<p>&nbsp;</p>
<p><span id="more-100"></span></p>
<h2>Examples</h2>
<p>Before we dig into the details of how to use the API, it&#8217;s worth poining out that there are lots of examples in the <a href="http://pentestmonkey.net/projects/yaptest/yaptest-installation/">yaptest tar ball</a>.  This documentation is provided for completeness, not because I think it&#8217;s particularly needed.</p>
<p>Most of the pentesters I&#8217;ve seen use Yaptest have been able to copy existing yaptest scripts and modify them to do their bidding.  The following scripts demonstrate different capabilities of yaptest, so pick one that demonstrates the feature you&#8217;re interested in, copy it, then modify it:</p>
<ul>
<li>yaptest-nmap-udp.pl demonstrates how to run a command against every IP address in the database, and to provide that IP as an option to the tool (in this can nmap -sU).</li>
<li>yaptest-nbtscan.pl demonstrates how to run a command against every IP address in the database, and to provide a file of IP addresses as an option to the tool (in this can nbtscan).</li>
<li>yaptest-tftp.pl demonstrates how to run a command against particular UDP ports (in this case 69/UDP).</li>
<li>yaptest-showmount.pl demonstrates how to run a tool against all hosts who have a certain string contained in their &#8216;rpcinfo -p&#8217; output (in this case run showmount against hosts which have &#8216;100003&#8217; in their rpcinfo output).</li>
<li>yaptest-nikto.pl demonstrates how to run a tool against ports based on nmap&#8217;s fingerprint of that port (in this case run nikto on ports that nmap thinks are HTTP).</li>
<li>yaptest-amap-tcp.pl demonstrates how to run a tool against all TCP ports.</li>
<li>yaptest-httprint.pl demonstrates how to run a tool against only SSL / non-SSL ports.</li>
<li>yaptest-tnscmd.pl demonstrates how to set a hard-timeout that kills a script after a certain period of time.</li>
<li>yaptest-oscanner.pl demonstrates how to set a softer timeout that only kills a script if it&#8217;s produced no output for a certain period of time.</li>
<li>yaptest-smtpscan.pl demonstrates how to kill a script if it produces too many lines of output.</li>
<li>yaptest-nxscan.pl demonstrates how to run 20 copies of a script in parallel to speed up testing.</li>
</ul>
<h2>API Documentation</h2>
<p>The run_test API is the main (and recommended) way of running external tools against hosts in the yaptest database.</p>
<pre>my $y = yaptest-&gt;new();
$y-&gt;run_test(
        command =&gt; "external-program -h ::IP:: -p ::PORT::",
        filter =&gt; { filter_key =&gt; filter_value, filter_key2 =&gt; filter_value2 },
        next_parameter_key =&gt; next_parameter_value,
        ...
);</pre>
<p>The follows sections discuss each of the parameters that may be passed via the run_test API.</p>
<h3>Command</h3>
<p>The command parameter is mandatory &#8211; the only mandatory parameter in fact.  The value of &#8220;command&#8221; must be a string that contains a template for the command you want to run:</p>
<pre>    command =&gt; "mycommand -h ::IP:: -p ::PORT::"</pre>
<p>The command template if formed by writing the exact command you&#8217;d normally run, but replacing certain parts of the command this a special mark-up.  Replace:</p>
<ul>
<li>The target IP address with ::IP::</li>
<li>The target port (if any) with ::PORT::</li>
<li>A file of target IP addresses with ::IPFILE::</li>
<li>A list of comma-separated target ports with ::PORTLIST::</li>
<li>A list of space-separated target ports with ::PORTLIST-SPACE::</li>
<li>A file of target ports with ::PORTFILE::</li>
</ul>
<p>So if you&#8217;d normally run your nmap scan like this:</p>
<pre>nmap -sS 10.0.0.1</pre>
<p>your template would be:</p>
<pre>nmap -sS ::IP::</pre>
<p>However, if you run your nmap scans like this:</p>
<pre>nmap -sS 10.0.0.1 -iL ips.txt</pre>
<p>your template would be:</p>
<pre>nmap -sS 10.0.0.1 -iL ::IPFILE::</pre>
<p>If you run nikto like this:</p>
<pre>nikto -h 10.0.0.1 -p 80</pre>
<p>your template would be:</p>
<pre>nikto -h ::IP:: -p::PORT::</pre>
<p>&#8220;But exactly what are ::IP:: and ::PORT:: going to be replaced with?&#8221; I hear you ask.  Check out the &#8220;Filter&#8221; parameter below&#8230;</p>
<h3>Filter</h3>
<p>This option lets you restrict the hosts / ports your external tool with run against.  It is not mandatory.  If omitted, your external tool will be run against everything.</p>
<pre>    filter =&gt; { key =&gt; value, key =&gt; value}</pre>
<p>The comma above is interpretted as AND, i.e. only hosts / ports matching ALL of the supplied key =&gt; value pairs will be selected by the filter.  Read on and it&#8217;ll all make sense&#8230;</p>
<p>Possible &#8220;key&#8221;s are:</p>
<p><strong>port</strong>.  This lets you run your tool only against specific ports.  The &#8220;value&#8221; is either a port number or an array of port numbers:</p>
<pre>    filter =&gt; { port =&gt; 22 }</pre>
<pre>    filter =&gt; { port =&gt; [80, 443, 8080] }</pre>
<p>Note that you can only have one filter line and the commas above are obviously interpretted as OR.  Any mathing port is selected by the filter.</p>
<p><strong>transport_protocol</strong>.  This lets you run your tool only against specific transport protocols.  The value is a string &#8220;TCP&#8221; or &#8220;UDP&#8221;.  It&#8217;s commonly used with &#8216;port&#8217;:</p>
<pre>    filter =&gt; { port =&gt; 22, transport_protocol =&gt; 'TCP' }</pre>
<p><strong>port_info</strong>.  This lets you run your tool only against ports that have certain attributes.  These attributes are stored in yaptest&#8217;s port_info table.  The &#8220;value&#8221; is a string.  Typically you&#8217;ll use this run a tool against all ports that nmap has identified as HTTP (or SSH or oracle-tns or whatever).</p>
<pre>    filter =&gt; { port_info =&gt; "nmap_service_name = http" }</pre>
<p><strong>ssl</strong>.  This lets you run your tool only SSL ports.  The &#8220;value&#8221; is 0 or 1.</p>
<pre>    filter =&gt; { port_info =&gt; "nmap_service_name = http", ssl =&gt; 0 }</pre>
<p><strong>ip</strong>.  This lets you run your tool only against a specific IP address.  The &#8220;value&#8221; is a string.  I don&#8217;t know why you&#8217;d use this feature.  I never have.</p>
<pre>    filter =&gt; { ip =&gt; "127.0.0.1" }</pre>
<h3>Output File</h3>
<p>This parameter tells yaptest where to store the output from the external tool.  It is not mandatory.  It defaults to a name based on the tool name.  If you were to run something like this:</p>
<pre>    command =&gt; "ping -c 1 ::IP::"</pre>
<p>The output file would be called &#8220;ping.out&#8221;. Next time you run it, the output file will not be overwritten, it will be called &#8220;ping.out.1&#8221;, then &#8220;ping.out.2&#8221;, etc.</p>
<p>My output files are not going to be particularly self-documenting are they? Can&#8217;t I store the target IP in the file name? Of course you can:</p>
<pre>    output_file =&gt; "ping-::IP::.out"</pre>
<p>You can use the same mark-up as for &#8220;command&#8221;, but some doesn&#8217;t make sense (like ::IPFILE::). ::IP:: and ::PORT:: are typically the only ones you&#8217;ll use in output file names.</p>
<h3>Parallel Processes</h3>
<p>Yaptest can fork off several copies of the external tool to speed up testing.  It is not mandatory and defaults to 1.</p>
<pre>    parallel_processes =&gt; 5</pre>
<p>This option is useful for lots of tools, for example on an internal network if you nikto on each website in turn you may never complete your test.  You probably want to run (say) 5 in parallel.</p>
<h3>Timeout</h3>
<p>Yaptest can kill external tools if they take too long.  This option is not mandatory.  The default is no timeout &#8211; tools can run forever.</p>
<p>Some tools misbehave by just hanging forever.  You don&#8217;t want this delaying the rest of your test, so specify a timeout in seconds like this:</p>
<pre>    timeout =&gt; 60</pre>
<h3>Inactivity Timeout</h3>
<p>If the &#8220;timeout&#8221; option above seems a little too harsh, this option may suit you better.  It kills external tools only if they produce no output for a certain period of time:</p>
<pre>    inactivity_timeout =&gt; 60</pre>
<p>If you ran a command like &#8220;ping 127.0.0.1&#8221; that kept producing a line of output each second forever, yaptest would <em>never </em>kill the external tool. Sometimes this is what you want, sometimes it isn&#8217;t. Choose carefully.</p>
<h3>Maximum Lines</h3>
<p>Yaptest is able to kill your external tools if they produce too much output (e.g. 1000 lines of &#8220;connection refused&#8221;).  By default yaptest will not kill tools that produce a lot of output.</p>
<pre>    max_lines =&gt; 4000</pre>
<h3>Parser</h3>
<p>This lets you call a parsing script automatically on the output file created by yaptest.  The output file contains output of the external tool an may contain information that needs to be parsed into the database.  It&#8217;s not mandatory, though.  If you have a parser for your tool&#8217;s output, you should use the auto-parse feature.  If you don&#8217;t, then don&#8217;t worry.</p>
<pre>    parser =&gt; "yaptest-parse-nbtscan.pl"</pre>
<h3></h3>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/using/run-test-api/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Associating Hosts with Security Issues in Yaptest</title>
		<link>https://pentestmonkey.net/yaptest/using/associating-security-issues-with-hosts</link>
					<comments>https://pentestmonkey.net/yaptest/using/associating-security-issues-with-hosts#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 01 Apr 2008 17:48:28 +0000</pubDate>
				<category><![CDATA[Using]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=99</guid>

					<description><![CDATA[Version 0.0.9 of yaptest introduced yaptest-issues.pl.  This script is responsible for storing associations between hosts and security issues that you (or yaptest) have identified (e.g. 10.0.0.1 has the &#8220;telnet -fuser&#8221; vulnerability). This page illustrates how to use yaptest-issues.pl. The Usage Message Usage: yaptest-issues.pl query [ --ip ip ] [ -p port ] [ --trans tcp&#124;udp [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Version 0.0.9 of <a href="http://pentestmonkey.net/projects/yaptest/yaptest-overview/">yaptest</a> introduced yaptest-issues.pl.  This script is responsible for storing associations between hosts and security issues that you (or yaptest) have identified (e.g. 10.0.0.1 has the &#8220;telnet -fuser&#8221; vulnerability).</p>
<p>This page illustrates how to use yaptest-issues.pl.</p>
<p><span id="more-99"></span></p>
<h2>The Usage Message</h2>
<pre>Usage: yaptest-issues.pl query [ --ip ip ] [ -p port ] [ --trans tcp|udp ] [ --issue name ] [ --test test_area ]
       yaptest-issues.pl parse file [ file ... ]
       yaptest-issues.pl add --issue name -i ip [ -p port --trans tcp|udp ]
       yaptest-issues.pl delete --issue name -i ip [ -p port --trans tcp|udp ]

query mode:
        Display issues related to hosts or ports from the backend database.

parse mode
        Attempts to automatically parse a file and extract security issues.
        Currently parses nessus nbe files for a few exploitable issues and
        the output of nxscan and tnscmd.pl.

add mode:
        Associate an issue with a host or port.

delete mode:
        Un-Associate an issue with a host or port.  It is recommended that you
        ALWAYS specify an issue name.  It's not manditatory though, and it IS
        possible to delete all the issues for a host, or even simply delete
        ALL the issues.</pre>
<h2>Parsing Issues From Other Tools</h2>
<p>Yaptest is able to parse security issues from a small number of other tools as of version 0.0.9 so you can keep a summary of the vulnerability found all in one place.</p>
<pre>$ yaptest-issues.pl parse nessus.nbe</pre>
<pre>$ yaptest-issues.pl parse nxscan.out</pre>
<pre>$ yaptest-issues.pl parse tnscmd-10.0.0.1.out</pre>
<p>You&#8217;ll get lots of lines starting with &#8220;PARSED: &#8230;&#8221; if everything working correctly.</p>
<p>Note that yaptest-issues.pl does NOT parse all vulnerabilities from nessus.  It only parses the ones I thought were interesting at the time of writing it.  The idea I had in mind is that yaptest should store a list of the vulnerabilities that would help you actually &#8220;demonstrate risk&#8221; to your client, without clutting the database with issues about Web Server disclosing their software version or hosts responding to ICMP Timestamp requests.  These lower risk issues are all fine, but they&#8217;re not going to help you <em>penetrate</em> hosts more quickly, and that&#8217;s the major goal of yaptest.</p>
<h2>Querying the Issues Database</h2>
<p>To list all issues in the database along with their associated host (and port if appropriate):</p>
<pre> $ yaptest-issues.pl query</pre>
<pre>test_area_name  ip_address      port    transport_protocol_name issue
--------------  ----------      ----    ----------------------- -----</pre>
<p>a1 10.0.0.5 null null MS04-007<br />
a1 10.0.0.5 null null MS04-011<br />
a1 10.0.0.5 null null MS05-027<br />
a1 10.0.0.5 null null MS00-078<br />
a1 10.0.0.5 null null MS02-020<br />
a1 10.0.0.5 null null MS03-043<br />
a1 10.0.0.5 null null MS04-007<br />
a1 10.0.0.9 null null MS02-061<br />
a1 10.0.0.9 null null MS03-043<br />
a1 10.0.0.9 null null MS04-007<br />
a1 10.0.0.9 null null MS04-011<br />
a1 10.0.0.9 null null MS04-022<br />
a1 10.0.0.9 null null MS05-027<br />
a1 10.0.0.9 null null MS05-039<br />
a1 10.0.0.9 null null MS05-051<br />
a1 10.0.0.6 null null MS05-027<br />
a1 10.0.011 23 TCP telnet_fuser</p>
<p>To list the issue associated with a single host:</p>
<pre> $ yaptest-issues.pl query --ip 10.0.0.5
test_area_name  ip_address      port    transport_protocol_name issue
--------------  ----------      ----    ----------------------- -----
a1      10.0.0.5    null    null    MS04-007
a1      10.0.0.5    null    null    MS04-011
a1      10.0.0.5    null    null    MS05-027
a1      10.0.0.5    null    null    MS00-078
a1      10.0.0.5    null    null    MS02-020
a1      10.0.0.5    null    null    MS03-043
a1      10.0.0.5    null    null    MS04-007</pre>
<pre>To list all the hosts (or hosts and ports) assoicated with a particular issue:</pre>
<p>To list the issue associated with a single host:</p>
<pre>$ yaptest-issues.pl query --issue MS04-011
test_area_name  ip_address      port    transport_protocol_name issue
--------------  ----------      ----    ----------------------- -----
a1      10.0.0.5    null    null    MS04-011
a1      10.0.0.9    null    null    MS04-011</pre>
<h2>Manually Associating Issues with Hosts</h2>
<p>This is as easy as making up a name for the issue and typing in the corresponding IP address:</p>
<pre>$ yaptest-issues.pl add --ip 10.0.0.1 --issue telnet_ttyprompt</pre>
<p>That pretty much it.  Refer to the previous section for how to query your newly added issue.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/using/associating-security-issues-with-hosts/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Getting Yaptest to work with Sudo</title>
		<link>https://pentestmonkey.net/yaptest/using/using-sudo-with-yaptest</link>
					<comments>https://pentestmonkey.net/yaptest/using/using-sudo-with-yaptest#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Mon, 31 Mar 2008 21:41:46 +0000</pubDate>
				<category><![CDATA[Using]]></category>
		<category><![CDATA[sudo]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=98</guid>

					<description><![CDATA[When you first install yaptest and try to use sudo you might get the following error: $ sudo yaptest-nmap-udp.pl ERROR: Environment variable YAPTEST_DBNAME is not set  at /usr/local/lib/site_perl/yaptest.pm line 126         yaptest::new('yaptest') called at /usr/local/bin/yaptest-hosts.pl line 8         (in cleanup) Can't call method "disconnect" on an undefined value at /usr/local/lib/site_perl/yaptest.pm line 3247. This is because [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>When you first install yaptest and try to use sudo you might get the following error:</p>
<pre>$ sudo yaptest-nmap-udp.pl</pre>
<pre>ERROR: Environment variable YAPTEST_DBNAME is not set</pre>
<pre> at /usr/local/lib/site_perl/yaptest.pm line 126</pre>
<pre>        yaptest::new('yaptest') called at /usr/local/bin/yaptest-hosts.pl line 8</pre>
<pre>        (in cleanup) Can't call method "disconnect" on an undefined value at /usr/local/lib/site_perl/yaptest.pm line 3247.</pre>
<p>This is because sudo has (very sensibly) unset the environment variable YAPTEST_CONFIG_FILE which in turn prevents YAPTEST_DBNAME getting set.  The yaptest scripts no longer know which test they&#8217;re supposed to be working on.</p>
<p>The solution is simple.  Add an entry like the following into /etc/sudoers:</p>
<pre># Allow users in group users to export specific variables</pre>
<pre>Defaults:youruser      env_keep="DISPLAY YAPTEST_CONFIG_FILE"</pre>
<p>This prevents sudo from unsetting the YAPTEST_CONFIG_FILE (and also DISPLAY because that can be a pain too).</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/using/using-sudo-with-yaptest/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Storing Misc Host Information With Yaptest</title>
		<link>https://pentestmonkey.net/yaptest/using/storing-misc-host-info-with-yaptest</link>
					<comments>https://pentestmonkey.net/yaptest/using/storing-misc-host-info-with-yaptest#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 30 Mar 2008 21:18:05 +0000</pubDate>
				<category><![CDATA[Using]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=97</guid>

					<description><![CDATA[As of version 0.0.7 yaptest is able to store arbitrary information about hosts.  This is particularly useful on large tests.  This page provides a few examples of how to use the yaptest-host-info.pl script. To query the host-info that&#8217;s been recorded for a host: $ yaptest-host-info.pl query -i 10.0.0.1 test_area_name  ip_address      key     value --------------  ----------      ---     [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>As of version 0.0.7 yaptest is able to store arbitrary information about hosts.  This is particularly useful on large tests.  This page provides a few examples of how to use the yaptest-host-info.pl script.<br />
<span id="more-97"></span></p>
<p>To query the host-info that&#8217;s been recorded for a host:</p>
<pre>$ yaptest-host-info.pl query -i 10.0.0.1</pre>
<pre>test_area_name  ip_address      key     value
--------------  ----------      ---     -----
int     10.0.0.1  os      Windows 5.0
int     10.0.0.1  windows_domwkg  WORKGROUP</pre>
<p>To query the OS information (collected only via yaptest-parse-enum4linux.pl at present) on all the hosts your scanned so far:</p>
<pre>$ yaptest-host-info.pl query --key os</pre>
<p>To find all members of a particular domain:</p>
<pre>$ yaptest-host-info.pl query --key windows_domwkg --value xyzco</pre>
<p>To find all the Windows 2000 servers:</p>
<pre>$ yaptest-host-info.pl query --value 'Windows 5.0"</pre>
<p>To find all the domain controllers (this information is collected via yaptest-parse-nbtscan.pl):</p>
<pre>$ yaptest-host-info.pl query --key windows_dc</pre>
<p>To add host-info just specify a new key on the command line:</p>
<pre>yaptest-host-info.pl add --ip 10.0.0.1 --key nis_domain --value foo</pre>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/using/storing-misc-host-info-with-yaptest/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Interrupting and Resuming Scans With Yaptest</title>
		<link>https://pentestmonkey.net/yaptest/using/interrupting-and-resuming-yaptest</link>
					<comments>https://pentestmonkey.net/yaptest/using/interrupting-and-resuming-yaptest#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 30 Mar 2008 18:09:36 +0000</pubDate>
				<category><![CDATA[Using]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=96</guid>

					<description><![CDATA[As of yaptest v0.0.7 it is possible to interrupt scans and resume them later without duplicating lots of the scanning you&#8217;ve already completed.  This feature is intended primarily for multi-day pentests where you need to stop your scan at the end of each day, then resume where you left off the next morning. This page [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>As of yaptest v0.0.7 it is possible to interrupt scans and resume them later without duplicating lots of the scanning you&#8217;ve already completed.  This feature is intended primarily for multi-day pentests where you need to stop your scan at the end of each day, then resume where you left off the next morning.</p>
<p>This page explains how to use the feature.</p>
<p><span id="more-96"></span></p>
<h2>How do I run my scans so that I can resume them later?</h2>
<p>Basically, you don&#8217;t need to anything special.  As of version 0.0.7 yaptest remembers which commands it has run against which hosts and avoids running the same commands twice.</p>
<p>By way of an example, say you&#8217;ve finished your TCP port scans and start running nikto:</p>
<pre>$ yaptest-nikto.pl</pre>
<p>&#8230; some scanning &#8230;</p>
<p>Now suppose that you need to interrupt the scan.  You hit CTRL-C and leave some nikto scans completed, some interrupted part way through and some not even started.  You can resume your scan simply by running yaptest-nikto.pl again:</p>
<pre>$ yaptest-nikto.pl</pre>
<p>&#8230; some more scanning &#8230;</p>
<p>Yaptest will not run nikto against anything that you successfully scanned before.  It will only run against those web servers which had their scan interrupted or those for which the scan wasn&#8217;t even started.</p>
<h2>And this works for all yaptest scripts?</h2>
<p>Well, sort of.  It works for all scripts that use the run_test API, which is the vast majority.   The only two exceptions as of v0.0.7 are:</p>
<ul>
<li>yaptest-arp-scan-local-network.pl</li>
<li>yaptest-snmpwalk.pl</li>
</ul>
<h2>What about if I actually WANT to re-run a test for some reason?</h2>
<p>There are occasions when you might want to run a scan twice.  One situtation is when you kick off yaptest without first configuring your IP stack properly.  Yaptest will think that the tests concerned have finished successfully, but you know different.  You need to make yaptest forget that certain commands have been run.</p>
<p>Lets stick with the nikto example and assume that we need to rerun all of our nikto scans.  First find out the command_id that yaptest has used to &#8220;remember&#8221; that nikto has been run.  Yaptest-progress.pl will show you all the command_id&#8217;s:</p>
<p>$ yaptest-progress.pl list</p>
<p>**************************************************************************<br />
*                      Starting yaptest-progress.pl                      *<br />
*  [ Using yaptest v0.0.7 &#8211; http://pentestmonkey.net/projects/yaptest ]  *<br />
**************************************************************************</p>
<p>command_id      command_template<br />
&#8212;&#8212;&#8212;-      &#8212;&#8212;&#8212;&#8212;&#8212;-<br />
1       nbtscan -b 32000 -v -f ::IPFILE::<br />
2       nice nmap -sU -P0 -n -O -v -oA nmap-udp-::IP::.out ::IP::<br />
3       nbtscan -h -b 32000 -v -f ::IPFILE::<br />
4       ike-scan -f ::IPFILE::<br />
5       yapscan -sI -r 5 -i vmnet8 -b 200000 -t &#8211; -f ::IPFILE::<br />
6       onesixtyone -c /home/x/tools/dictionaries/snmp-communities.txt -i ::IPFILE::<br />
7       sudo nmap -sO -P0 -n -v -oA nmap-ip-protocols-::IP::.out ::IP::<br />
8       amap -u -b ::IP:: ::PORTLIST-SPACE::<br />
9       yapscan -sS -r 2 -i vmnet8 -b 1000000 -P known -f ::IPFILE::<br />
10      rpcinfo -p ::IP::<br />
11      showmount -e ::IP::<br />
12      showmount -a ::IP::<br />
13      rup -d ::IP::<br />
14      rusers -l ::IP::<br />
15      nxscan ::IP::<br />
16      nmap -sS -P0 -n -O -v -A &#8211;version-all -oA nmap-tcp-::IP::.out -p ::PORTLIST:: ::IP::<br />
17      bannergrab ::IP:: ::PORT::<br />
18      amap -b ::IP:: ::PORTLIST-SPACE::<br />
19      nikto.pl -nolookup 127.0.0.1 -h ::IP:: -p ::PORT::<br />
20      dcetest ::IP::<br />
&#8230;</p>
<p>We can see the nikto command towards the end of the output above with command_id 19.  Now we&#8217;ll use this id to delete some entries form yaptest&#8217;s progress table to make it forget that it&#8217;s run nikto before:</p>
<pre>$ yaptest-progress.pl reset 19</pre>
<p>That&#8217;s it.  Next time your rerun yaptest-nikto.pl, it&#8217;ll scan all web server because yaptest has forgotten that it scanned them.</p>
<h2>What it I only want to re-run part of a test, not all of it?</h2>
<p>There are some options you can pass to yaptest-progress.pl if you only want to rescan some hosts, but not all.  Here are some examples:</p>
<pre>$ yaptest-progress.pl reset 19 -i 10.0.0.1</pre>
<pre>$ yaptest-progress.pl reset 19 -i 10.0.0.1 -p 8000

$ yaptest-progress.pl reset 19 -p 8000</pre>
<pre></pre>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/using/interrupting-and-resuming-yaptest/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Yaptest Configuration Wizard</title>
		<link>https://pentestmonkey.net/yaptest/using/yaptest-wizard</link>
					<comments>https://pentestmonkey.net/yaptest/using/yaptest-wizard#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 03 Nov 2007 17:34:07 +0000</pubDate>
				<category><![CDATA[Using]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=94</guid>

					<description><![CDATA[Some users commented that the creation of new tests (i.e. databases and &#8220;test area&#8221;) was unnecessarily difficult.  Version 0.0.5 of yaptest now includes a interactive Wizard, yaptest-wizard.pl that takes users step by step through setting up a new test.  The old method using yaptest-new.pl and yaptest-new-test-area.pl is still supported. Thanks to all those who have [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some users commented that the creation of new tests (i.e. databases and &#8220;test area&#8221;) was unnecessarily difficult.  Version 0.0.5 of yaptest now includes a interactive Wizard, yaptest-wizard.pl that takes users step by step through setting up a new test.  The old method using yaptest-new.pl and yaptest-new-test-area.pl is still supported.</p>
<p>Thanks to all those who have tested yaptest and given feedback.</p>
<p>THIS PAGE HAS BEEN OBSELETED BY THE USER GUIDE</p>
<p><span id="more-94"></span></p>
<p>The Wizard basically lets you create a new database, lists the test areas you&#8217;ve created and lets you create new test areas:</p>
<p>$ yaptest-wizard.pl</p>
<pre>**************************************************************************
*                       Starting yaptest-wizard.pl                       *
*  [ Using yaptest v0.0.5 - http://pentestmonkey.net/projects/yaptest ]  *
**************************************************************************

    THIS WIZARD CURRENLTY ONLY DEALS WITH THE CREATION OF NEW DATABASES
                               AND TEST AREAS

=========================================================================
Database Configuration

You are currenlty not configured to use a database.

Options:
  1: Create a new database
  q: Quit

NB: If you previously created a database and want to use it,
    quit, change to the corresponding directory,
    'source env.sh', then re-run this wizard.

Enter option (1, q): 1
-------------------------------------------------------------------------
=========================================================================
Create New Database

Enter a name for the new database.  A subdirectory of the same name will
be created at the same time.

Current Directory: /home/user
Enter name for new yaptest database (or CTRL-C to quit): abc_co
-------------------------------------------------------------------------
Database name: abc_co
Creating directory 'abc_co'...done
Creating database 'abc_co'
Config file: /home/user/abc_co/yaptest.conf
Writing to config file /home/user/abc_co/yaptest.conf
Creating file env.sh
Restarting wizard with new configuration

**************************************************************************
*                       Starting yaptest-wizard.pl                       *
*  [ Using yaptest v0.0.5 - http://pentestmonkey.net/projects/yaptest ]  *
**************************************************************************

    THIS WIZARD CURRENLTY ONLY DEALS WITH THE CREATION OF NEW DATABASES
                               AND TEST AREAS

=========================================================================
Database Configuration

You are currently configured to use:
  Database:    abc_co
  Test Dir:    /home/user/abc_co

The following test areas exist in this database:
  &lt;none&gt;

Options:
  1: Create a new test area in above database
  2: Create a new database
  q: Quit

NB: If you previously created different database and want
    to use it, quit, change to the corresponding directory,
    'source env.sh', then re-run this wizard.

Enter option (1, 2, q): 1
-------------------------------------------------------------------------
=========================================================================
Create New Test Area

To create a new test area (internal, vlan100, network123, etc.) enter the
test area name below.  A directory of the name name will be created at
same time.

Current Directory: /home/user/abc_co
Enter name for new test area (or CTRL-C to quit): vlan123
-------------------------------------------------------------------------
Database name: vlan123
Creating directory 'vlan123'...done
Creating test area 'vlan123'
Writing to config file yaptest.conf
Creating file env.sh
-------------------------------------------------------------------------
=========================================================================
Database Configuration

You are currently configured to use:
  Database:    abc_co
  Test Dir:    /home/user/abc_co

The following test areas exist in this database:
  vlan123

Options:
  1: Create a new test area in above database
  2: Create a new database
  q: Quit

NB: If you previously created different database and want
    to use it, quit, change to the corresponding directory,
    'source env.sh', then re-run this wizard.

Enter option (1, 2, q): 1
-------------------------------------------------------------------------
=========================================================================
Create New Test Area

To create a new test area (internal, vlan100, network123, etc.) enter the
test area name below.  A directory of the name name will be created at
same time.

Current Directory: /home/user/abc_co/vlan123
Enter name for new test area (or CTRL-C to quit): external
-------------------------------------------------------------------------
Database name: external
Creating directory 'external'...done
Creating test area 'external'
Writing to config file yaptest.conf
Creating file env.sh
-------------------------------------------------------------------------
=========================================================================
Database Configuration

You are currently configured to use:
  Database:    abc_co
  Test Dir:    /home/user/abc_co

The following test areas exist in this database:
  external
  vlan123

Options:
  1: Create a new test area in above database
  2: Create a new database
  q: Quit

NB: If you previously created different database and want
    to use it, quit, change to the corresponding directory,
    'source env.sh', then re-run this wizard.

Enter option (1, 2, q): q
-------------------------------------------------------------------------
IMPORTANT: To use your newly created test areas you must first:
           $ cd mydb/mytestarea
           $ source env.sh</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/using/yaptest-wizard/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Managing Login Credentials with Yaptest</title>
		<link>https://pentestmonkey.net/yaptest/using/yaptest-password-management</link>
					<comments>https://pentestmonkey.net/yaptest/using/yaptest-password-management#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 15 Jul 2007 19:50:47 +0000</pubDate>
				<category><![CDATA[Using]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=93</guid>

					<description><![CDATA[During larger pentests, it&#8217;s quite possible you&#8217;ll acquire logon credentials for tens, hundreds or even thousands of systems.  After a while it becomes hard to track which systems you know usernames for, which ones you&#8217;ve got passwords for, etc.  Yaptest can help you keep track of all your logon credentials.  Here are some of its [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>During larger pentests, it&#8217;s quite possible you&#8217;ll acquire logon credentials for tens, hundreds or even thousands of systems.  After a while it becomes hard to track which systems you know usernames for, which ones you&#8217;ve got passwords for, etc.  Yaptest can help you keep track of all your logon credentials.  Here are some of its features:</p>
<ul>
<li>Ability to parse credentials from passwd, shadow and pwdump-style files</li>
<li>Ability to parse group membership information from /etc/group and <a href="http://labs.portcullis.co.uk/application/enum4linux/">enum4linux</a> output</li>
<li>Enter arbitrary logon information into the database from the command line</li>
<li>Command-line querying of the credentials database</li>
<li>Uses John the Ripper to crack hashes that haven&#8217;t been cracked yet</li>
<li>Can use Rainbow Tables (via rcrack) to crack LANMAN and NTLM hashes</li>
</ul>
<p>Examples of the type of query you can make include:</p>
<ul>
<li>Show me all the usernames we&#8217;ve found for host 10.0.0.1</li>
<li>Show me all the systems which have the username &#8220;bob&#8221;</li>
<li>Show me all the members of the adminstrators group on 10.0.0.1</li>
<li>Show me all the passwords we know for the user &#8220;bob&#8221;</li>
<li>Show me all the LANMAN hashes we&#8217;ve collected</li>
</ul>
<p>Query results are all tab-delimitted so are easily cuttable and greppable.</p>
<p><span id="more-93"></span></p>
<h3>Parsing password files</h3>
<p>Yaptest currently knows how to parse usernames and the following types of password hashes from passwd and shadow files:</p>
<ul>
<li>DES-based hashes</li>
<li>MD5-based hashes</li>
<li>Blowfish-based hashes</li>
</ul>
<p>It will also parse the output of tools like pwdump2 and fgdump and store the LANMAN and NT hashes in the database.</p>
<p>Yaptest should be able to automatically determine the type of hash in the file, so you just need to tell it which host the passwords were found on and the name of the file, e.g:</p>
<pre>$ yaptest-credentials.pl add -i 10.10.0.1 -f passwd-file</pre>
<pre>$ yaptest-credentials.pl add -i 10.10.0.1 -f shadow-dot-1</pre>
<pre>$ yaptest-credentials.pl add -i 10.10.0.2 -f pwdump2-output.txt</pre>
<h3>Entering Arbitrary Login Credentials</h3>
<p>If you find a new username for a host but don&#8217;t yet know the password (e.g. via finger or SMTP user enumeration), you can enter just the username in the database.  Note that you&#8217;ll need to specify what type of username you&#8217;ve found as many different types are supported:</p>
<pre>$ yaptest-credentials.pl add -i 10.10.0.1 --credtype os_unix --username bob</pre>
<p>Later you might find the password.  The following will modify the original entry:</p>
<pre>$ yaptest-credentials.pl add -i 10.10.0.1 --credtype os_unix --username bob --password magic</pre>
<p>In the section above, credentials were associated with only a host.  Yaptest is also able to assiciate credentials with individual ports where appropriate.  Here&#8217;s an example of how you could add an SNMP community string:</p>
<pre>$ yaptest-credentials.pl add -i 10.10.0.243 --port 161 --trans udp --credtype snmp_community --password private123</pre>
<h3>Parsing Group Membership Information</h3>
<p>For Unix-based systems user and group information resides in the file /etc/passwd and /etc/group files respectively.  First make sure that the usernames are imported:</p>
<pre>$ yaptest-credentials.pl add --ip 127.0.0.1 -f etc-passwd-127.0.0.1</pre>
<p>Then import group membership information as follows:</p>
<pre>$ yaptest-groups.pl add --group_ip 10.0.0.1 -f etc-groups-10.0.0.1</pre>
<p>For Windows-based systems user and group information is imported from the output of <a href="http://labs.portcullis.co.uk/application/enum4linux/">enum4linux.pl</a> .  First make sure that the usernames and hostnames are imported:</p>
<pre>$ yaptest-parse-nbtscan.pl nbtscan*</pre>
<pre>$ yaptest-parse-enum4linux.pl enum4linux-10.0.0.1.out</pre>
<p>Then import group membership information as follows:</p>
<pre>$ yaptest-groups.pl add --group_ip 10.0.0.1 -f enum4linux-10.0.0.1.out</pre>
<p>Note that if you run yaptest-db-ips.sh, all your username and hostname informaiton is imported automatically.  You only need to import the group information manually.</p>
<p>To query who is in the Administrators group on 10.0.0.1:</p>
<pre>$ yaptest-groups.pl query --group_ip 10.0.0.1 --group_name Administrators</pre>
<pre>10.0.0.1  Administrators  null    10.0.0.1  Administrator</pre>
<pre>Total records: 1</pre>
<p>The IP address appears twice.  This look sa bit strange, but is needed to represent Windows domains.  The IP on the left is the IP that the group resides on (could be domain admins group on the domain controller).   The IP address on the right is the IP the member resides on (e.g. Administrators group on a domain member).</p>
<p>To query which groups / hosts have a user called &#8216;bob&#8217;:</p>
<pre>$ yaptest-groups.pl query --member_name bob</pre>
<h3>Launching John the Ripper</h3>
<p>When you&#8217;ve collected a large number of hashes from a large number of hosts, it can be tricky to keep track of which hashed have been cracked and which which ones belong to which host.  Yaptest can act as a wrapper around john the ripper to help you keep track..</p>
<p>Launch john the ripper on any outstanding LANMAN hashes by running:</p>
<pre>$ yaptest-credentials.pl crack lanman</pre>
<p>When you&#8217;re fed up of waiting, kill john from another windows (don&#8217;t CTRL-C yaptest-credentials.pl):</p>
<pre>$ killall john</pre>
<p>yaptest-credendials.pl will then parse the john.pot file and update the crednetials database with all the newly found passwords.  If both LANMAN hashes have been cracked for any passwords, yaptest will also recover the case of the password using the NT hash.  List all the newly cracked passwords by running:</p>
<pre>$ yaptest-credentials.pl query</pre>
<p>Next time your run john the ripper, only the uncracked hashes will be used:</p>
<pre>$ yaptest-credentials.pl crack lanman</pre>
<p>I&#8217;ve also used yaptest-credentials.pl to crack des and NTLM hashes.  Other types of hashes may or may not work as of v0.0.5.</p>
<p>If you want to run a copy of John that&#8217;s not in your path or run the MPI version under mpiexec specify a different command line for john like this:</p>
<pre>$ yaptest-config.pl query yaptest_john_command</pre>
<pre>$ yaptest-config.pl set yaptest_john_command 'mpiexec -n 4 /path/to/john'</pre>
<p>You might also need to change the location of John&#8217;s pot file like this:</p>
<pre>$ yaptest-config.pl query yaptest_john_pot</pre>
<pre>$ yaptest-config.pl set yaptest_john_pot /path/to/john.pot</pre>
<h3>Password Cracking with Rainbow Tables</h3>
<p>As of v0.0.6 yaptest-credentials.pl can make use of rainbow tables to crack LANMAN and NTLM passwords.  It calls out to <a href="http://www.antsight.com/zsl/rainbowcrack/">rcrack</a> to acheive this.</p>
<p>You will of course need to be in possession of appropriate rainbow tables.  <a href="http://www.freerainbowtables.com">www.freerainbowtables.com</a> is a good place to start.  Alternatively you could generate your own, but that&#8217;ll take a while.</p>
<p>The following command tells yaptest to run rcrack on uncracked lanman hashes using the tables in /myrainbowtables/lm/alpha-numeric-14symbols/.</p>
<pre>$ yaptest-credentials.pl rcrack /myrainbowtables/lm/alpha-numeric-14symbols/ lanman</pre>
<p>A note on performance: rcrack can be quite slow if used on a large number of hashes.  I wouldn&#8217;t recommend running it on more than 50 hashes.  If you have more than 50 uncracked hashes, let John the Ripper run a bit longer.</p>
<p><strong>Getting Password Cracking Stats</strong></p>
<p>The following command will display the number of password hashes in the database alongside the number that have been cracked so far:</p>
<pre>$ yaptest-credentials.pl stats
**************************************************************************
*                    Starting yaptest-credentials.pl                     *
*  [ Using yaptest v0.0.6 - http://pentestmonkey.net/projects/yaptest ]  *
**************************************************************************</pre>
<pre>Stats for cracking of password hashes:</pre>
<pre>Hash Type     Count    Cracked     Uncracked
lanman        655      636 (97.1%)    19 (2.9%)
nt            655      636 (97.1%)    19 (2.9%)</pre>
<h3>Integration with Username Guessing Tools</h3>
<p>The following scripts run tools to gather Windows usernames on hosts with RestritctAnonmous = 0 or 1 (or the XP/2003 equivalent) or host with a guessable SNMP community string:</p>
<ul>
<li>yaptest-enum4linux.pl</li>
<li>yaptest-snmpwalk.pl</li>
</ul>
<p>These scripts parse the output and enter the username into the credentials database, so you can quickly find valid logon names later using yaptest-credentials.pl:</p>
<ul>
<li>yaptest-parse-enum4linux.pl</li>
<li>yaptest-parse-snmpwalk.pl</li>
</ul>
<h3>Integration with Password Guessing Tools</h3>
<p>The following scripts launch hydra and onesixtyone against appropriate targets:</p>
<ul>
<li>yaptest-password-guess-ftp.pl</li>
<li>yaptest-password-guess-mssql.pl</li>
<li>yaptest-password-guess-rlogin.pl</li>
<li>yaptest-password-guess-smb.pl</li>
<li>yaptest-password-guess-ssh.pl</li>
<li>yaptest-onesixtyone.pl</li>
</ul>
<p>The following scripts parse the output files generate by those above and enter any credetails gathered directly into the credentials database:</p>
<ul>
<li>yaptest-parse-hydra.pl</li>
<li>yaptest-parse-onesixtyone.pl</li>
</ul>
<h3>Querying the Credential Database</h3>
<p>Now you&#8217;ve entered all your hard-earned information into the credential database how do you query it?  The yaptest-credentials.pl script is your interface for queries too:</p>
<pre>$ yaptest-credentials.pl

Usage:
      yaptest-credentials.pl add --ip ip -f passwd.txt
      yaptest-credentials.pl add --ip ip --credtype type [ options ]
      yaptest-credentials.pl query [ options ]
      yaptest-credentials.pl crack { lanman | des }
      yaptest-credentials.pl rcrack table-dir { lanman | ntlm }
      yaptest-credentials.pl stats

Adds or queries usernames, passwords and password hashes.

options for "add" and "query" commands are:
        --port      n         Port to which credential correspond
        --trans     prot      Transport protocol (tcp or udp)
        --uid       n         UID for account
        --username  user      Username
        --password  pass      Password
        --hash      hash      Password hash
        --file      file      passwd, shadow or pwdump file
        --credtype  credtype  Credential type (os_unix, os_windows, etc.)
        --hashtype  hashtype  Type of hash (lanman, blowfish, etc.)
        --test_area area      Test area (vlan1, vlan2, etc.)</pre>
<pre>If you want to run a copy of John that's not in your path or run the MPI
version under mpiexec specify a different command line for john like this:
$ yaptest-config.pl query yaptest_john_command
$ yaptest-config.pl set yaptest_john_command 'mpiexec -n 4 /path/to/john'

You might also need to change the location of John's pot file like this:
$ yaptest-config.pl query yaptest_john_pot
$ yaptest-config.pl set yaptest_john_pot /path/to/john.pot</pre>
<p>Here are a few examples:</p>
<p>List all usernames, password and password hashes along with the IPs and ports they correspond to:</p>
<pre>$ yaptest-credentials.pl query</pre>
<p>List all the credentials for host 10.0.01:</p>
<pre>$ yaptest-credentials.pl query -i 10.0.0.1</pre>
<p>List all credentials for port 161 (TCP or UDP):</p>
<pre>$ yaptest-credentials.pl query --port 161</pre>
<p>UDP only:</p>
<pre>$ yaptest-credentials.pl query --port 161 --trans UDP</pre>
<p>All windows credentials:</p>
<pre>$ yaptest-credentials.pl query --credtype os_windows</pre>
<p>All details about users called &#8220;Administrator&#8221;:</p>
<pre>$ yaptest-credentials.pl query --username Administrator</pre>
<p>To query group memberships, use the &#8220;query&#8221; command to yaptest-groups.pl. The following will list the members of the Administrators group on 10.0.0.1:</p>
<pre>$ yaptest-groups.pl query --group Administrators --ip 10.0.0.1</pre>
<h3>Future features</h3>
<p>Ability to be able to CTRL-C john the ripper and still have its output parse into the database.</p>
<p>Make sure that john the ripper also works against MD5 and Blowfish style Unix passwords.</p>
<p>Support for other username enumeration tools such as smtp-user-enum, ftp-user-enum, finger-user-enum and exploitation of the Apache mod_user username enumeration vulnerability.</p>
<p>Support for scripts that grab pwdump, passwd, group and shadow files.</p>
<p>More intellegent password guessing based on usernames already enumerated.</p>
<p>Seed john the ripper with a wordlist of passwords already cracked.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/using/yaptest-password-management/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Yaptest User Guide</title>
		<link>https://pentestmonkey.net/yaptest/using/yaptest-user-guide</link>
					<comments>https://pentestmonkey.net/yaptest/using/yaptest-user-guide#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 30 Jun 2007 18:40:10 +0000</pubDate>
				<category><![CDATA[Using]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=92</guid>

					<description><![CDATA[Some notes on how to actually use yaptest&#8230; This page covers how to setup a new test using yaptest and run some supported tools to begin a pentest.  Also see the Installation page . Assumptions This guide assumes you&#8217;re using Linux and have PostgreSQL installed locally and that the database server allows you to connect [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some notes on how to actually use yaptest&#8230;<br />
<span id="more-92"></span></p>
<p>This page covers how to setup a new test using yaptest and run some supported tools to begin a pentest.  Also see the <a href="../projects/yaptest/yaptest-installation">Installation page</a> .</p>
<h3>Assumptions</h3>
<p>This guide assumes you&#8217;re using Linux and have PostgreSQL installed locally and that the database server allows you to connect as any user without a password (the default on gentoo).</p>
<p>Disclaimer: This configuration is bad from a security perspective unless:</p>
<ul>
<li>PostgreSQL is bound to the loopback interface only or accessed via unix domain sockets; AND</li>
<li>You&#8217;re the only person allowed to log into the database server</li>
</ul>
<p>It is also assumed that:</p>
<ul>
<li>yaptest has been successfully <a href="../projects/yaptest/yaptest-installation">installed</a>.</li>
<li>You are using BASH as your shell.</li>
</ul>
<h3>Starting a New Test</h3>
<p>First start the postgresql backend.  The command is normally something like:</p>
<pre># /etc/init.d/postgresql start</pre>
<p>Use yaptest-wizard.pl to create a new database and a new directory to hold all your test data.  This design is used to avoid mixing data from two clients either at the file-system level or at the database-level.  If you don&#8217;t like interactive wizards use the tools yaptest-new-db.pl and yaptest-new-test-area.pl instead.</p>
<pre>$ yaptest-wizard.pl

**************************************************************************
*                       Starting yaptest-wizard.pl                       *
*  [ Using yaptest v0.0.7 - http://pentestmonkey.net/projects/yaptest ]  *
**************************************************************************

                    __  __            __            __
                     / /___ _____  / /____  _____/ /_
                       / __ `/ __ / __/ _ / ___/ __/
                     / / /_/ / /_/ / /_/  __(__  ) /_
                    /_/__,_/ .___/__/___/____/__/
                           /_/
                Doing the tedious bits so you don't have to

    THIS WIZARD CURRENLTY ONLY DEALS WITH THE CREATION OF NEW DATABASES
                               AND TEST AREAS
=========================================================================
Database Configuration

You are currenlty not configured to use a database.

Options:
  1: Create a new database
  q: Quit

NB: If you previously created a database and want to use it,
    quit, change to the corresponding directory,
    'source env.sh', then re-run this wizard.

Enter option (1, q):</pre>
<p>Select 1 to create a new database.  Give it a name like &#8220;abc_company&#8221;.  This is also used for a directory which should be used to store all your tool output.</p>
<pre>Enter option (1, q): 1</pre>
<pre>-------------------------------------------------------------------------
=========================================================================
Create New Database</pre>
<pre>Enter a name for the new database.  A subdirectory of the same name will
be created at the same time.</pre>
<pre>Current Directory: /home/u
Enter name for new yaptest database (or CTRL-C to quit): abc_company
-------------------------------------------------------------------------
Database name: abc_company
Creating directory 'abc_company'...done
Creating database 'abc_company'
Config file: /home/u/abc_company/yaptest.conf
Writing to config file /home/u/abc_company/yaptest.conf
Creating file env.sh
Restarting wizard with new configuration</pre>
<pre>...
=========================================================================
Database Configuration
You are currently configured to use:
  Database:    abc_company
  Test Dir:    /home/u/abc_company
The following test areas exist in this database:
  &lt;none&gt;
Options:
  1: Create a new test area in above database
  2: Create a new database
  q: Quit</pre>
<pre>NB: If you previously created different database and want
    to use it, quit, change to the corresponding directory,
    'source env.sh', then re-run this wizard.
Enter option (1, 2, q):</pre>
<p>Next you&#8217;ll need to create at least on test area.  In this context a &#8220;test area&#8221; is a pair of location-of-pentest-lappy and target-network.  The following example test areas illustrate the meaning of &#8220;test area&#8221;:</p>
<ul>
<li>Test area &#8220;inet_to_us_gw&#8221; could mean testing over the Internet towards your client&#8217;s United State gateway</li>
<li>Test area &#8220;vlan123_local&#8221; could mean connecting to VLAN123 and testing the local hosts on that segment</li>
<li>Test area &#8220;userlan_to_dmz&#8221; could mean connecting to the Internal network and scanning the DMZ</li>
</ul>
<p>The larger the pentest, the more important it is that you choose sensible names.  For small tests, anything will do.  We&#8217;ll go with &#8220;external&#8221;:</p>
<pre>Enter option (1, 2, q): 1</pre>
<pre>-------------------------------------------------------------------------
=========================================================================
Create New Test Area
To create a new test area (internal, vlan100, network123, etc.) enter the
test area name below.  A directory of the name name will be created at
same time.</pre>
<pre>Current Directory: /home/u/abc_company
Enter name for new test area (or CTRL-C to quit): external
-------------------------------------------------------------------------
Database name: external
Creating directory 'external'...done
Creating test area 'external'
Writing to config file yaptest.conf
Creating file env.sh
-------------------------------------------------------------------------
=========================================================================
Now quit the wizard with q:
Enter option (1, 2, q): q
-------------------------------------------------------------------------
IMPORTANT: To use your newly created test areas you must first:
           $ cd abc_company/yourtestarea
           $ source env.sh</pre>
<p>Follow the &#8220;important&#8221; instructions above:</p>
<pre>$ cd abc_company/
$ cd external/
$ source env.sh</pre>
<p>Any yaptest scripts you run will now:</p>
<ul>
<li>Know which database to use</li>
<li>Know which test area you&#8217;re currently assessing</li>
<li>Save scan data to the correct directory</li>
</ul>
<p>NB: If you forget to &#8220;source env.sh&#8221; all the yaptest script will throw an error like:</p>
<pre>ERROR: Environment variable YAPTEST_DBNAME is not set...</pre>
<p>You can create new test areas later on using the wizard.  To view a list of test areas either use the wizard or the command:</p>
<pre>$ yaptest-test-areas.pl query</pre>
<p>In the next section we&#8217;ll do some scanning.  Once you&#8217;ve finished a test area and need to move to the next one it&#8217;s important that you move to the corresponding directory and &#8220;source&#8221; the env.sh file:</p>
<pre>$ cd ../external_gw2</pre>
<pre>$ source env.sh</pre>
<h3>Doing some scanning</h3>
<p>For this section we&#8217;ll assume that we&#8217;re testing the local network segment so we can demonstrate the use of ARP for host-discovery.</p>
<p>The first thing you&#8217;d normally do when running yaptest is to add all the IP addresses you want to test into the backend database.  First we need to find a list of live hosts.</p>
<p>We need to be root to run <a href="http://www.nta-monitor.com/tools/arp-scan/">arp-scan</a> , so the use of sudo is recommended.  However if you can&#8217;t be bothered <a href="http://pentestmonkey.net/projects/yaptest/using-sudo-with-yaptest/">configuring sudo</a> to preserve the right parts of your environment do this:</p>
<pre>$ su</pre>
<pre># pwd</pre>
<pre>/home/u/abc_company/vlan1</pre>
<pre># source env.sh</pre>
<p>Check that yaptest knows the correct network interface to use. And set it if not. The help message describes how to do this:</p>
<pre># yaptest-arp-scan-local-network.pl --help

Usage: yaptest-arp-scan-local-network.pl
ARP scans the local network.

This script needs to know the Network Interface to use.  This
is found from the 'yaptest_interface' config option:
$ yaptest-config.pl query yaptest_interface
$ yaptest-config.pl set yaptest_interface eth0

NB: This script relies on arp-scan being in the path</pre>
<p>Start the scan&#8230;</p>
<pre># yaptest-arp-scan-local-network.pl
[PID 936] ------------------ Yaptest "run_test" executing command ... ---------------------
[PID 936] Command ............. arp-scan -r 2 -I vmnet1 -l
[PID 936] Output File ......... arp-scan.out.2
[PID 936] ---------------------------------------------------------------------------------
[PID 936] Interface: vmnet1, datalink type: EN10MB (Ethernet)
[PID 936] Starting arp-scan 1.5 with 256 hosts (http://www.nta-monitor.com/tools/arp-scan/)
[PID 936] 172.16.16.4   00:0c:29:f3:6b:a8       VMware, Inc.
[PID 936] 172.16.16.5   00:0c:29:09:8d:2e       VMware, Inc.
[PID 936] 172.16.16.6   00:0c:29:31:dc:1b       VMware, Inc.
[PID 936] 172.16.16.7   00:0c:29:3d:85:01       VMware, Inc.
[PID 936] 172.16.16.8   00:0c:29:8b:2d:e3       VMware, Inc.
[PID 936] 172.16.16.9   00:0c:29:f7:de:4e       VMware, Inc.
[PID 936] 172.16.16.10  00:0c:29:d6:64:c3       VMware, Inc.
[PID 936] 172.16.16.254 00:50:56:ea:9d:d8       VMWare, Inc.
[PID 936]
[PID 936] 8 packets received by filter, 0 packets dropped by kernel
[PID 936] Ending arp-scan 1.5: 256 hosts scanned in 1.283 seconds (199.53 hosts/sec).  8 responded</pre>
<p>Note that if you run this command twice a different output file will be used to avoid clobbering the first.</p>
<p>The output from arp-scan will be automatically parsed by yaptest-parse-arp-scan.pl (as of yaptest 0.0.7).  If for any reason you need to parse the output of an old arp-scan, you can do this manually:</p>
<pre># yaptest-parse-arp-scan.pl arp-scan.out.2

**************************************************************************
*                   Starting yaptest-parse-arp-scan.pl                   *
*  [ Using yaptest v0.0.4 - http://pentestmonkey.net/projects/yaptest ]  *
**************************************************************************

Processing arp-scan.out.2...
Interface: vmnet1, datalink type: EN10MB (Ethernet)
Starting arp-scan 1.5 with 256 hosts (http://www.nta-monitor.com/tools/arp-scan/)
172.16.16.4     00:0c:29:f3:6b:a8       VMware, Inc.
PARSED: IP=172.16.16.4, MAC=00:0c:29:f3:6b:a8, DESC=VMware, Inc.
172.16.16.5     00:0c:29:09:8d:2e       VMware, Inc.
PARSED: IP=172.16.16.5, MAC=00:0c:29:09:8d:2e, DESC=VMware, Inc.
172.16.16.6     00:0c:29:31:dc:1b       VMware, Inc.
PARSED: IP=172.16.16.6, MAC=00:0c:29:31:dc:1b, DESC=VMware, Inc.
...</pre>
<p>Once this is done, our backend database will be populated with a list of hosts to scan.</p>
<pre># yaptest-hosts.pl query
vlan1  172.16.16.4     null    null
vlan1  172.16.16.5     null    null
vlan1  172.16.16.6     null    null
vlan1  172.16.16.7     null    null
vlan1  172.16.16.8     null    null
vlan1  172.16.16.9     null    null
vlan1  172.16.16.10    null    null
vlan1  172.16.16.254   null    null
Total records: 8</pre>
<p>You can remove any hosts that you don&#8217;t want scanned:</p>
<pre># yaptest-hosts.pl delete -i 172.16.16.254</pre>
<pre>Deleting 172.16.16.254</pre>
<pre># yaptest-hosts.pl query
vlan1  172.16.16.4     null    null
vlan1  172.16.16.5     null    null
vlan1  172.16.16.6     null    null
vlan1  172.16.16.7     null    null
vlan1  172.16.16.8     null    null
vlan1  172.16.16.9     null    null
vlan1  172.16.16.10    null    null
Total records: 7</pre>
<p>The other tools can then draw on this information to perform further testing.  Note that you can also add a list of hosts to scan using the script yaptest-hosts.pl (for those occassions when ARP scanning isn&#8217;t appropriate).</p>
<pre># yaptest-hosts.pl add -f ips.txt</pre>
<p>At this point, you&#8217;d probably just run yaptest-db-ips.sh to run a whole load of different pre-configured tests.  However, for the purposes of this tutorial, we&#8217;ll run some of the commands from yaptest-db-ips.sh manually.</p>
<p>Fisrt we&#8217;ll do a TCP portscan using <a href="http://pentestmonkey.net/tools/yapscan/">yapscan</a> .  The following script connects to the database to find which hosts it needs to scan:</p>
<pre># yaptest-yapscan-tcp.pl</pre>
<pre>[PID 1057] ------------------ Yaptest "run_test" executing command ... ---------------------
[PID 1057] Command ............. yapscan -sS -r 2 -i vmnet1 -b 1000000 -P all -f yaptest-ips-0YZ4x
[PID 1057] Output File ......... yapscan-tcp.out.2
[PID 1057] ---------------------------------------------------------------------------------
[PID 1057] Starting Yapscan v0.7.1-beta ( http://pentestmonkey.net/tools/yapscan )
[PID 1057]
[PID 1057]  ----------------------------------------------------------
[PID 1057] |                   Scan Information                       |
[PID 1057]  ----------------------------------------------------------
[PID 1057] Scan type: ......... TCP
[PID 1057] IPs File: .......... yaptest-ips-0YZ4x
[PID 1057] Interface: ......... vmnet1
[PID 1057] Bandwidth limit: ... 1000000 bits/sec
[PID 1057] Source address: .... 172.16.16.1
[PID 1057] RTT: ............... 0.950000 secs
[PID 1057] Retries: ........... 2
[PID 1057] Max Memory: ........ 150000 KBytes (Scanning up to 36 hosts at once)
[PID 1057] Port file: ......... all
[PID 1057] Port count: ........ 65535
[PID 1057] Show closed ports .. off
[PID 1057]
[PID 1057] ####### Scan of first 7 hosts started at 2007-07-28 13:04:50 +0000 #########
[PID 1057] 172.16.16.5:7        echo    Len=44 TTL=128 IPID=19039 FLAGS=SA______ SEQ=0xfca78ae9 ACK=0xf37388f7 WIN=64240
[PID 1057] 172.16.16.5:9        discard Len=44 TTL=128 IPID=19040 FLAGS=SA______ SEQ=0xfca860e6 ACK=0x76bb1a85 WIN=64240
[PID 1057] 172.16.16.7:7        echo    Len=44 TTL=255 IPID=47493 FLAGS=SA______ SEQ=0x0c7efba5 ACK=0x6058dc5d WIN=9112
...</pre>
<p>Again the output from yapscan will be automatically parsed (as of 0.0.7) and a list of open ports saved in the backend database.  This information is used later by other tools.  If you want to parse the output of an old yapscan manually you can use yaptest-parse-yapscan.pl.</p>
<p>Use the yaptest-ports.pl command to list the open ports in the backend database.  Output is tab-delimited for each cutting and grepping:</p>
<pre># yaptest-ports.pl query
vlan1  172.16.16.4     21      TCP
vlan1  172.16.16.4     25      TCP
vlan1  172.16.16.4     80      TCP
vlan1  172.16.16.4     119     TCP
vlan1  172.16.16.4     135     TCP
...</pre>
<p>The help message describes the various other type of queries you can make about open ports:</p>
<pre>yaptest-ports.pl

**************************************************************************
*                       Starting yaptest-ports.pl                        *
*  [ Using yaptest v0.0.7 - http://pentestmonkey.net/projects/yaptest ]  *
**************************************************************************

Usage: yaptest-ports.pl query [ options ]
Lists open ports found

Options are:
        -i ip          IP to search for
        -p port        Port to search for
        -t test_area   Test area to search for
        -r string      String to search for in 'rpcinfo -p' output (e.g. 'sadmind')
        -s string      String to search for in nmap service string (e.g. 'http')
        -v string      String to search for in nmap version string (e.g. 'Apache')</pre>
<p>Here are some examples:</p>
<pre>$ yaptest-ports.pl query -p 23 | cut -f 2 &gt; telnet-ips.txt</pre>
<pre>$ yaptest-ports.pl query -r sadmind | cut -f 2 &gt; sadmind-ips.txt</pre>
<p>Other commands you can run that will operate on all hosts include:</p>
<ul>
<li>yaptest-nmap-udp.pl (parse with yaptest-parse-nmap-xml.pl)</li>
<li>yaptest-onesixtyone.pl (parse with yaptest-parse-onesixtyone.pl)</li>
<li>yaptest-nbtscan.pl</li>
<li>yaptest-yapscan-icmp.pl (parse with yaptest-parse-yapscan-icmp.pl)</li>
</ul>
<h3>Testing some of the open ports</h3>
<p>Now we&#8217;ll run nmap on all the open TCP ports so it can do it&#8217;s banner grabbing and service-identification magic.  In this next example, up to 5 nmap processes are run in parallel.  The output of these processes gets intermingled, but the individual output files will still make sense.</p>
<p><span style="font-size: xx-small;"># yaptest-nmap-tcp.pl [PID 22469] &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212; Yaptest Running Command &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;- [PID 22469] Command &#8230;&#8230;&#8230;&#8230;. nmap -sS -P0 -n -O -v -A -oA nmap-tcp-10.10.0.243.out.22467 -p 111,21,22,23,25,32774,32775,32776,32777,32778,32780,32782,32784,32785,32786,32790, 32791,32792,32793,32794,32861,4045,513,514,587,5987,5988,7100,79,80,898,9010 10.10.0.243 [PID 22469] Output File &#8230;&#8230;&#8230; nmap-tcp-10.10.0.243.out.3 [PID 22469] &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211; [PID 22471] &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212; Yaptest Running Command &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;- [PID 22471] Command &#8230;&#8230;&#8230;&#8230;. nmap -sS -P0 -n -O -v -A -oA nmap-tcp-10.10.0.127.out.22467 -p 443 10.10.0.127 [PID 22471] Output File &#8230;&#8230;&#8230; nmap-tcp-10.10.0.127.out.2 [PID 22471] &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211; [PID 22471] [PID 22471] Starting Nmap 4.20 ( http://insecure.org ) at 2007-06-30 21:27 BST [PID 22471] Initiating ARP Ping Scan at 21:27 &#8230; </span></p>
<p>The output can be parsed into the database as follows (you still need to do this manually as of v0.0.7):</p>
<pre>$ yaptest-parse-nmap-xml.pl *.xml
Processing nmap-tcp-172.16.16.10.out.31962.xml...
IP: 172.16.16.10
PARSED: 172.16.16.10: echo (7/tcp) open
PARSED: 172.16.16.10: discard (9/tcp) open
PARSED: 172.16.16.10: daytime (13/tcp) open Sun Solaris daytime
PARSED: 172.16.16.10: chargen (19/tcp) open
PARSED: 172.16.16.10: ftp (21/tcp) open Solaris ftpd
PARSED: 172.16.16.10: telnet (23/tcp) open BSD-derived telnetd
PARSED: 172.16.16.10: smtp (25/tcp) open Sendmail 8.12.11+Sun/8.12.11
PARSED: 172.16.16.10: time (37/tcp) open   (32 bits)</pre>
<p>Now we run nikto on all of the HTTP and HTTPS services identified by nmap:</p>
<pre>$ yaptest-nikto.pl
Targets for this test are:
172.16.16.4     80
172.16.16.4     4066
172.16.16.5     80
172.16.16.5     9170
172.16.16.6     80
172.16.16.6     7140
172.16.16.6     8099
172.16.16.9     898
172.16.16.9     5988
Total records: 9

[PID 1130] ------------------ Yaptest "run_test" executing command ... ---------------------
[PID 1130] Command ............. nikto.pl -nolookup 127.0.0.1 -h 172.16.16.4 -p 80
[PID 1130] Output File ......... nikto.pl-172.16.16.4-80.out
[PID 1130] Inactivity Timeout .. 300
[PID 1130] ---------------------------------------------------------------------------------
...</pre>
<p>Other simple tests based on open ports include:</p>
<ul>
<li>yaptest-rpcinfo.pl</li>
<li>yaptest-dcetest.pl</li>
<li>yaptest-ntp.pl</li>
<li>yaptest-telnet-fuser.pl</li>
<li>yaptest-nxscan.pl</li>
</ul>
<p>Check out yaptest-db-ips.sh for a more complete list.  This will run pretty much all the tools yaptest support in the appropriate order.</p>
<h3>Testing some RPC services</h3>
<p>You can parse the output of rpcinfo like this:</p>
<pre>$ yaptest-parse-rpcinfo.pl rpcinfo-*</pre>
<p>The following tests are based on the output of rpcinfo, so yaptest-rcpinfo.pl must be run first:</p>
<ul>
<li>yaptest-rusers.pl</li>
<li>yaptest-rup.pl</li>
<li>yaptest-nfs.pl</li>
</ul>
<h3>Password guessing</h3>
<p>The following scripts can be used to kick off password guessing against any of the supported protocols.  You&#8217;ll need to tell yaptest where your dictionary files are kept first.  The help message wille explain how to do this.</p>
<ul>
<li>yaptest-password-guess-ftp.pl</li>
<li>yaptest-password-guess-mssql.pl</li>
<li>yaptest-password-guess-rlogin.pl</li>
<li>yaptest-password-guess-smb.pl</li>
<li>yaptest-password-guess-ssh.pl</li>
</ul>
<h3>Other Yaptest-related stuff</h3>
<p>If you want to run nessus, yaptest can give a list of ports that are open on the network (both UDP and TCP).  The format is suitable for copy and pasting into most nessus clients:</p>
<pre>$ yaptest-get-all-open-ports.pl
21,22,23,25,79,80,111,443,513,514,587,898,4045,5987,5988,7100,9010,32774,32775,32776,32777,32778,32780,32782,32784, 32785,32786,32790,32791,32792,32793,32794,32861</pre>
<h3>One script to run it all</h3>
<p>After the database has been populated with the IPs you want to test, the following shell script can be used to start off most of the supported tests on targets in the database:</p>
<p># yaptest-db-ips.sh</p>
<p>Yaptest can also keep track of value usernames, password and password hashes that you&#8217;ve collected.  See <a href="../projects/yaptest/yaptest-password-management">Managing Login Credentials with Yaptest</a> for more information.</p>
<p>&nbsp;</p>
<pre></pre>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/using/yaptest-user-guide/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
