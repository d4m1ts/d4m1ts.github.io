<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Overview &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/category/yaptest/overview/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Sat, 20 Aug 2011 16:07:15 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>Yaptest FAQs</title>
		<link>https://pentestmonkey.net/yaptest/overview/yaptest-faq</link>
					<comments>https://pentestmonkey.net/yaptest/overview/yaptest-faq#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 30 Jun 2007 17:33:38 +0000</pubDate>
				<category><![CDATA[Overview]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=102</guid>

					<description><![CDATA[Some questions you may be pondering while reading about the Yaptest project&#8230; Is Yaptest designed to compete with Nessus? No.Â  Nessus is a comprehensive vulnerability scanner and reporting tool.Â  Yaptest doesn&#8217;t aim to test for the vast number of vulnerabilities that Nessus can test for.Â  Yaptest primarily a means by which pentesters can automatically run [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some questions you may be pondering while reading about the Yaptest project&#8230;<br />
<span id="more-102"></span></p>
<h3>Is Yaptest designed to compete with Nessus?</h3>
<p>No.Â  Nessus is a comprehensive vulnerability scanner and reporting tool.Â  Yaptest doesn&#8217;t aim to test for the vast number of vulnerabilities that Nessus can test for.Â  Yaptest primarily a means by which pentesters can automatically run their tools of choice and save the output in predictably named files (without learning NASL).</p>
<h3><strong>Do I need to know PERL?</strong></h3>
<p>For the most part, no.Â  90% of the command line tools you&#8217;d typically use during a pentest can be easily run from yaptest with little or no knowledge of PERL.Â  Simply copy one of the existing examples that use the &#8220;run_test&#8221; API.</p>
<p>If you need to do something more complicated, then you&#8217;ll need to know some PERL.Â  Parsing data and feeding it back into the database isn&#8217;t always necessary, but doing this would certainly require some familiarity with PERL.Â  As aluded to above, though you won&#8217;t need to do this often.</p>
<h3><strong>I&#8217;ve used yaptest and added support for more tools.Â  Can I contribute back?</strong></h3>
<p>Yes.Â  Please email me at pentestmonkeyAATTpentestmonkey.net.Â  I&#8217;ll credit you in the release notes for anything I role into the main yaptest distribution.</p>
<p>By contributing back, you&#8217;re minimising the monkey-work for everyone.Â  This is a primary goal of yaptest.</p>
<h3>Can I use a different portscanner to the ones currently supported by yaptest?</h3>
<p>Yes.Â  Yaptest is just a framework that automatically runs other tools with appropriate arguments.Â  Simply modify the script that runs yapscan so that your scanner of choice is run instead.Â  You&#8217;ll also need to write a parser to write the results into the database.</p>
<h3><strong>I interrupted yaptest.Â  Can I get it to resume testing from where is was stopped?</strong></h3>
<p>No.Â  This would be great feature and it may be included in future versions of yaptest.Â  It hasn&#8217;t been implemented yet, though.Â  Yaptest v0.0.3 includes some schema changes to support restarting of interrupted tests, however none of this works yet. <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h3><strong>If I rerun yaptest, will it overwrite all the files from the last time it ran?</strong></h3>
<p>No.Â  The underlying APIs which runs external tools check if output files exist before writing to them.Â  If the desired file already exists a different filename is used (ending in .1, .2 or whatever the next unused filename is).</p>
<h3><strong>I added support for a new tool, I don&#8217;t like the name of the output file that yaptest chose.Â  Can I change it?</strong></h3>
<p>Yes.Â  The &#8220;output_file&#8221; option to the &#8220;run_test&#8221; API allows you to specify the name of the output file.Â  You can include certain fields such as IP address and port of the host tested too if you want.</p>
<h3><strong>I&#8217;ve got a tool that I want yaptest to run, but the sometimes it hangs causing yaptest to hang.Â  What can I do?</strong></h3>
<p>Yaptest includes a timeout feature.Â  You can set a maximum runtime for each tool after which yaptest will terminate it.Â  Alternatively, you can set a maximum <em>inactivity timeout</em>.Â  This measures the time passed since the tool outputted a line of text.Â  These features can be used terminate external tools that you feel are taking too long.</p>
<p>The &#8220;timeout&#8221; or &#8220;inactivity_timeout&#8221; options of the &#8220;run_test&#8221; API are what you need.</p>
<h3><strong>Some of the external tools I want to run are quite slow, can yaptest do anything to speed them up?</strong></h3>
<p>In some instances, yes.Â  Yaptest provides an API to run several instances of a tool in parallel.Â  For example, if you were testing 100 hosts over the Internet and wanted to traceroute to each of them, it would take a long time.Â  You could configure yaptest to run, say, 20 instances of traceroute in parallel which would speed up this task.</p>
<p>The &#8220;parallel_processes&#8221; option of the &#8220;run_test&#8221; API is what you need.</p>
<h3>I ran a query for hosts running cmsd, but got no results!</h3>
<p>You probably ran something like this:</p>
<p>$ yaptest-ports.pl query -r cmsd</p>
<p>The query is correct.Â  The problem may be that the &#8220;rpcinfo&#8221; tool doesn&#8217;t know the RPC program number for cmsd, so doesn&#8217;t include the string &#8220;cmsd&#8221; in its output.Â  The solution is some: copy nmap&#8217;s rpc file over the top of /etc/rpc:</p>
<p># cp /etc/rpc /etc/rpc.old<br />
# cp /usr/share/nmap/nmap-rpc /etc/rpc</p>
<p>Now rerun the rpcinfo test, parse the output and run the query again:</p>
<p>$ yaptest-rpcinfo.pl<br />
$ yaptest-parse-rpcinfo.pl rpcinfo-*<br />
$ yaptest-ports.pl query -r cmsd</p>
<h3><strong>Can yaptest be used for Web Application Assessments?</strong></h3>
<p>Not really.Â  What yaptest currently does well is to lauch tools that require IP address and ports passed as arguments. Â  Maybe future versions will understand directories, CGI script and parameters, but this is currently not planned.</p>
<h3><strong>Sometimes external tools run by yaptest go wrong, produce too much output and fill up the disk.Â  Can yaptest prevent this?</strong></h3>
<p>Yes.Â  Yaptest can limit the number of lines an external script is allowed to produce.Â  If this limit is exceeded, yaptest will terminate the script.Â  This can be useful for example of you&#8217;re using a password-guesser against a TCP port which has been closed for some reason.Â  Your password-guesser might repeatedly output the message &#8220;Connection refused.Â  Retrying&#8230;&#8221; or similar.</p>
<p>The &#8220;max_lines&#8221; option of the &#8220;run_test&#8221; API is what you need.</p>
<h3><strong>Can Yaptest be used to co-ordinate password guessing?</strong></h3>
<p>Partially.Â  Management of usernames, passwords, IP address, ports and protocols used for password guessing is a priority for yaptest.Â  Currenlty support is limited to automatically starting your password-guesser of choice each time a particular port / protocol is encountered.Â  Guessing can currently only use predefined password lists, and results aren&#8217;t parsed an put back into the database.</p>
<p>As of v0.0.3, yaptest can parse passwd, shadow and pwdump2-style files and you can query the resulting database from the command line.Â Â  More information available <a href="../project/yaptest/yaptest-password-management">here</a> .</p>
<p>Yaptest will be updated to make better use fo the credentials datase in future.</p>
<h3><strong>Will Yaptest produce a report of all vulnerabilities found?</strong></h3>
<p>Not yet.Â  The main goal of yaptest is make it easier for pentesters to run their favourite tools against the appropriate targets.Â  This makes testing faster, records results in predictable filennames and gives you more time concentrate on (interesting) manual testing.</p>
<p>Once this main goal of yaptest has been completed some effort will be made to summarise results found.Â  Currently reporting is limited to being able to query ports open an IP address or IP addresses with certain ports open.Â  There are also some easy-to-use views available in the database backend.</p>
<h3><strong>Do you plan to charge for yaptest?</strong></h3>
<p>No.Â  Yaptest is released under the <a href="http://www.gnu.org/licenses/gpl-2.0.txt">GPLv2</a> with the caveat that it is used for legal purposes only.Â  It is therefore free to use provided you comply with license.</p>
<p><strong>Are the APIs documented?</strong></p>
<p>Documented might be too strong a word.Â  There are lots of examples, though! <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/overview/yaptest-faq/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Yaptest Overview</title>
		<link>https://pentestmonkey.net/yaptest/overview/yaptest-overview</link>
					<comments>https://pentestmonkey.net/yaptest/overview/yaptest-overview#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 26 Jun 2007 19:13:39 +0000</pubDate>
				<category><![CDATA[Overview]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=101</guid>

					<description><![CDATA[Yet Another PenTEST&#8230; [The download / install page is over here if that&#8217;s what you&#8217;re looking for]. At times pentesting is one of the most fun jobs around.Â  Other times, though it&#8217;s dull.Â  When you&#8217;re having to manually check for the same issues on the next host and the next host and the next&#8230; testing [&#8230;]]]></description>
										<content:encoded><![CDATA[<h3>Yet Another PenTEST&#8230;</h3>
<p>[The download / install page is <a href="http://pentestmonkey.net/projects/yaptest/yaptest-installation/">over here</a> if that&#8217;s what you&#8217;re looking for].</p>
<p>At times pentesting is one of the most fun jobs around.Â  Other times, though it&#8217;s dull.Â  When you&#8217;re having to manually check for the same issues on the next host and the next host and the next&#8230; testing can get kinda tedious.</p>
<p>Vulnerability scanners (<a href="http://www.nessus.org/">nessus</a> and the like) have their place, but no scanner is going to test for everything that you&#8217;re interested in. Â  Yaptest aims to make it easy for a pentester to automate parts of testing on the fly.Â  This is particularly useful when testing very large networks.Â  Below are some examples of tasks which would be easy to automate using yaptest:</p>
<ul>
<li>Run <a href="http://www.cirt.net/code/nikto.shtml">nikto</a> on anything nmap thinks is an HTTP service</li>
<li>Run <a href="http://thc.org/thc-hydra/">hydra</a> on every host with TCP port 21 open</li>
<li>Attempt upload a file to any TFTP servers found</li>
<li>Run <a href="http://www.phreedom.org/solar/onesixtyone/">onesixtyone</a> on all hosts that are up</li>
<li>Try <a href="http://www.metasploit.com/">metasploit</a>&#8216;s solaris_kcms_readfile exploit against any hosts running kcmsd</li>
</ul>
<p>Yaptest is the glue between your favourite tools and the knowledge base gathered during your pentest.Â  It handles all the mundane stuff that can easily be automated and leaves you free to get on with <span style="text-decoration: line-through;">owning boxes</span> demonstrating risk using techniques that yaptest doesn&#8217;t know about yet.</p>
<p><span id="more-101"></span></p>
<h3>Platform</h3>
<p>Initially the database backend will be <a href="http://www.postgresql.org/">PostgreSQL</a> with the APi written in PERL.Â  Linux will be the primary development platform.</p>
<p>However, <a href="http://www.mysql.com/">MySQL</a> support might be an option later on.Â  It should also be possible to get yaptest running on any platform supporting Postgres and PERL &#8211; including Windows.Â  This project is in its early stages, though and will focus on Linux initially.</p>
<p>Note that if you&#8217;re running more than OS (e.g. via <a href="http://www.vmware.com/">VMWare</a>), each of your testing platforms will (eventually) be able to share a single database backend.</p>
<h3><strong>Typical Usage</strong></h3>
<p>Conceptually, pentesting using yapscan could proceed as follows:</p>
<pre>$ yaptest-create-new-test.pl abc_co vlan1</pre>
<pre>$ yaptest-add-some-hosts.pl --method=arpscan-local-network</pre>
<pre>$ yaptest-fast-portscan-all-hosts.pl</pre>
<pre>$ yaptest-nmap-services-scan-all-open-ports.pl</pre>
<pre>$ yaptest-nikto-all-http-ports.pl</pre>
<p>Each of the yaptest scripts would read from / write to the backend database, but call on other programs (nmap, nikto, <a href="http://www.nta-monitor.com/tools/arp-scan/">arp-scan</a>, etc.) to do the actual scanning work.Â  A log of the output from each tool would be stored in files incase it was needed later.</p>
<h3>Extending Yaptest on the fly</h3>
<p>At this point in our ficticious test, the pentester notices that nmap has identified a large number of LDAP services running on the network.Â  Some of these are running on strange ports.Â  After a bit of maual testing he decides that he wants to run the following command on each service:</p>
<pre>ldapsearch -h IP -p PORT -s base</pre>
<p>He copies a suitable yaptest template script and comes up with something like:</p>
<pre>#!/usr/bin/perl -w
use strict;
use yaptest;

my $y = yaptest-&gt;new();
$y-&gt;run_test(
Â Â Â Â Â Â Â  command =&gt; 'ldapsearch -h ::IP:: -p ::PORT:: -s base',
Â Â Â Â Â Â Â  filterÂ  =&gt; { port_info =&gt; "nmap_service_name = ldap" },
);</pre>
<p>Yaptest will then be able to gather LDAP data for this any future test.</p>
<p>Sometimes you need to run a test which might hang indefinitely.Â  The following example shows how to set a timeout for the command (in seconds), so that one failed command doesn&#8217;t prevent yaptest from running.Â  In this example we also run tests of up to 5 hosts concurrently and changes the name of the output file to something more meaningful:</p>
<pre>#!/usr/bin/perl -w
use strict;
use yaptest;

my $y = yaptest-&gt;new();
$y-&gt;run_test(
Â Â Â Â Â Â Â  command =&gt; 'telnet -l -fbin ::IP::',
Â Â Â Â Â Â Â  filterÂ  =&gt; { port =&gt; 23 },
Â Â Â Â Â Â Â  timeout =&gt; 10,
Â Â Â Â Â Â Â  parallel_processes =&gt; 5,
Â Â Â Â Â Â Â  output_file =&gt; 'telnet-fuser-bin-::IP::.out'
);</pre>
<h3>More Information about Yaptest</h3>
<p>Also check out the other pages on the <a href="../projects/yaptest">yaptest</a> project page.</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/yaptest/overview/yaptest-overview/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
