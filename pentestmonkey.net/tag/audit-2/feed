<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>audit &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/tag/audit-2/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Wed, 25 Jan 2012 21:11:34 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>windows-privesc-check</title>
		<link>https://pentestmonkey.net/tools/windows-privesc-check</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 20 Dec 2011 06:04:27 +0000</pubDate>
				<category><![CDATA[Audit]]></category>
		<category><![CDATA[Tools]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[windows]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=541</guid>

					<description><![CDATA[A long time ago, I started writing a tool to look for local privilegeÂ escalationÂ vectorsÂ on Windows systems &#8211; e.g. weak permissions on files, directories, service registy keys. Â I never quite got round to finishing it, but the project could still be useful to pentesters and auditors in its current part-finished state. I&#8217;d suggest giving it a [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>A long time ago, I started writing a tool to look for <a href="http://code.google.com/p/windows-privesc-check/wiki/DesignGoals">local privilegeÂ escalationÂ vectors</a>Â on Windows systems &#8211; e.g. weak permissions on files, directories, service registy keys. Â I never quite got round to finishing it, but the project could still be useful to pentesters and auditors in its current part-finished state.</p>
<p>I&#8217;d suggest giving it a try next time you do a security audit with local administrator rights, or next time you get a non-admin logon to a Windows system during a pentest. Â It was designed to be useful for both.</p>
<p><a href="http://code.google.com/p/windows-privesc-check/source/browse/#svn%2Ftrunk">Trunk</a> contains the best all-round version. It checks some file, directory, registry and service permissions (among other things). Â Reports are in HTML.</p>
<p>The newer <a href="http://code.google.com/p/windows-privesc-check/source/browse/#svn%2Fbranches%2Fwpc-2.0">wpc-2.0 branch</a> does a better job at auditing Windows services &#8211; but does little else. Â Reports are in text only.</p>
<p>You only need to download the .exe file. Full source code is available too, though. Â It&#8217;s written in Python, uses <a href="http://sourceforge.net/projects/pywin32/files/pywin32/">pywin32</a>Â and &#8220;compiled&#8221; with <a href="http://www.pyinstaller.org/">pyinstaller</a>. You don&#8217;t need to download any dependencies (even python) unless you&#8217;re planning to <a href="http://code.google.com/p/windows-privesc-check/wiki/BuildingTheExecutable">build the .exe yourself</a>.</p>
<h2>FAQ</h2>
<h3>Why 2 versions?</h3>
<p>The code in &#8220;trunk&#8221; wasn&#8217;t object-oriented, making it harder to work with. Â I rewrote it to create the &#8220;wpc-2.0&#8221; branch. Much better &#8211; but alas, not finished.</p>
<h3>Can I see the source code?</h3>
<p>Yes, it&#8217;s on <a href="http://code.google.com/p/windows-privesc-check/source/browse/">google code</a> along with the executables.</p>
<h3>Will the program elevate privileges for me?</h3>
<p>No. Â It gives you a report describing any potential vulnerabilities it finds, but doesn&#8217;t have any autopwn features. Â This is mostly to reduce the risk of my codeÂ accidentallyÂ breaking your client&#8217;s system <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Exposing only part of C: over Terminal Services</title>
		<link>https://pentestmonkey.net/uncategorized/exposing-only-part-of-c-over-terminal-services</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 18 Sep 2011 16:12:40 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[terminalservices]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=473</guid>

					<description><![CDATA[Ken Johnson gives a useful tip on his blog about limiting access to your local drives when you make a Terminal Services connection. Â This is not new, but it&#8217;s useful enough to be worthÂ summarizing here. When I audit a system via Terminal Services, I usually map a drive to or from the system depending on [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><a href="http://www.nynaeve.net/?page_id=2">Ken Johnson</a> gives a useful tip on his blog about <a href="http://www.nynaeve.net/?p=176">limiting access to your local drives</a> when you make a Terminal Services connection. Â This is not new, but it&#8217;s useful enough to be worthÂ summarizing here.</p>
<p>When I audit a system via Terminal Services, I usually map a drive to or from the system depending on what the Firewall will allow.</p>
<p>Sometimes, it won&#8217;t allow either, though. Â In those cases one of the few options remaining is to configure mstsc.exe to expose a local drive on your client system to the server, accessing it via \\tsclient. Â But, you probably want to avoid exposing your whole C: drive.</p>
<p>Assuming that you didn&#8217;t have the foresight to create a dedicated partition for this purpose (I didn&#8217;t), you can easily simulate a drive using subst:</p>
<pre>subst s: c:\share</pre>
<p>Then you can configure mstsc.exe to only share your S: drive, leaving you less exposed.</p>
<p>Nice tip, Ken.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>The Ultimate Unix Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/rosetta-stone-for-unix</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 14 Aug 2011 16:13:23 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[unix]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=227</guid>

					<description><![CDATA[I just stumbled across Rosetta Stone for Unix, a brilliant page that lists how to do a large number of tasks in a variety of unix-like operating systems. Â I wish I&#8217;d found this years ago. It should be very handy for pentesting or auditing those less familiar unix flavours. I&#8217;ll definitely taking a copy with [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I just stumbled across <a href="http://bhami.com/rosetta.html">Rosetta Stone for Unix</a>, a brilliant page that lists how to do a large number of tasks in a variety of unix-like operating systems. Â I wish I&#8217;d found this years ago.</p>
<p>It should be very handy for pentesting or auditing those less familiar unix flavours. I&#8217;ll definitely taking a copy with me on future tests.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>unix-privesc-check Update: v1.4</title>
		<link>https://pentestmonkey.net/blog/unix-privesc-check-update-1-4</link>
					<comments>https://pentestmonkey.net/blog/unix-privesc-check-update-1-4#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 23 Nov 2008 20:14:24 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[unixprivesccheck]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=76</guid>

					<description><![CDATA[The next version of unix-privesc-check has just been released.Â  Download it here. This version checks the file permissions of SUID programs.Â  It should catch issue like the recent Ingres privesc where and SUID programs used a shared object file that could be modified by a non-root user.]]></description>
										<content:encoded><![CDATA[<p>The next version of <a href="http://pentestmonkey.net/tools/unix-privesc-check/">unix-privesc-check</a> has just been released.Â  Download it <a href="http://pentestmonkey.net/tools/unix-privesc-check/">here</a>.</p>
<p>This version checks the file permissions of SUID programs.Â  It should catch issue like the recent <a href="http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=733">Ingres privesc</a> where and SUID programs used a shared object file that could be modified by a non-root user.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/unix-privesc-check-update-1-4/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>unix-privesc-check Update: v1.3</title>
		<link>https://pentestmonkey.net/blog/unix-privesc-check-update-1-3</link>
					<comments>https://pentestmonkey.net/blog/unix-privesc-check-update-1-3#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 09 Nov 2008 16:19:42 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[unixprivesccheck]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=75</guid>

					<description><![CDATA[I just updated unix-privesc-check.Â  Download it here. This release fixes a couple of minor bugs in the reporting of cron-related issues and some problem while running under /bin/sh (as opposed to /bin/bash).]]></description>
										<content:encoded><![CDATA[<p>I just updated <a href="http://pentestmonkey.net/tools/unix-privesc-check/">unix-privesc-check</a>.Â  Download it <a href="http://pentestmonkey.net/tools/unix-privesc-check/">here</a>.</p>
<p>This release fixes a couple of minor bugs in the reporting of cron-related issues and some problem while running under /bin/sh (as opposed to /bin/bash).</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/unix-privesc-check-update-1-3/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>exploit-suggester Update: v0.2</title>
		<link>https://pentestmonkey.net/blog/exploit-suggester-update-0-2</link>
					<comments>https://pentestmonkey.net/blog/exploit-suggester-update-0-2#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 09 Nov 2008 15:41:59 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[exploitsuggester]]></category>
		<category><![CDATA[pentest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=74</guid>

					<description><![CDATA[I just released an important update to exploit-suggester.Â  Download it here. It seems that &#8220;showrev -p&#8221; sometimes lists multiple revisions for the same patch.Â  This caused exploit-suggester to return false-positives.]]></description>
										<content:encoded><![CDATA[<p>I just released an important update to <a href="http://pentestmonkey.net/tools/exploit-suggester/">exploit-suggester</a>.Â  Download it <a href="http://pentestmonkey.net/tools/exploit-suggester/">here</a>.</p>
<p>It seems that &#8220;showrev -p&#8221; sometimes lists multiple revisions for the same patch.Â  This caused exploit-suggester to return false-positives.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/exploit-suggester-update-0-2/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>unix-privesc-check</title>
		<link>https://pentestmonkey.net/tools/audit/unix-privesc-check</link>
					<comments>https://pentestmonkey.net/tools/audit/unix-privesc-check#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Fri, 01 Feb 2008 21:19:26 +0000</pubDate>
				<category><![CDATA[Audit]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[tool]]></category>
		<category><![CDATA[unixprivesccheck]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=109</guid>

					<description><![CDATA[Unix-privesc-checker is a script that runs on Unix systems (tested on Solaris 9, HPUX 11, Various Linuxes, FreeBSD 6.2).Â  It tries to find misconfigurations that could allow local unprivilged users to escalate privileges to other users or to access local apps (e.g. databases). It is written as a single shell script so it can be [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Unix-privesc-checker is a script that runs on Unix systems (tested on Solaris 9, HPUX 11, Various Linuxes, FreeBSD 6.2).Â  It tries to find misconfigurations that could allow local unprivilged users to escalate privileges to other users or to access local apps (e.g. databases).</p>
<p>It is written as a single shell script so it can be easily uploaded and run (as opposed to un-tarred, compiled and installed).Â  It can run either as a normal user or as root (obviously it does a better job when running as root because it can read more files).</p>
<p>&nbsp;</p>
<p><span id="more-109"></span></p>
<h2>Download</h2>
<p>unix-privesc-check v1.4 can be downloaded <a href="/tools/unix-privesc-check/unix-privesc-check-1.4.tar.gz">here</a>.Â  (Version 1.1 is <a href="/tools/unix-privesc-check/unix-privesc-check.gz">here</a> if you still need it).</p>
<p>Update: The <a href="http://code.google.com/p/unix-privesc-check/source/checkout">google code SVN</a> is more up to date.</p>
<h2>Usage</h2>
<p>The download is gzip&#8217;d, so gunzip it.Â  Upload it to the server you&#8217;re auditing / pentesting then just run it:</p>
<pre>$ ./unix-privesc-check &gt; output.txt</pre>
<p>The output&#8217;s a bit messy (it&#8217;s hard to be neat with shell scripts), so you&#8217;re probably best to save the output and search it for the word &#8216;WARNING&#8217;.Â  If you don&#8217;t see the word &#8216;WARNING&#8217; then the script didn&#8217;t find anything.Â  Example:</p>
<pre>$ ./unix-privesc-check</pre>
<pre>Starting unix-privesc-check v1.0 ( http://pentestmonkey.net/tools/unix-privesc-check )

This script checks file permissions and other settings that could allow
local users to escalate privileges.

Use of this script is only permitted on systems which you have been granted
legal permission to perform a security assessment of.Â  Apart from this
condition the GPL v2 applies.

Search the output below for the word 'WARNING'.Â  If you don't see it then
this script didn't find any problems.

Assuming the OS is: linux

############################################
Checking if external authentication is allowed in /etc/passwd
############################################
No +:... line found in /etc/passwd

############################################
Checking nsswitch.conf for addition authentication methods
############################################
Neither LDAP nor NIS are used for authentication</pre>
<pre>... lots more output ...</pre>
<h2>What&#8217;s the Intended usage of user-privesc-checker?</h2>
<p>It&#8217;s intended to be run by security auditors and pentetration testers against systems they have been engaged to assess, and also by system admnisitrators who want to check for &#8220;obvious&#8221; misconfigurations.Â  It can even be run as a cron job so you can check regularly for misconfigurations that might be introduced.</p>
<p>I wanted to write something that was at least partially useful to pentetration testers when they gained access to a low-privilege account and wanted to escalate privileges.Â  There are lots of things that pentesters will check in this situation and one of the most tedious to check is weak file permissions &#8211; this of often one of the most fruitful, though, so there&#8217;s no avoiding it.</p>
<p>Disclaimer: Running this script alone isn&#8217;t a substitute for proper audit (e.g. following one of the NSA&#8217;s excellent <a href="http://www.nsa.gov/snac/downloads_all.cfm">configuration guides</a>).Â  There are lots of possibilities for escalation that are just too hard to audit using a script.Â  This script is intended to be a shortcut, not a replacement for a proper audit.Â  See the &#8220;Limitations&#8221; section below for lots of examples of areas not covered by this script.</p>
<h2>So this is a Unix Audit Script?</h2>
<p>Not in the traditional sense.Â  &#8220;Unix Audit&#8221; means different things to different people.Â  I understand it to mean checking a whole array of configuration settings including:</p>
<ul>
<li>Security patches (i.e. that they&#8217;ve been applied)</li>
<li>Cracking passwords to check for weak ones</li>
<li>IP Stack configuration (no unnecessary IPv6, no IP Forwarding, etc.)</li>
<li>Weak file permissions (reading sensitive data, modifiying sensitive files)</li>
<li>Configuration of local applications (reviewing sshd_config, httpd.conf)</li>
<li>Other best-practise stuff (remote logging, no insecure protocols, paranoid mount options)</li>
</ul>
<p>So, no it&#8217;s not an audit script in this sense.Â  It doesn&#8217;t set out to do all these things.Â  It checks for a subset of these which relate directly to privilege escalation.Â  It focusses mainly on generic techniques: common misconfigurations and weak file permissions.Â  It doesn&#8217;t check for missing patches, however this is difficult to check &#8220;on-box&#8221; using a single shell script.Â  Checkout <a href="http://pentestmonkey.net/tools/exploit-suggester/">exploit-suggester</a> if you&#8217;re interested in doing this &#8220;off-box&#8221;..</p>
<h2>Why Another Auditing Script?</h2>
<p>There are lots of scripts out there that will perform a local security audit for you (<a href="http://www.nongnu.org/tiger/">Tiger</a> and <a href="http://usat.sourceforge.net/">LSAT</a> are good examples).Â  Some hoover data so you can analyse it offline, others will analyse it too and present you a nice report.Â  These have their place and I&#8217;ll continue to use them.Â  However&#8230;</p>
<p>I haven&#8217;t found one that gives me a quick list of obvious attack vectors which is written as a single shell script (I hate shell scripts too, but it I wanted a script that would run on virtually any Unix system).</p>
<p>I therefore decided to write unix-privesc-audit to focus on finding misconfigurations that can actually be exploited as opposed to finding all the usual best-practise stuff.</p>
<h2>Some Vulnerabilities Introduced Through Weak File Permissions</h2>
<p>Below is a list of the checks performed by the script.Â  Note that whenever it checks file permissions, it also checks the permissions on the parent directories.Â  When it finds a group-writable file or directory it only flags an issue if that group has more than one non-root member.</p>
<h3>Writable Home Directories</h3>
<p>If you can write to someone&#8217;s home directory, you could add a .rhosts file or .ssh/authorized_keys file and log in right away; or alter one of the login scripts (e.g. .bash_profile) and have them create an SUID shell when they log in.Â  There are lots of problems if home directories are writable.</p>
<p>The script flags a warning if any home directories are writable by anyone other than the owner or root.</p>
<h3>Readable /etc/shadow</h3>
<p>Not so common these days, but could allow you to read password hashes, crack them then log in as other users.</p>
<p>This script checks if the shadow file is readable by non-root users.Â  If it can read the shadow file, it also performs some other checks (see below).</p>
<h3>Weak Permissions On Cron Jobs</h3>
<p>Cron jobs are normally listed in /etc/crontab and /var/spool/cron/crontabs/.Â  Cron jobs can be run by any user.Â  This script check if cron jobs run programs that can be modified by users other than root and the user the job runs as.</p>
<h3>Writable Configuration Files</h3>
<p>Programs that are run as root are listed in lots of files (/etc/init.d/*, /etc/inetd.conf, /etc/xinetd.d/*, etc.)Â  If any of these files are writable by non-root users, this script will flag a warning.</p>
<h3>Writable Device Files</h3>
<p>This script checks that device files corresponding to currently mounted file systems (e.g. /dev/sda1) aren&#8217;t writable.Â  I doubt this happens very often to be honest, but it doesn&#8217;t hurt to check.</p>
<h3>Readable Files In Home Directories</h3>
<p>There can be lots of interesting things in home directories, but this script checks for files that contain passwords (.netrc, .my.cnf) and ACLs (.rhosts, .ssh/*).Â  If readable these can provide a way access local applications or other local user accounts.</p>
<h3>Running Processes Correspond To Writable Programs</h3>
<p>This script does a &#8220;ps&#8221; listing, attempts to determine the full path of each program running and check if it can be modified by anyone other than the user it&#8217;s running as and root.</p>
<h2>Other Stuff Not Related With File Permissions</h2>
<p>The script also performs a couple of other checks related to privilege escalation, but not related to file permissions:</p>
<h3>Sudo Configuration</h3>
<p>Sudo is one of the most obvious ways to escalate privileges if it&#8217;s enabled.Â  Sometimes only certain commands can be run, sometimes any command can be run.</p>
<p>If /etc/sudoers is readable, this script checks if it&#8217;s being used, lists which users can use sudo and which ones can use it without a password.</p>
<h3>Accounts with no Password</h3>
<p>If /etc/shadow is readable, the script lists any accounts without passwords.</p>
<h2>How useful is unix-privesc-check in practise?</h2>
<p>It depends largely on the base OS and the amount of configuration an administrator has done (more configuration = more chance of mistakes).Â  If you run it against a fairly modern OS (e.g. Linux, Solaris 9/10) that hasn&#8217;t had much configuration done, then you&#8217;re not going to find much.Â  These OSs have faily secure file permissions by default.Â  However, if you run it against Solaris 8 or against a system that has been running for a couple of years and had a lot of configuration done or 3rd party apps installed, then you&#8217;ll probably find quite a bit.</p>
<p>I&#8217;m ashamed to say that I found a couple of serious misconfigurations in my own Linux box when I ran this script!</p>
<h2>Limitations</h2>
<p>Currently only the stuff above is checked.Â  None of the other &#8220;traditional audit&#8221; stuff is checked.Â  There are also some obvious privilege escalation tactics regarding file permissions which are too hard to script up (for me at least).Â  This list acts as a list of limitations / inspiration for manual testing / working TODO list:</p>
<ul>
<li>Actually reading shell scripts, finding that they call then checking the file permissions on called programs (e.g. seeing /etc/init.d scripts call anything in an insecure way, checking shell scripts that are run a login time)</li>
<li>Checking the PATHs for users then looking for insecure programs within those directories</li>
<li>Polling &#8220;ps&#8221; to identify processes that don&#8217;t run very often and checking that the program being run has secure file permissions.</li>
<li>Checking for non-standard programs with the SUID bit set</li>
<li>Checking arguments of currently running processes (e.g. if a process runs as root and had &#8220;/dir/somefile.conf&#8221; as an argument it would be worth checking the perms on that file).</li>
<li>It doesn&#8217;t parse shell script names, perl script names or any other kind of script name from the process listing.Â  It just checks /bin/sh and /usr/bin/perl normally. Â  This is a pretty big limitation actually at the moment.Â  It a process is called &#8220;/bin/sh /tmp/dodgy-n-writable.sh&#8221; it&#8217;s probably worth investigating).</li>
<li>It doesn&#8217;t check the permissions of shared object files for each running process.Â  This info is availalable in /proc/pid/maps, /proc/pid/smaps on Linux at least, so this feature may follow shorty.</li>
<li>It doesn&#8217;t check the permissions on open files.Â  Again this info is available on Linux at least in /proc/pid/fd/, so this feature may follow shortly.</li>
<li>Doesn&#8217;t report /etc/hosts.equiv trust relationships.</li>
<li>No checks for NFS mounts / exports.Â Â  These are a common source of insecurity.</li>
<li>Doesn&#8217;t check stuff run from inittab.</li>
</ul>
<p>Yeah, lots and lots of limitations, so make sure you do a manual audit too. <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /> I hope this script saves you some time, though.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/tools/audit/unix-privesc-check/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
