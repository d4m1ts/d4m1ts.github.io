<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>findsockshell &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/tag/findsockshell/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Sat, 20 Aug 2011 16:00:31 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>php-findsock-shell</title>
		<link>https://pentestmonkey.net/tools/web-shells/php-findsock-shell</link>
					<comments>https://pentestmonkey.net/tools/web-shells/php-findsock-shell#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 02 Sep 2007 15:26:26 +0000</pubDate>
				<category><![CDATA[Web Shells]]></category>
		<category><![CDATA[findsockshell]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[tool]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=112</guid>

					<description><![CDATA[This tool is designed for those situations during a pentest where you have upload access to a webserver that&#8217;s running PHP, you want an interactive shell, but the Firewall is doing proper egress and ingress filtering &#8211; so bindshells and reverse shells won&#8217;t work. Upload php-findsock-shell to somewhere in the web root then run it [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>This tool is designed for those situations during a pentest where you have upload access to a webserver that&#8217;s running PHP, you want an interactive shell, but the Firewall is doing proper egress and ingress filtering &#8211; so bindshells and reverse shells won&#8217;t work.</p>
<p>Upload php-findsock-shell to somewhere in the web root then run it by accessing the appropriate URL via netcat (as opposed to via a browser).Â  Instead of getting a normal HTTP response back, your HTTP session becomes an interactive shell session:</p>
<pre>$ nc -v target 80
target [10.0.0.1] 80 (http) open
GET /php-findsock-shell.php HTTP/1.0

sh-3.2$ id
uid=80(apache) gid=80(apache) groups=80(apache)
sh-3.2$
... you now have an interactive shell ...</pre>
<p>This will be a proper interactive shell in which you can run interective programs like telnet, ssh and su.Â  It differs from web form-based shells which allow you to send a single command, then return you the output.</p>
<p><span id="more-112"></span></p>
<h2>Download</h2>
<p><a href="http://pentestmonkey.net/tools/php-findsock-shell/php-findsock-shell-1.0.tar.gz">php-findsock-shell-1.0.tar.gz</a></p>
<p>MD5sum: aecfea69fc6b482709f339756d6b419b</p>
<p>SHA1sum: 96e1a89cb15dcb64d81a13c2211faf98e80d3518</p>
<h2>Preamble</h2>
<p>I recently read about some (old) <a href="http://www.securityfocus.com/archive/1/archive/1/449298/100/0/threaded">vulnerabilities</a> stemming from the fact that PHP scripts inherit some of Apache&#8217;s file descriptors and that programs run via PHP (e.g. via the &#8220;system&#8221; function) also inherit these file descriptors.Â  Vulnerabilities include:</p>
<ul>
<li>Overwriting apache log file &#8211; even though it&#8217;s owned by root; and</li>
<li>Hijacking apache&#8217;s listening TCP port, then killing apache so you can respond to incoming web requests</li>
</ul>
<p>This whole &#8220;inheriting file handles&#8221; class of vulnerability seems like an interesting area &#8211; albeit not a new area.</p>
<p>It occurred to me that if PHP could directly access the file handle corresponding to the TCP connection between the user&#8217;s browser and the web server, PHP might be able to attach a shell (/bin/sh) to this connection.Â  You&#8217;d then have an interactive shell which would pass straight through firewalls doing simple ingress and egree filtering.</p>
<p>Alas, I couldn&#8217;t figure out how to implement this idea purely in PHP.Â  However, with the help of a C program it&#8217;s possible to demonstrate that the idea works.</p>
<h2>Walk Through</h2>
<h3>Modify the source to prevent unauthorised access</h3>
<p>To prevent someone else from abusing your backdoor &#8211; a nightmare scenario while pentesting &#8211; you should modify the source code to prevent unauthorised access to your script.Â  This is left as an exercise to the reader.Â  I haven&#8217;t implemented this in v1.0.</p>
<h3>Compile findsock.c</h3>
<p>You need to compile findsock.c so that it&#8217;ll run on the web server you&#8217;ve gained access to.Â  If you&#8217;re running the same OS and architecture run the following locally:</p>
<p>$ gcc -o findsock findsock.c</p>
<p>If not, then you might have to compile elsewhere, or hope there&#8217;s a C compiler on the web server.</p>
<h3>Upload &#8220;findsock&#8221; and &#8220;php-findsock-shell.php&#8221;</h3>
<p>Upload the compiled binary plus the PHP script to the web server.</p>
<h3>Enjoy your new shell</h3>
<p>Access the PHP script using netcat (not using a browser).Â  If all went well, your HTTP connection should turn into an interactive shell:</p>
<pre>$ nc -v target 80
target [10.0.0.1] 80 (http) open
GET /php-findsock-shell.php HTTP/1.0</pre>
<pre>sh-3.2$ id
uid=80(apache) gid=80(apache) groups=80(apache)
sh-3.2$
... you now have an interactive shell ...</pre>
<h2>FAQs</h2>
<h3>When is this useful?</h3>
<p>When you can&#8217;t use a bindshell or reverse shell because of Firewall filtering.</p>
<p>Proper interactive shells are more useful than web-based shell in some circumstances, e.g:</p>
<ul>
<li>You want to change your user with &#8220;su&#8221;</li>
<li>You want to upgrade your shell using a local exploit</li>
<li>You want to log into another system using telnet / ssh</li>
</ul>
<h3>Isn&#8217;t the shell connection just going to be severed when the web server times out the PHP script?</h3>
<p>No.Â  It doesn&#8217;t seem to on the systems that I&#8217;ve tested it on (Gentoo Linux only so far).</p>
<h3>Isn&#8217;t there going to be a rather suspicious looking shell process when the admin runs &#8220;ps&#8221;?</h3>
<p>Yeah.Â  <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h3>Will this work with PERL as well as PHP?</h3>
<p>I doesn&#8217;t seem to.Â  The PERL script doesn&#8217;t to inherit any interesting file handles.Â  It just has its STDIN, STDOUT and STDERR attached to a pipe.Â  However, I&#8217;m sure that there&#8217;s more than one way to configure PERL with Apache, so maybe other configurations will be prone the above problem.</p>
<h2>Caveats</h2>
<p>The shell traffic doesn&#8217;t look much like HTTP, so I guess that you may have problems if the site is being protected by a Layer 7 (Application layer) Firewall.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/tools/web-shells/php-findsock-shell/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
