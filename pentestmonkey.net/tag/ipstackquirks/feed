<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>ipstackquirks &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/tag/ipstackquirks/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Fri, 07 Oct 2011 19:51:51 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>Finding IP Addresses of Other Network Interfaces on Linux</title>
		<link>https://pentestmonkey.net/uncategorized/finding-ip-addresses-of-other-network-interfaces-on-linux</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 16 Oct 2011 16:12:34 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[ipstackquirks]]></category>
		<category><![CDATA[pentest]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=497</guid>

					<description><![CDATA[The scenario for this post is that you&#8217;re connected to the local LAN of the systems you&#8217;re pentesting &#8211; possibly in a DMZ or multi-tiered architecture.  If you&#8217;re on an externally-facing LAN, you may find that there aren&#8217;t many network services to explore. As your pentest starts to look more like a vulnerability assessment, you [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>The scenario for this post is that you&#8217;re connected to the local LAN of the systems you&#8217;re pentesting &#8211; possibly in a DMZ or multi-tiered architecture.  If you&#8217;re on an externally-facing LAN, you may find that there aren&#8217;t many network services to explore.</p>
<p>As your pentest starts to look more like a vulnerability assessment, you might start thinking about the following:</p>
<ul>
<li>How many of these systems are multihomed?</li>
<li>What network services are accessible on the other interfaces?</li>
</ul>
<p>In modern network architectures, systems often have a mangement LAN interface, or a backup LAN interface and potentially other interfaces that are more interesting than the one you&#8217;re looking at.</p>
<p>If you can find the IP addresses of these other interfaces, you might be able to pentest a few more interesting network services from your vantage point on the external network segment.</p>
<h2>Finding IP Addresses of Remote Network Interfaces</h2>
<p>If you&#8217;re lucky you&#8217;ll be able to use <a href="http://linux.die.net/man/1/snmpnetstat">SNMP</a> (generic) or a &#8220;<a href="http://www.nessus.org/plugins/index.php?view=single&amp;id=43815">special NetBOIS query</a>&#8221; (Windows only) to list all the IP address of a system.</p>
<p>If this doesn&#8217;t work, you might be able to bruteforce the IP addresses using ARP queries.</p>
<p>Linux hosts will respond to ARP requests for all of their IP addresses on all of their Interfaces.   i.e. a multi-homed host might respond to both of these probes from the LAN you&#8217;re on:</p>
<pre>arp-scan 10.0.0.99
arp-scan 192.168.0.99</pre>
<p>This is counter-intuitive.  If you&#8217;re like me, you&#8217;d probably expect the target system to only answer ARP requests for IPs on the same LAN as the client. Indeed Solaris, Windows and AIX behave as expected.</p>
<p>When ARP scanning, your source IP address might be important (so also try 0.0.0.0).  Reasoning for this is discussed further <a href="http://pentestmonkey.net/blog/the-science-of-safely-finding-an-unused-ip-address">here</a> and <a href="http://www.nta-monitor.com/wiki/index.php/Arp-scan_User_Guide#Using_arp-scan_for_system_fingerprinting">here</a>.</p>
<p>Using <a href="http://www.nta-monitor.com/tools/arp-scan/">arp-scan</a>, a Class B can be scanned in 36 secs on my test system, using 3% CPU and 1 MB/s bandwidth:</p>
<pre># arp-scan --bandwidth=1M --retry=1 --arpspa=1.1.1.1 172.16.1.0/16</pre>
<p>So it&#8217;s just about practical to scan 10.0.0.0/8, 172.16.0.0/12 and 192.168.0.0/16. It should take less than 3 hours and would cover all hosts on the local subnet if you used broadcast ARP requests.  To do this for 4 source addresses would take 12 hours, which is a more significant amount of time.</p>
<p>If for some reason you don&#8217;t want to use broadcast ARP requests (maybe you&#8217;re not authorised to test the whole LAN), you can unicast requests by specifying the destination MAC address:</p>
<pre># arp-scan --bandwidth=1M --retry=1 --arpspa=1.1.1.1 --destaddr=00:11:22:33:44:55 172.16.1.0/16</pre>
<h3>How to Fix</h3>
<p>Changing the <a href="http://www.linuxinsight.com/proc_sys_net_ipv4_conf_eth0_arp_ignore.html">arp_ignore</a> option in /proc from 0 (default) to 1 will remedy the above behavior.</p>
<pre>echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>The Science of Safely Finding an Unused IP Address</title>
		<link>https://pentestmonkey.net/blog/the-science-of-safely-finding-an-unused-ip-address</link>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 02 Oct 2011 16:33:20 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[ipstackquirks]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=556</guid>

					<description><![CDATA[During pentests you&#8217;re often allocated an IP by the client or can get one via DHCP. There are times, however when the client might expect you find a free IP on your own. Or you might want to check that the client hasn&#8217;t assigned you an IP address that&#8217;s already in use. I&#8217;m sure we&#8217;ve [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>During pentests you&#8217;re often allocated an IP by the client or can get one via DHCP. There are times, however when the client might expect you find a free IP on your own. Or you might want to check that the client hasn&#8217;t assigned you an IP address that&#8217;s already in use.</p>
<p>I&#8217;m sure we&#8217;ve all got our own techniques for doing this. Each will have a greater or lesser risk of causing a temporary IP clash. This post explores some ways that we can minimise the risk picking an IP address that&#8217;s in use.</p>
<p>I make heavy use of <a href="http://www.nta-monitor.com/tools/arp-scan/">arp-scan</a> during the explanation below and also use the fingerprint database of <a href="http://www.nta-monitor.com/wiki/index.php/Arp-scan_User_Guide#Using_arp-scan_for_system_fingerprinting">arp-fingerprint</a>. So, thanks upfront to arp-scan&#8217;s author, Roy Hills for a very useful tool and comprehensive database that made this blog post much quicker to write than it otherwise would have been. That said, this post isn&#8217;t really about tools, just a methodology for finding a free IP address.</p>
<h2>Network Sniffing</h2>
<p>If you find yourself on a network and DHCP fails, your best course of action is probably to sniff on the network for a while (e.g. with <a href="http://www.tcpdump.org/">tcpdump</a> or <a href="http://www.wireshark.org/">wireshark</a>). Hopefully you&#8217;ll seem some broadcast traffic that will give you an idea of some of the IP addresses in use.</p>
<p>For the sake of an example, let&#8217;s assume we&#8217;ve seen traffic from 10.0.0.1.</p>
<h2>Guess a Network Range</h2>
<p>Now guess a netmask in which you&#8217;ll search for a free IP address &#8211; you can always expand the network range later when you&#8217;ve found a free IP and want to start your pentest. Perhaps start by assuming a Class C network, so we&#8217;re looking to find the free IPs in 10.0.0.0/24.</p>
<h2>Use ARP Queries to Identify IPs in Use</h2>
<p>This is the main point of the post. It seems that a few well chose ARP requests will mean that your probing is both effective and minimises the chances of causing an IP clash.</p>
<p>We know that we need to scan 10.0.0.0/24, but what should we choose as our source IP address? Arp-fingerprint&#8217;s database indicates that the following would be good choices:</p>
<ul>
<li>127.0.0.1</li>
<li>0.0.0.0</li>
<li>255.255.255.255</li>
<li>1.0.0.1 (IP network 1.0.0.0/8 is reserved by IANA)</li>
</ul>
<p>So the corresponding arp-scan commands would be:</p>
<pre> arp-scan --arpspa=127.0.0.1 10.0.0.0/24
 arp-scan --arpspa=0.0.0.0 10.0.0.0/24
 arp-scan --arpspa=255.255.255.255 10.0.0.0/24
 arp-scan --arpspa=1.0.0.1 10.0.0.0/24</pre>
<p>But how effective is this going to be? Do systems generally respond to at least one of these probes? According to arp-fingerprint&#8217;s database, most OSs we&#8217;re likely to encounter will respond. Below is an extract from arp-fingerprint&#8217;s database (arp-scan v1.8.1). The OSs below where one of the first 4 digits is a &#8220;1&#8221; should be detected:</p>
<pre> my %fp_hash = (
 '11110100000' =&gt; 'FreeBSD 5.3, 7.0, DragonflyBSD 2.0, Win98, WinME, NT4, 2000, XP, 2003, Catalyst IOS 12.0, 12.1, 12.2, FortiOS 3.00',
 '01000100000' =&gt; 'Linux 2.2, 2.4, 2.6',
 '01010100000' =&gt; 'Linux 2.2, 2.4, 2.6, Vista, 2008, Windows7', # Linux only if non-local IP is routed
 '00000100000' =&gt; 'Cisco IOS 11.2, 11.3, 12.0, 12.1, 12.2, 12.3, 12.4',
 '11110110000' =&gt; 'Solaris 2.5.1, 2.6, 7, 8, 9, 10, HP-UX 11',
 '01000111111' =&gt; 'ScreenOS 5.0, 5.1, 5.3, 5.4',
 '11110000000' =&gt; 'Linux 2.0, MacOS 10.4, IPSO 3.2.1, Minix 3, Cisco VPN Concentrator 4.7, Catalyst 1900',
 '11110100011' =&gt; 'MacOS 10.3, FreeBSD 4.3, IRIX 6.5, AIX 4.3, AIX 5.3',
 '10010100011' =&gt; 'SCO OS 5.0.7',
 '10110100000' =&gt; 'Win 3.11, 95, NT 3.51',
 '11110000011' =&gt; '2.11BSD, 4.3BSD, OpenBSD 3.1, OpenBSD 3.9, Nortel Contivity 6.00, 6.05',
 '10110110000' =&gt; 'NetBSD 2.0.2, 4.0',
 '10110111111' =&gt; 'PIX OS 4.4, 5.1, 5.2, 5.3',
 '11110111111' =&gt; 'PIX OS 6.0, 6.1, 6.2, ScreenOS 5.0 (transparent), Plan9, Blackberry OS',
 '00010110011' =&gt; 'PIX OS 6.3, 7.0(1), 7.0(2)',
 '01010110011' =&gt; 'PIX OS 7.0(4)-7.0(6), 7.1, 7.2, 8.0',
 '00000110000' =&gt; 'Netware 6.5',
 '00010100000' =&gt; 'Unknown 1', # 14805 79.253 Cisco
 '00000110011' =&gt; 'Cisco IP Phone 79xx SIP 5.x,6.x,7.x',
 '11110110011' =&gt; 'Cisco IP Phone 79xx SIP 8.x', # Also 14805 63.11 Fujitsu Siemens
 );</pre>
<p>So by covering pretty much every version of Windows, Linux and Solaris, we&#8217;ve covered most of the servers and workstations types we&#8217;re likely to encounter on pentests (or at least the main ones that I encounter). The following won&#8217;t be found:</p>
<pre> '00000100000' =&gt; 'Cisco IOS 11.2, 11.3, 12.0, 12.1, 12.2, 12.3, 12.4',
 '00000110000' =&gt; 'Netware 6.5',
 '00000110011' =&gt; 'Cisco IP Phone 79xx SIP 5.x,6.x,7.x',</pre>
<h2>The Risky Bit</h2>
<p>So we think we&#8217;ve found most of the IPs that are used in 10.0.0.0/24, but we&#8217;re not absolutely sure.</p>
<p>Now, we can now do a small number of ARP probes from what we think is an unused IP address in the range. In fact, we&#8217;ll pick two IP addresses so we can verify that they&#8217;re both really free.</p>
<ol>
<li>Choose two (apparently) free addresses between the smallest and largest IP you&#8217;ve observed. Don&#8217;t choose an IP outside of this range unless you have to because your guess at the netmask might have been wrong. We&#8217;ll choose 10.0.0.99 and 10.0.0.11 for this example.</li>
<li>From each IP address, make an ARP request for the other</li>
</ol>
<pre style="padding-left: 90px;"> arp-scan --arpspa=10.0.0.11 10.0.0.99
 arp-scan --arpspa=10.0.0.99 10.0.0.11</pre>
<p>If you receive no response these probes, you can be sure they&#8217;re both free. Pick one and do an &#8220;arp-scan -l&#8221; with various netmasks until you&#8217;re happy your netmask is big enough.</p>
<p>If you receive a response to one of the probes above, change the used IP for another apprently free one and repeat.</p>
<h2>Disclaimer</h2>
<p>To the best of my knowledge the requests recommended above should be relatively safe or at least show diligence on your part.  I accept no responsibility if it anything goes wrong, though.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
