{"id":92,"date":"2007-06-30T18:40:10","date_gmt":"2007-06-30T18:40:10","guid":{"rendered":"http:\/\/pentestmonkey.net\/?p=92"},"modified":"2011-08-20T16:02:24","modified_gmt":"2011-08-20T16:02:24","slug":"yaptest-user-guide","status":"publish","type":"post","link":"https:\/\/pentestmonkey.net\/yaptest\/using\/yaptest-user-guide","title":{"rendered":"Yaptest User Guide"},"content":{"rendered":"<p>Some notes on how to actually use yaptest&#8230;<br \/>\n<!--more--><\/p>\n<p>This page covers how to setup a new test using yaptest and run some supported tools to begin a pentest.\u00a0 Also see the <a href=\"..\/projects\/yaptest\/yaptest-installation\">Installation page<\/a> .<\/p>\n<h3>Assumptions<\/h3>\n<p>This guide assumes you&#8217;re using Linux and have PostgreSQL installed locally and that the database server allows you to connect as any user without a password (the default on gentoo).<\/p>\n<p>Disclaimer: This configuration is bad from a security perspective unless:<\/p>\n<ul>\n<li>PostgreSQL is bound to the loopback interface only or accessed via unix domain sockets; AND<\/li>\n<li>You&#8217;re the only person allowed to log into the database server<\/li>\n<\/ul>\n<p>It is also assumed that:<\/p>\n<ul>\n<li>yaptest has been successfully <a href=\"..\/projects\/yaptest\/yaptest-installation\">installed<\/a>.<\/li>\n<li>You are using BASH as your shell.<\/li>\n<\/ul>\n<h3>Starting a New Test<\/h3>\n<p>First start the postgresql backend.\u00a0 The command is normally something like:<\/p>\n<pre># \/etc\/init.d\/postgresql start<\/pre>\n<p>Use yaptest-wizard.pl to create a new database and a new directory to hold all your test data.\u00a0 This design is used to avoid mixing data from two clients either at the file-system level or at the database-level.\u00a0 If you don&#8217;t like interactive wizards use the tools yaptest-new-db.pl and yaptest-new-test-area.pl instead.<\/p>\n<pre>$ yaptest-wizard.pl\r\n\r\n**************************************************************************\r\n*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Starting yaptest-wizard.pl\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 *\r\n*\u00a0 [ Using yaptest v0.0.7 - http:\/\/pentestmonkey.net\/projects\/yaptest ]\u00a0 *\r\n**************************************************************************\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 __\u00a0 __\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 __\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 __\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \/ \/___ _____\u00a0 \/ \/____\u00a0 _____\/ \/_\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 \/ __ `\/ __ \/ __\/ _ \/ ___\/ __\/\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \/ \/ \/_\/ \/ \/_\/ \/ \/_\/\u00a0 __(__\u00a0 ) \/_\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \/_\/__,_\/ .___\/__\/___\/____\/__\/\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \/_\/\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Doing the tedious bits so you don't have to\r\n\r\n\u00a0\u00a0\u00a0 THIS WIZARD CURRENLTY ONLY DEALS WITH THE CREATION OF NEW DATABASES\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 AND TEST AREAS\r\n=========================================================================\r\nDatabase Configuration\r\n\r\nYou are currenlty not configured to use a database.\r\n\r\nOptions:\r\n\u00a0 1: Create a new database\r\n\u00a0 q: Quit\r\n\r\nNB: If you previously created a database and want to use it,\r\n\u00a0\u00a0\u00a0 quit, change to the corresponding directory,\r\n\u00a0\u00a0\u00a0 'source env.sh', then re-run this wizard.\r\n\r\nEnter option (1, q):<\/pre>\n<p>Select 1 to create a new database.\u00a0 Give it a name like &#8220;abc_company&#8221;.\u00a0 This is also used for a directory which should be used to store all your tool output.<\/p>\n<pre>Enter option (1, q): 1<\/pre>\n<pre>-------------------------------------------------------------------------\r\n=========================================================================\r\nCreate New Database<\/pre>\n<pre>Enter a name for the new database.\u00a0 A subdirectory of the same name will\r\nbe created at the same time.<\/pre>\n<pre>Current Directory: \/home\/u\r\nEnter name for new yaptest database (or CTRL-C to quit): abc_company\r\n-------------------------------------------------------------------------\r\nDatabase name: abc_company\r\nCreating directory 'abc_company'...done\r\nCreating database 'abc_company'\r\nConfig file: \/home\/u\/abc_company\/yaptest.conf\r\nWriting to config file \/home\/u\/abc_company\/yaptest.conf\r\nCreating file env.sh\r\nRestarting wizard with new configuration<\/pre>\n<pre>...\r\n=========================================================================\r\nDatabase Configuration\r\nYou are currently configured to use:\r\n\u00a0 Database:\u00a0\u00a0\u00a0 abc_company\r\n\u00a0 Test Dir:\u00a0\u00a0\u00a0 \/home\/u\/abc_company\r\nThe following test areas exist in this database:\r\n\u00a0 &lt;none&gt;\r\nOptions:\r\n\u00a0 1: Create a new test area in above database\r\n\u00a0 2: Create a new database\r\n\u00a0 q: Quit<\/pre>\n<pre>NB: If you previously created different database and want\r\n\u00a0\u00a0\u00a0 to use it, quit, change to the corresponding directory,\r\n\u00a0\u00a0\u00a0 'source env.sh', then re-run this wizard.\r\nEnter option (1, 2, q):<\/pre>\n<p>Next you&#8217;ll need to create at least on test area.\u00a0 In this context a &#8220;test area&#8221; is a pair of location-of-pentest-lappy and target-network.\u00a0 The following example test areas illustrate the meaning of &#8220;test area&#8221;:<\/p>\n<ul>\n<li>Test area &#8220;inet_to_us_gw&#8221; could mean testing over the Internet towards your client&#8217;s United State gateway<\/li>\n<li>Test area &#8220;vlan123_local&#8221; could mean connecting to VLAN123 and testing the local hosts on that segment<\/li>\n<li>Test area &#8220;userlan_to_dmz&#8221; could mean connecting to the Internal network and scanning the DMZ<\/li>\n<\/ul>\n<p>The larger the pentest, the more important it is that you choose sensible names.\u00a0 For small tests, anything will do.\u00a0 We&#8217;ll go with &#8220;external&#8221;:<\/p>\n<pre>Enter option (1, 2, q): 1<\/pre>\n<pre>-------------------------------------------------------------------------\r\n=========================================================================\r\nCreate New Test Area\r\nTo create a new test area (internal, vlan100, network123, etc.) enter the\r\ntest area name below.\u00a0 A directory of the name name will be created at\r\nsame time.<\/pre>\n<pre>Current Directory: \/home\/u\/abc_company\r\nEnter name for new test area (or CTRL-C to quit): external\r\n-------------------------------------------------------------------------\r\nDatabase name: external\r\nCreating directory 'external'...done\r\nCreating test area 'external'\r\nWriting to config file yaptest.conf\r\nCreating file env.sh\r\n-------------------------------------------------------------------------\r\n=========================================================================\r\nNow quit the wizard with q:\r\nEnter option (1, 2, q): q\r\n-------------------------------------------------------------------------\r\nIMPORTANT: To use your newly created test areas you must first:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $ cd abc_company\/yourtestarea\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $ source env.sh<\/pre>\n<p>Follow the &#8220;important&#8221; instructions above:<\/p>\n<pre>$ cd abc_company\/\r\n$ cd external\/\r\n$ source env.sh<\/pre>\n<p>Any yaptest scripts you run will now:<\/p>\n<ul>\n<li>Know which database to use<\/li>\n<li>Know which test area you&#8217;re currently assessing<\/li>\n<li>Save scan data to the correct directory<\/li>\n<\/ul>\n<p>NB: If you forget to &#8220;source env.sh&#8221; all the yaptest script will throw an error like:<\/p>\n<pre>ERROR: Environment variable YAPTEST_DBNAME is not set...<\/pre>\n<p>You can create new test areas later on using the wizard.\u00a0 To view a list of test areas either use the wizard or the command:<\/p>\n<pre>$ yaptest-test-areas.pl query<\/pre>\n<p>In the next section we&#8217;ll do some scanning.\u00a0 Once you&#8217;ve finished a test area and need to move to the next one it&#8217;s important that you move to the corresponding directory and &#8220;source&#8221; the env.sh file:<\/p>\n<pre>$ cd ..\/external_gw2<\/pre>\n<pre>$ source env.sh<\/pre>\n<h3>Doing some scanning<\/h3>\n<p>For this section we&#8217;ll assume that we&#8217;re testing the local network segment so we can demonstrate the use of ARP for host-discovery.<\/p>\n<p>The first thing you&#8217;d normally do when running yaptest is to add all the IP addresses you want to test into the backend database.\u00a0 First we need to find a list of live hosts.<\/p>\n<p>We need to be root to run <a href=\"http:\/\/www.nta-monitor.com\/tools\/arp-scan\/\">arp-scan<\/a> , so the use of sudo is recommended.\u00a0 However if you can&#8217;t be bothered <a href=\"http:\/\/pentestmonkey.net\/projects\/yaptest\/using-sudo-with-yaptest\/\">configuring sudo<\/a> to preserve the right parts of your environment do this:<\/p>\n<pre>$ su<\/pre>\n<pre># pwd<\/pre>\n<pre>\/home\/u\/abc_company\/vlan1<\/pre>\n<pre># source env.sh<\/pre>\n<p>Check that yaptest knows the correct network interface to use. And set it if not. The help message describes how to do this:<\/p>\n<pre># yaptest-arp-scan-local-network.pl --help\r\n\r\nUsage: yaptest-arp-scan-local-network.pl\r\nARP scans the local network.\r\n\r\nThis script needs to know the Network Interface to use.  This\r\nis found from the 'yaptest_interface' config option:\r\n$ yaptest-config.pl query yaptest_interface\r\n$ yaptest-config.pl set yaptest_interface eth0\r\n\r\nNB: This script relies on arp-scan being in the path<\/pre>\n<p>Start the scan&#8230;<\/p>\n<pre># yaptest-arp-scan-local-network.pl\r\n[PID 936] ------------------ Yaptest \"run_test\" executing command ... ---------------------\r\n[PID 936] Command ............. arp-scan -r 2 -I vmnet1 -l\r\n[PID 936] Output File ......... arp-scan.out.2\r\n[PID 936] ---------------------------------------------------------------------------------\r\n[PID 936] Interface: vmnet1, datalink type: EN10MB (Ethernet)\r\n[PID 936] Starting arp-scan 1.5 with 256 hosts (http:\/\/www.nta-monitor.com\/tools\/arp-scan\/)\r\n[PID 936] 172.16.16.4   00:0c:29:f3:6b:a8       VMware, Inc.\r\n[PID 936] 172.16.16.5   00:0c:29:09:8d:2e       VMware, Inc.\r\n[PID 936] 172.16.16.6   00:0c:29:31:dc:1b       VMware, Inc.\r\n[PID 936] 172.16.16.7   00:0c:29:3d:85:01       VMware, Inc.\r\n[PID 936] 172.16.16.8   00:0c:29:8b:2d:e3       VMware, Inc.\r\n[PID 936] 172.16.16.9   00:0c:29:f7:de:4e       VMware, Inc.\r\n[PID 936] 172.16.16.10  00:0c:29:d6:64:c3       VMware, Inc.\r\n[PID 936] 172.16.16.254 00:50:56:ea:9d:d8       VMWare, Inc.\r\n[PID 936]\r\n[PID 936] 8 packets received by filter, 0 packets dropped by kernel\r\n[PID 936] Ending arp-scan 1.5: 256 hosts scanned in 1.283 seconds (199.53 hosts\/sec).  8 responded<\/pre>\n<p>Note that if you run this command twice a different output file will be used to avoid clobbering the first.<\/p>\n<p>The output from arp-scan will be automatically parsed by yaptest-parse-arp-scan.pl (as of yaptest 0.0.7).\u00a0 If for any reason you need to parse the output of an old arp-scan, you can do this manually:<\/p>\n<pre># yaptest-parse-arp-scan.pl arp-scan.out.2\r\n\r\n**************************************************************************\r\n*                   Starting yaptest-parse-arp-scan.pl                   *\r\n*  [ Using yaptest v0.0.4 - http:\/\/pentestmonkey.net\/projects\/yaptest ]  *\r\n**************************************************************************\r\n\r\nProcessing arp-scan.out.2...\r\nInterface: vmnet1, datalink type: EN10MB (Ethernet)\r\nStarting arp-scan 1.5 with 256 hosts (http:\/\/www.nta-monitor.com\/tools\/arp-scan\/)\r\n172.16.16.4     00:0c:29:f3:6b:a8       VMware, Inc.\r\nPARSED: IP=172.16.16.4, MAC=00:0c:29:f3:6b:a8, DESC=VMware, Inc.\r\n172.16.16.5     00:0c:29:09:8d:2e       VMware, Inc.\r\nPARSED: IP=172.16.16.5, MAC=00:0c:29:09:8d:2e, DESC=VMware, Inc.\r\n172.16.16.6     00:0c:29:31:dc:1b       VMware, Inc.\r\nPARSED: IP=172.16.16.6, MAC=00:0c:29:31:dc:1b, DESC=VMware, Inc.\r\n...<\/pre>\n<p>Once this is done, our backend database will be populated with a list of hosts to scan.<\/p>\n<pre># yaptest-hosts.pl query\r\nvlan1\u00a0 172.16.16.4\u00a0\u00a0\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nvlan1\u00a0 172.16.16.5\u00a0\u00a0\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nvlan1\u00a0 172.16.16.6\u00a0\u00a0\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nvlan1\u00a0 172.16.16.7\u00a0\u00a0\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nvlan1\u00a0 172.16.16.8\u00a0\u00a0\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nvlan1\u00a0 172.16.16.9\u00a0\u00a0\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nvlan1\u00a0 172.16.16.10\u00a0\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nvlan1\u00a0 172.16.16.254\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nTotal records: 8<\/pre>\n<p>You can remove any hosts that you don&#8217;t want scanned:<\/p>\n<pre># yaptest-hosts.pl delete -i 172.16.16.254<\/pre>\n<pre>Deleting 172.16.16.254<\/pre>\n<pre># yaptest-hosts.pl query\r\nvlan1\u00a0 172.16.16.4\u00a0\u00a0\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nvlan1\u00a0 172.16.16.5\u00a0\u00a0\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nvlan1\u00a0 172.16.16.6\u00a0\u00a0\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nvlan1\u00a0 172.16.16.7\u00a0\u00a0\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nvlan1\u00a0 172.16.16.8\u00a0\u00a0\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nvlan1\u00a0 172.16.16.9\u00a0\u00a0\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nvlan1\u00a0 172.16.16.10\u00a0\u00a0\u00a0 null\u00a0\u00a0\u00a0 null\r\nTotal records: 7<\/pre>\n<p>The other tools can then draw on this information to perform further testing.\u00a0 Note that you can also add a list of hosts to scan using the script yaptest-hosts.pl (for those occassions when ARP scanning isn&#8217;t appropriate).<\/p>\n<pre># yaptest-hosts.pl add -f ips.txt<\/pre>\n<p>At this point, you&#8217;d probably just run yaptest-db-ips.sh to run a whole load of different pre-configured tests.\u00a0 However, for the purposes of this tutorial, we&#8217;ll run some of the commands from yaptest-db-ips.sh manually.<\/p>\n<p>Fisrt we&#8217;ll do a TCP portscan using <a href=\"http:\/\/pentestmonkey.net\/tools\/yapscan\/\">yapscan<\/a> .\u00a0 The following script connects to the database to find which hosts it needs to scan:<\/p>\n<pre># yaptest-yapscan-tcp.pl<\/pre>\n<pre>[PID 1057] ------------------ Yaptest \"run_test\" executing command ... ---------------------\r\n[PID 1057] Command ............. yapscan -sS -r 2 -i vmnet1 -b 1000000 -P all -f yaptest-ips-0YZ4x\r\n[PID 1057] Output File ......... yapscan-tcp.out.2\r\n[PID 1057] ---------------------------------------------------------------------------------\r\n[PID 1057] Starting Yapscan v0.7.1-beta ( http:\/\/pentestmonkey.net\/tools\/yapscan )\r\n[PID 1057]\r\n[PID 1057]  ----------------------------------------------------------\r\n[PID 1057] |                   Scan Information                       |\r\n[PID 1057]  ----------------------------------------------------------\r\n[PID 1057] Scan type: ......... TCP\r\n[PID 1057] IPs File: .......... yaptest-ips-0YZ4x\r\n[PID 1057] Interface: ......... vmnet1\r\n[PID 1057] Bandwidth limit: ... 1000000 bits\/sec\r\n[PID 1057] Source address: .... 172.16.16.1\r\n[PID 1057] RTT: ............... 0.950000 secs\r\n[PID 1057] Retries: ........... 2\r\n[PID 1057] Max Memory: ........ 150000 KBytes (Scanning up to 36 hosts at once)\r\n[PID 1057] Port file: ......... all\r\n[PID 1057] Port count: ........ 65535\r\n[PID 1057] Show closed ports .. off\r\n[PID 1057]\r\n[PID 1057] ####### Scan of first 7 hosts started at 2007-07-28 13:04:50 +0000 #########\r\n[PID 1057] 172.16.16.5:7        echo    Len=44 TTL=128 IPID=19039 FLAGS=SA______ SEQ=0xfca78ae9 ACK=0xf37388f7 WIN=64240\r\n[PID 1057] 172.16.16.5:9        discard Len=44 TTL=128 IPID=19040 FLAGS=SA______ SEQ=0xfca860e6 ACK=0x76bb1a85 WIN=64240\r\n[PID 1057] 172.16.16.7:7        echo    Len=44 TTL=255 IPID=47493 FLAGS=SA______ SEQ=0x0c7efba5 ACK=0x6058dc5d WIN=9112\r\n...<\/pre>\n<p>Again the output from yapscan will be automatically parsed (as of 0.0.7) and a list of open ports saved in the backend database.\u00a0 This information is used later by other tools.\u00a0 If you want to parse the output of an old yapscan manually you can use yaptest-parse-yapscan.pl.<\/p>\n<p>Use the yaptest-ports.pl command to list the open ports in the backend database.\u00a0 Output is tab-delimited for each cutting and grepping:<\/p>\n<pre># yaptest-ports.pl query\r\nvlan1  172.16.16.4     21      TCP\r\nvlan1  172.16.16.4     25      TCP\r\nvlan1  172.16.16.4     80      TCP\r\nvlan1  172.16.16.4     119     TCP\r\nvlan1  172.16.16.4     135     TCP\r\n...<\/pre>\n<p>The help message describes the various other type of queries you can make about open ports:<\/p>\n<pre>yaptest-ports.pl\r\n\r\n**************************************************************************\r\n*                       Starting yaptest-ports.pl                        *\r\n*  [ Using yaptest v0.0.7 - http:\/\/pentestmonkey.net\/projects\/yaptest ]  *\r\n**************************************************************************\r\n\r\nUsage: yaptest-ports.pl query [ options ]\r\nLists open ports found\r\n\r\nOptions are:\r\n        -i ip          IP to search for\r\n        -p port        Port to search for\r\n        -t test_area   Test area to search for\r\n        -r string      String to search for in 'rpcinfo -p' output (e.g. 'sadmind')\r\n        -s string      String to search for in nmap service string (e.g. 'http')\r\n        -v string      String to search for in nmap version string (e.g. 'Apache')<\/pre>\n<p>Here are some examples:<\/p>\n<pre>$ yaptest-ports.pl query -p 23 | cut -f 2 &gt; telnet-ips.txt<\/pre>\n<pre>$ yaptest-ports.pl query -r sadmind | cut -f 2 &gt; sadmind-ips.txt<\/pre>\n<p>Other commands you can run that will operate on all hosts include:<\/p>\n<ul>\n<li>yaptest-nmap-udp.pl (parse with yaptest-parse-nmap-xml.pl)<\/li>\n<li>yaptest-onesixtyone.pl (parse with yaptest-parse-onesixtyone.pl)<\/li>\n<li>yaptest-nbtscan.pl<\/li>\n<li>yaptest-yapscan-icmp.pl (parse with yaptest-parse-yapscan-icmp.pl)<\/li>\n<\/ul>\n<h3>Testing some of the open ports<\/h3>\n<p>Now we&#8217;ll run nmap on all the open TCP ports so it can do it&#8217;s banner grabbing and service-identification magic.\u00a0 In this next example, up to 5 nmap processes are run in parallel.\u00a0 The output of these processes gets intermingled, but the individual output files will still make sense.<\/p>\n<p><span style=\"font-size: xx-small;\"># yaptest-nmap-tcp.pl [PID 22469] &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212; Yaptest Running Command &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;- [PID 22469] Command &#8230;&#8230;&#8230;&#8230;. nmap -sS -P0 -n -O -v -A -oA nmap-tcp-10.10.0.243.out.22467 -p 111,21,22,23,25,32774,32775,32776,32777,32778,32780,32782,32784,32785,32786,32790, 32791,32792,32793,32794,32861,4045,513,514,587,5987,5988,7100,79,80,898,9010 10.10.0.243 [PID 22469] Output File &#8230;&#8230;&#8230; nmap-tcp-10.10.0.243.out.3 [PID 22469] &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211; [PID 22471] &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212; Yaptest Running Command &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;- [PID 22471] Command &#8230;&#8230;&#8230;&#8230;. nmap -sS -P0 -n -O -v -A -oA nmap-tcp-10.10.0.127.out.22467 -p 443 10.10.0.127 [PID 22471] Output File &#8230;&#8230;&#8230; nmap-tcp-10.10.0.127.out.2 [PID 22471] &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211; [PID 22471] [PID 22471] Starting Nmap 4.20 ( http:\/\/insecure.org ) at 2007-06-30 21:27 BST [PID 22471] Initiating ARP Ping Scan at 21:27 &#8230;\u00a0<\/span><\/p>\n<p>The output can be parsed into the database as follows (you still need to do this manually as of v0.0.7):<\/p>\n<pre>$ yaptest-parse-nmap-xml.pl *.xml\r\nProcessing nmap-tcp-172.16.16.10.out.31962.xml...\r\nIP: 172.16.16.10\r\nPARSED: 172.16.16.10: echo (7\/tcp) open\r\nPARSED: 172.16.16.10: discard (9\/tcp) open\r\nPARSED: 172.16.16.10: daytime (13\/tcp) open Sun Solaris daytime\r\nPARSED: 172.16.16.10: chargen (19\/tcp) open\r\nPARSED: 172.16.16.10: ftp (21\/tcp) open Solaris ftpd\r\nPARSED: 172.16.16.10: telnet (23\/tcp) open BSD-derived telnetd\r\nPARSED: 172.16.16.10: smtp (25\/tcp) open Sendmail 8.12.11+Sun\/8.12.11\r\nPARSED: 172.16.16.10: time (37\/tcp) open   (32 bits)<\/pre>\n<p>Now we run nikto on all of the HTTP and HTTPS services identified by nmap:<\/p>\n<pre>$ yaptest-nikto.pl\r\nTargets for this test are:\r\n172.16.16.4     80\r\n172.16.16.4     4066\r\n172.16.16.5     80\r\n172.16.16.5     9170\r\n172.16.16.6     80\r\n172.16.16.6     7140\r\n172.16.16.6     8099\r\n172.16.16.9     898\r\n172.16.16.9     5988\r\nTotal records: 9\r\n\r\n[PID 1130] ------------------ Yaptest \"run_test\" executing command ... ---------------------\r\n[PID 1130] Command ............. nikto.pl -nolookup 127.0.0.1 -h 172.16.16.4 -p 80\r\n[PID 1130] Output File ......... nikto.pl-172.16.16.4-80.out\r\n[PID 1130] Inactivity Timeout .. 300\r\n[PID 1130] ---------------------------------------------------------------------------------\r\n...<\/pre>\n<p>Other simple tests based on open ports include:<\/p>\n<ul>\n<li>yaptest-rpcinfo.pl<\/li>\n<li>yaptest-dcetest.pl<\/li>\n<li>yaptest-ntp.pl<\/li>\n<li>yaptest-telnet-fuser.pl<\/li>\n<li>yaptest-nxscan.pl<\/li>\n<\/ul>\n<p>Check out yaptest-db-ips.sh for a more complete list.\u00a0 This will run pretty much all the tools yaptest support in the appropriate order.<\/p>\n<h3>Testing some RPC services<\/h3>\n<p>You can parse the output of rpcinfo like this:<\/p>\n<pre>$ yaptest-parse-rpcinfo.pl rpcinfo-*<\/pre>\n<p>The following tests are based on the output of rpcinfo, so yaptest-rcpinfo.pl must be run first:<\/p>\n<ul>\n<li>yaptest-rusers.pl<\/li>\n<li>yaptest-rup.pl<\/li>\n<li>yaptest-nfs.pl<\/li>\n<\/ul>\n<h3>Password guessing<\/h3>\n<p>The following scripts can be used to kick off password guessing against any of the supported protocols.\u00a0 You&#8217;ll need to tell yaptest where your dictionary files are kept first.\u00a0 The help message wille explain how to do this.<\/p>\n<ul>\n<li>yaptest-password-guess-ftp.pl<\/li>\n<li>yaptest-password-guess-mssql.pl<\/li>\n<li>yaptest-password-guess-rlogin.pl<\/li>\n<li>yaptest-password-guess-smb.pl<\/li>\n<li>yaptest-password-guess-ssh.pl<\/li>\n<\/ul>\n<h3>Other Yaptest-related stuff<\/h3>\n<p>If you want to run nessus, yaptest can give a list of ports that are open on the network (both UDP and TCP).\u00a0 The format is suitable for copy and pasting into most nessus clients:<\/p>\n<pre>$ yaptest-get-all-open-ports.pl\r\n21,22,23,25,79,80,111,443,513,514,587,898,4045,5987,5988,7100,9010,32774,32775,32776,32777,32778,32780,32782,32784, 32785,32786,32790,32791,32792,32793,32794,32861<\/pre>\n<h3>One script to run it all<\/h3>\n<p>After the database has been populated with the IPs you want to test, the following shell script can be used to start off most of the supported tests on targets in the database:<\/p>\n<p># yaptest-db-ips.sh<\/p>\n<p>Yaptest can also keep track of value usernames, password and password hashes that you&#8217;ve collected.\u00a0 See <a href=\"..\/projects\/yaptest\/yaptest-password-management\">Managing Login Credentials with Yaptest<\/a> for more information.<\/p>\n<p>&nbsp;<\/p>\n<pre><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Some notes on how to actually use yaptest&#8230;<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[10],"tags":[69],"_links":{"self":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/92"}],"collection":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/comments?post=92"}],"version-history":[{"count":1,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/92\/revisions"}],"predecessor-version":[{"id":438,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/92\/revisions\/438"}],"wp:attachment":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/media?parent=92"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/categories?post=92"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/tags?post=92"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}