{"id":15,"date":"2007-06-24T20:50:23","date_gmt":"2007-06-24T20:50:23","guid":{"rendered":"http:\/\/pentestmonkey.net\/?p=15"},"modified":"2011-08-20T16:03:28","modified_gmt":"2011-08-20T16:03:28","slug":"cracking-postgres-hashes","status":"publish","type":"post","link":"https:\/\/pentestmonkey.net\/blog\/cracking-postgres-hashes","title":{"rendered":"Cracking Postgres Password Hashes with MDCrack"},"content":{"rendered":"<p>As far as I&#8217;m aware there are aren&#8217;t many good password crackers around for <a href=\"http:\/\/www.postgresql.org\/\">PostgreSQL<\/a> database password hashes.\u00a0 Here are a few notes on how to crack postgres password hashes quickly using MDCrack.\u00a0 Even though <a href=\"http:\/\/membres.lycos.fr\/mdcrack\/\">MDCrack<\/a> is a Windows program, it works well enough under <a href=\"http:\/\/www.winehq.org\/\">WINE<\/a> for our purposes.\u00a0 Linux users can therefore benefit from its impressive cracking speeds.<\/p>\n<p><!--more--><\/p>\n<h3>Where are the Hashes Kept?<\/h3>\n<p>Postgres keeps MD5-based password hashes for database-level users in the pg_shadow table.\u00a0 You need to be the database superuser to read this table (usually called &#8220;postgres&#8221; or &#8220;pgsql&#8221;).\u00a0 First log into the database.\u00a0 If you&#8217;ve gained local access to the Postgres server (e.g. via SSH), you&#8217;ll probably find that you don&#8217;t need a password to log in.\u00a0 You will need a username and the name of a database, though.\u00a0 The database &#8220;template1&#8221; always exists:<\/p>\n<pre>$ psql -U postgres template1<\/pre>\n<p>Then list the hashes:<\/p>\n<pre># select usename, passwd from pg_shadow;\r\n\u00a0\u00a0\u00a0\u00a0 usename\u00a0\u00a0\u00a0\u00a0\u00a0 |  passwd\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n------------------+-------------------------------------\r\n testuser\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 | md5fabb6d7172aadfda4753bf0507ed4396<\/pre>\n<pre>...<\/pre>\n<p>The passwd field in this table is MD5(password || username) &#8211; where || denotes concatenation.\u00a0\u00a0 In this example the passwd field for testuser contains &#8220;md5&#8221; || MD5(m4gictestuser).<\/p>\n<h3>Cracking Hashes<\/h3>\n<p>Download the latest version of <a href=\"http:\/\/membres.lycos.fr\/mdcrack\/\">MDCrack<\/a>.\u00a0 If you&#8217;re running Linux, then run it under WINE.\u00a0 You&#8217;ll need to tell MDCrack to append the username to the end of each candidate password:<\/p>\n<pre>$ wine MDCrack-sse.exe --algorithm=MD5 --append=testuser fabb6d7172aadfda4753bf0507ed4396\r\n\r\nSystem \/ Starting MDCrack v1.8(3)\r\nSystem \/ Running as MDCrack-sse.exe --algorithm=MD5 --append=testuser fabb6d7172aadfda4753bf0507ed4396\r\nSystem \/ Charset is: abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\r\nSystem \/ Detected processor(s): 2 x unknown | 3D-Now | MMX | SSE | SSE2\r\nSystem \/ Target hash: fabb6d7172aadfda4753bf0507ed4396\r\nSystem \/ &gt;&gt; Using MD5 cores: maximal candidate\/user salt size: 16\/54 bytes\r\nInfo\u00a0\u00a0 \/ Press ESC for available runtime shortcuts (Ctrl-c to quit)\r\nInfo\u00a0\u00a0 \/ Thread #0: &gt;&gt; Using Core 2\r\nInfo\u00a0\u00a0 \/ Thread #1: &gt;&gt; Using Core 2\r\nInfo\u00a0\u00a0 \/ Thread #0: Candidate size:\u00a0 1 ( + user salt: 8 )\r\nInfo\u00a0\u00a0 \/ Thread #1: Candidate size:\u00a0 1 ( + user salt: 8 )\r\nInfo\u00a0\u00a0 \/ Thread #0: Candidate size:\u00a0 2 ( + user salt: 8 )\r\nInfo\u00a0\u00a0 \/ Thread #1: Candidate size:\u00a0 2 ( + user salt: 8 )\r\nInfo\u00a0\u00a0 \/ Thread #0: Candidate size:\u00a0 3 ( + user salt: 8 )\r\nInfo\u00a0\u00a0 \/ Thread #1: Candidate size:\u00a0 3 ( + user salt: 8 )\r\nInfo\u00a0\u00a0 \/ Thread #0: Candidate size:\u00a0 4 ( + user salt: 8 )\r\nInfo\u00a0\u00a0 \/ Thread #1: Candidate size:\u00a0 4 ( + user salt: 8 )\r\nInfo\u00a0\u00a0 \/ Thread #1: Candidate size:\u00a0 5 ( + user salt: 8 )\r\nInfo\u00a0\u00a0 \/ Thread #0: Candidate size:\u00a0 5 ( + user salt: 8 )\r\n----------------------------------------------------------\/ Thread #0 (Success) ----\r\nSystem \/ Thread #0: Collision found: m4gictestuser\r\n...<\/pre>\n<h3>Performance<\/h3>\n<p>When running under WINE MDCrack can rattle through nearly 20 million passwords per second on a (dual core) AMDx2 4200+.\u00a0 It automatically utilises both processors.<\/p>\n<pre>$ wine MDCrack-sse.exe --benchmark\r\n\r\nSystem \/ Starting MDCrack v1.8(3)\r\nSystem \/ Running as MDCrack-sse.exe --benchmark\r\nSystem \/ Detected processor(s): 2 x 2.15 Ghz unknown | 3D-Now | MMX | SSE | SSE2\r\nWarning\/ Please wait, this benchmark should last around 1min 45s\r\nInfo\u00a0\u00a0 \/ Press Ctrl-c to skip a test\r\n\r\n---------------------------------------------------------------\/ MD4 \/ DH \/ 2 Threads ---------------------\r\nInfo\u00a0\u00a0 \/ Benchmarking ( pass #1 )... 33 178 408 ( 3.32e+007 ) h\/s.\r\n---------------------------------------------------------------\/ MD5 \/ DH \/ 2 Threads ---------------------\r\nInfo\u00a0\u00a0 \/ Benchmarking ( pass #1 )... 19 703 399 ( 1.97e+007 ) h\/s.\r\n...<\/pre>\n","protected":false},"excerpt":{"rendered":"<p>As far as I&#8217;m aware there are aren&#8217;t many good password crackers around for PostgreSQL database password hashes.\u00a0 Here are a few notes on how to crack postgres password hashes quickly using MDCrack.\u00a0 Even though MDCrack is a Windows program, it works well enough under WINE for our purposes.\u00a0 Linux users can therefore benefit from [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[5],"tags":[111,112,84],"_links":{"self":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/15"}],"collection":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/comments?post=15"}],"version-history":[{"count":3,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/15\/revisions"}],"predecessor-version":[{"id":452,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/15\/revisions\/452"}],"wp:attachment":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/media?parent=15"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/categories?post=15"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/tags?post=15"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}