{"id":102,"date":"2007-06-30T17:33:38","date_gmt":"2007-06-30T17:33:38","guid":{"rendered":"http:\/\/pentestmonkey.net\/?p=102"},"modified":"2011-08-20T16:02:30","modified_gmt":"2011-08-20T16:02:30","slug":"yaptest-faq","status":"publish","type":"post","link":"https:\/\/pentestmonkey.net\/yaptest\/overview\/yaptest-faq","title":{"rendered":"Yaptest FAQs"},"content":{"rendered":"<p>Some questions you may be pondering while reading about the Yaptest project&#8230;<br \/>\n<!--more--><\/p>\n<h3>Is Yaptest designed to compete with Nessus?<\/h3>\n<p>No.\u00a0 Nessus is a comprehensive vulnerability scanner and reporting tool.\u00a0 Yaptest doesn&#8217;t aim to test for the vast number of vulnerabilities that Nessus can test for.\u00a0 Yaptest primarily a means by which pentesters can automatically run their tools of choice and save the output in predictably named files (without learning NASL).<\/p>\n<h3><strong>Do I need to know PERL?<\/strong><\/h3>\n<p>For the most part, no.\u00a0 90% of the command line tools you&#8217;d typically use during a pentest can be easily run from yaptest with little or no knowledge of PERL.\u00a0 Simply copy one of the existing examples that use the &#8220;run_test&#8221; API.<\/p>\n<p>If you need to do something more complicated, then you&#8217;ll need to know some PERL.\u00a0 Parsing data and feeding it back into the database isn&#8217;t always necessary, but doing this would certainly require some familiarity with PERL.\u00a0 As aluded to above, though you won&#8217;t need to do this often.<\/p>\n<h3><strong>I&#8217;ve used yaptest and added support for more tools.\u00a0 Can I contribute back?<\/strong><\/h3>\n<p>Yes.\u00a0 Please email me at pentestmonkeyAATTpentestmonkey.net.\u00a0 I&#8217;ll credit you in the release notes for anything I role into the main yaptest distribution.<\/p>\n<p>By contributing back, you&#8217;re minimising the monkey-work for everyone.\u00a0 This is a primary goal of yaptest.<\/p>\n<h3>Can I use a different portscanner to the ones currently supported by yaptest?<\/h3>\n<p>Yes.\u00a0 Yaptest is just a framework that automatically runs other tools with appropriate arguments.\u00a0 Simply modify the script that runs yapscan so that your scanner of choice is run instead.\u00a0 You&#8217;ll also need to write a parser to write the results into the database.<\/p>\n<h3><strong>I interrupted yaptest.\u00a0 Can I get it to resume testing from where is was stopped?<\/strong><\/h3>\n<p>No.\u00a0 This would be great feature and it may be included in future versions of yaptest.\u00a0 It hasn&#8217;t been implemented yet, though.\u00a0 Yaptest v0.0.3 includes some schema changes to support restarting of interrupted tests, however none of this works yet. \ud83d\ude42<\/p>\n<h3><strong>If I rerun yaptest, will it overwrite all the files from the last time it ran?<\/strong><\/h3>\n<p>No.\u00a0 The underlying APIs which runs external tools check if output files exist before writing to them.\u00a0 If the desired file already exists a different filename is used (ending in .1, .2 or whatever the next unused filename is).<\/p>\n<h3><strong>I added support for a new tool, I don&#8217;t like the name of the output file that yaptest chose.\u00a0 Can I change it?<\/strong><\/h3>\n<p>Yes.\u00a0 The &#8220;output_file&#8221; option to the &#8220;run_test&#8221; API allows you to specify the name of the output file.\u00a0 You can include certain fields such as IP address and port of the host tested too if you want.<\/p>\n<h3><strong>I&#8217;ve got a tool that I want yaptest to run, but the sometimes it hangs causing yaptest to hang.\u00a0 What can I do?<\/strong><\/h3>\n<p>Yaptest includes a timeout feature.\u00a0 You can set a maximum runtime for each tool after which yaptest will terminate it.\u00a0 Alternatively, you can set a maximum <em>inactivity timeout<\/em>.\u00a0 This measures the time passed since the tool outputted a line of text.\u00a0 These features can be used terminate external tools that you feel are taking too long.<\/p>\n<p>The &#8220;timeout&#8221; or &#8220;inactivity_timeout&#8221; options of the &#8220;run_test&#8221; API are what you need.<\/p>\n<h3><strong>Some of the external tools I want to run are quite slow, can yaptest do anything to speed them up?<\/strong><\/h3>\n<p>In some instances, yes.\u00a0 Yaptest provides an API to run several instances of a tool in parallel.\u00a0 For example, if you were testing 100 hosts over the Internet and wanted to traceroute to each of them, it would take a long time.\u00a0 You could configure yaptest to run, say, 20 instances of traceroute in parallel which would speed up this task.<\/p>\n<p>The &#8220;parallel_processes&#8221; option of the &#8220;run_test&#8221; API is what you need.<\/p>\n<h3>I ran a query for hosts running cmsd, but got no results!<\/h3>\n<p>You probably ran something like this:<\/p>\n<p>$ yaptest-ports.pl query -r cmsd<\/p>\n<p>The query is correct.\u00a0 The problem may be that the &#8220;rpcinfo&#8221; tool doesn&#8217;t know the RPC program number for cmsd, so doesn&#8217;t include the string &#8220;cmsd&#8221; in its output.\u00a0 The solution is some: copy nmap&#8217;s rpc file over the top of \/etc\/rpc:<\/p>\n<p># cp \/etc\/rpc \/etc\/rpc.old<br \/>\n# cp \/usr\/share\/nmap\/nmap-rpc \/etc\/rpc<\/p>\n<p>Now rerun the rpcinfo test, parse the output and run the query again:<\/p>\n<p>$ yaptest-rpcinfo.pl<br \/>\n$ yaptest-parse-rpcinfo.pl rpcinfo-*<br \/>\n$ yaptest-ports.pl query -r cmsd<\/p>\n<h3><strong>Can yaptest be used for Web Application Assessments?<\/strong><\/h3>\n<p>Not really.\u00a0 What yaptest currently does well is to lauch tools that require IP address and ports passed as arguments. \u00a0 Maybe future versions will understand directories, CGI script and parameters, but this is currently not planned.<\/p>\n<h3><strong>Sometimes external tools run by yaptest go wrong, produce too much output and fill up the disk.\u00a0 Can yaptest prevent this?<\/strong><\/h3>\n<p>Yes.\u00a0 Yaptest can limit the number of lines an external script is allowed to produce.\u00a0 If this limit is exceeded, yaptest will terminate the script.\u00a0 This can be useful for example of you&#8217;re using a password-guesser against a TCP port which has been closed for some reason.\u00a0 Your password-guesser might repeatedly output the message &#8220;Connection refused.\u00a0 Retrying&#8230;&#8221; or similar.<\/p>\n<p>The &#8220;max_lines&#8221; option of the &#8220;run_test&#8221; API is what you need.<\/p>\n<h3><strong>Can Yaptest be used to co-ordinate password guessing?<\/strong><\/h3>\n<p>Partially.\u00a0 Management of usernames, passwords, IP address, ports and protocols used for password guessing is a priority for yaptest.\u00a0 Currenlty support is limited to automatically starting your password-guesser of choice each time a particular port \/ protocol is encountered.\u00a0 Guessing can currently only use predefined password lists, and results aren&#8217;t parsed an put back into the database.<\/p>\n<p>As of v0.0.3, yaptest can parse passwd, shadow and pwdump2-style files and you can query the resulting database from the command line.\u00a0\u00a0 More information available <a href=\"..\/project\/yaptest\/yaptest-password-management\">here<\/a> .<\/p>\n<p>Yaptest will be updated to make better use fo the credentials datase in future.<\/p>\n<h3><strong>Will Yaptest produce a report of all vulnerabilities found?<\/strong><\/h3>\n<p>Not yet.\u00a0 The main goal of yaptest is make it easier for pentesters to run their favourite tools against the appropriate targets.\u00a0 This makes testing faster, records results in predictable filennames and gives you more time concentrate on (interesting) manual testing.<\/p>\n<p>Once this main goal of yaptest has been completed some effort will be made to summarise results found.\u00a0 Currently reporting is limited to being able to query ports open an IP address or IP addresses with certain ports open.\u00a0 There are also some easy-to-use views available in the database backend.<\/p>\n<h3><strong>Do you plan to charge for yaptest?<\/strong><\/h3>\n<p>No.\u00a0 Yaptest is released under the <a href=\"http:\/\/www.gnu.org\/licenses\/gpl-2.0.txt\">GPLv2<\/a> with the caveat that it is used for legal purposes only.\u00a0 It is therefore free to use provided you comply with license.<\/p>\n<p><strong>Are the APIs documented?<\/strong><\/p>\n<p>Documented might be too strong a word.\u00a0 There are lots of examples, though! \ud83d\ude42<\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Some questions you may be pondering while reading about the Yaptest project&#8230;<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[11],"tags":[69],"_links":{"self":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/102"}],"collection":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/comments?post=102"}],"version-history":[{"count":1,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/102\/revisions"}],"predecessor-version":[{"id":439,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/102\/revisions\/439"}],"wp:attachment":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/media?parent=102"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/categories?post=102"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/tags?post=102"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}