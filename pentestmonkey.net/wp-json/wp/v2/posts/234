{"id":234,"date":"2011-08-21T16:13:41","date_gmt":"2011-08-21T16:13:41","guid":{"rendered":"http:\/\/pentestmonkey.net\/?p=234"},"modified":"2011-11-10T22:24:46","modified_gmt":"2011-11-10T22:24:46","slug":"exploiting-a-tricky-sql-injection-with-sqlmap","status":"publish","type":"post","link":"https:\/\/pentestmonkey.net\/blog\/exploiting-a-tricky-sql-injection-with-sqlmap","title":{"rendered":"Exploiting A Tricky SQL Injection With sqlmap"},"content":{"rendered":"<p>Like many pentesters, I&#8217;m a fan of <a href=\"http:\/\/sqlmap.sourceforge.net\/\">sqlmap<\/a>. \u00a0It&#8217;s often the first and last tool I reach for when exploiting boolean or time-based SQL injection vulnerabilities.<\/p>\n<p>I wanted to briefly document a slightly tricky SQL injection issue I encountered recently and a few of the sqlmap features that impressed me most.<\/p>\n<p>I initially noticed that the following URLs returned the same page:<\/p>\n<pre>http:\/\/host\/script?id=10\r\nhttp:\/\/host\/script?id=11-1 # same as id=10\r\nhttp:\/\/host\/script?id=(select 10) # same as id=10<\/pre>\n<p>Which looks pretty standard. The were a few problems with this injection, though. Firstly &#8220;and&#8221; and &#8220;or&#8221; didn&#8217;t work for some reason I never figured out:<\/p>\n<pre> http:\/\/host\/script?id=10 and 1=1 # failed<\/pre>\n<p>Secondly, I could&#8217;t terminate the query<\/p>\n<pre>http:\/\/host\/script?id=10-- # failed\r\nhttp:\/\/host\/script?id=10;-- # failed\r\nhttp:\/\/host\/script?id=10);-- # failed\r\nhttp:\/\/host\/script?id=10)subquery;-- # failed<\/pre>\n<p>I spent a long time trying to terminate the query in <a href=\"http:\/\/portswigger.net\/burp\/intruder.html\">burp intruder<\/a> with a custom dictionary of possible strings. To no avail. I therefore could not make this into a UNION injection.<\/p>\n<p>To exploit it as a boolean injection, I rewrote the URL slightly to help sqlmap &#8211; which was struggling because &#8220;and&#8221; and &#8220;or&#8221; didn&#8217;t work as they normally would:<\/p>\n<pre> http:\/\/host\/script?id=11-(case when 1=1 then 1 else 0 end)<\/pre>\n<p>It was then possible to put &#8221; and 1=2&#8243; etc. after the &#8220;1=1&#8221; to give two different pages for the true or false response:<\/p>\n<pre>http:\/\/host\/script?id=11 # the \"when\" clause is false\r\nhttp:\/\/host\/script?id=10 # the \"when\" clause is true<\/pre>\n<p>Apparently if you increase the &#8220;&#8211;level&#8221; parameter, sqlmap will try clever stuff like this for you. \u00a0I bares illustrating how to do it manually, though.<\/p>\n<h2>Telling sqlmap Where To Inject<\/h2>\n<p>By default sqlmap will figure out for itself where the injection point it. If you want to guide it, simply add a * to the URL like this:<\/p>\n<pre>sqlmap -u http:\/\/host\/script?id=11-(case when 1=1* then 1)<\/pre>\n<p>BTW I&#8217;m using <a href=\"https:\/\/svn.sqlmap.org\/sqlmap\/trunk\/sqlmap\/\">SVN version<\/a>.\u00a0 Apparently this feature was present in v0.9, but wasn&#8217;t documented. \u00a0Use the docs from the SVN \u00a0read about this feature.<\/p>\n<p>It&#8217;s a brilliant feature. I probably wouldn&#8217;t have bothered with sqlmap if it didn&#8217;t have this feature.<\/p>\n<h2>Error Correction<\/h2>\n<p>For some reason, the server gave me inconsistent responses (load balancing \/ general brokenness?). This resulted in about 25% of the chars retrieve by sqlmap being incorrect &#8211; not the fault of the tool, but the fault of the server.<\/p>\n<p>This is a problem not faced by sqlmap users when using time-based (&#8220;waitfor delay&#8221;) injection because sqlmap has a cool feature: error correction. \u00a0After each character it extracts, it checks using a true\/false query that the character is correct.<\/p>\n<p>It wasn&#8217;t too hard to activate the error-correction feature for boolean injections too &#8211; in fact I changed a single line of code.<\/p>\n<p>Sweet. \u00a0Error-free data from the database.<\/p>\n<p>I&#8217;ve mailed <a href=\"http:\/\/bernardodamele.blogspot.com\/\">Bernardo<\/a>, sqlmap&#8217;s author and hopefully we&#8217;ll see this as an optional feature in a future release. \u00a0It does mean about 1\/8th more queries will be required, but that&#8217;s a small price to pay when the server&#8217;s giving you bad data.<\/p>\n<h2>Tamper Scripts<\/h2>\n<p>To further complicate the injection, some characters needed URL encoding &#8211; e.g. &gt; to %3E. \u00a0My instinct was to use &#8220;&#8211;tamper=between&#8221; which converts &#8220;&gt; 5&#8221; to &#8220;not between 0 and 5&#8221;. \u00a0However, this made the query too long (a further trickyness of this particular injection).<\/p>\n<p>It was fairly easy to create a custom tamper script based on one of the 20 plus examples that ship with sqlmap:<\/p>\n<pre>cd sqlmap\/tamper\r\ncp between.py ptm.py\r\nvi ptm.py\r\n..\/sqlmap.py --tamper=ptm ...<\/pre>\n<p><em>Update: In retrospect &#8211;tamper=charencode may have worked.<\/em><\/p>\n<h2>Support<\/h2>\n<p>I found <a href=\"http:\/\/bernardodamele.blogspot.com\/\">Bernardo<\/a> very helpful and welcoming of feedback*. \u00a0He and Miroslav Stampar\u00a0have done a great job on this tool. \u00a0And it just keeps improving.<\/p>\n<p>*Though, always RTFM (<a href=\"http:\/\/sqlmap.sourceforge.net\/doc\/README.pdf\">v0.9<\/a> <a href=\"https:\/\/svn.sqlmap.org\/sqlmap\/trunk\/sqlmap\/doc\/README.pdf\">SVN version<\/a>) before contacting him \ud83d\ude42<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Like many pentesters, I&#8217;m a fan of sqlmap. \u00a0It&#8217;s often the first and last tool I reach for when exploiting boolean or time-based SQL injection vulnerabilities. I wanted to briefly document a slightly tricky SQL injection issue I encountered recently and a few of the sqlmap features that impressed me most. I initially noticed that [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":true,"template":"","format":"standard","meta":[],"categories":[5],"tags":[19,60],"_links":{"self":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/234"}],"collection":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/comments?post=234"}],"version-history":[{"count":9,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/234\/revisions"}],"predecessor-version":[{"id":236,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/234\/revisions\/236"}],"wp:attachment":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/media?parent=234"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/categories?post=234"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/tags?post=234"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}