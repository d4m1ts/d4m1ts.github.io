{"id":595,"date":"2011-09-25T15:39:22","date_gmt":"2011-09-25T15:39:22","guid":{"rendered":"http:\/\/pentestmonkey.net\/?p=595"},"modified":"2011-09-25T21:16:26","modified_gmt":"2011-09-25T21:16:26","slug":"timing-attack-checker","status":"publish","type":"post","link":"https:\/\/pentestmonkey.net\/tools\/timing-attack-checker","title":{"rendered":"timing-attack-checker"},"content":{"rendered":"<p>timing-attack-checker is a simple PERL script that helps you check for timing attacks.<\/p>\n<p>The most common form of timing attack I&#8217;ve noticed while pentesting is that the server may take longer to respond to a valid username than to an invalid username. \u00a0This can be handy for bruteforcing a list of valid usernames. \u00a0I&#8217;ll work through an example of such an attack below.<\/p>\n<p>The script could also be used to test other types of timing attack. \u00a0It should provide microsecond-resolution timing.<\/p>\n<p>In its simplest form, you give it two commands you want it to record the execution time of. \u00a0It will run those commands 100 times (by default), recording how long it takes.<\/p>\n<pre style=\"font-family: 'Courier 10 Pitch', Courier, monospace; color: #222222; line-height: 21px; font: normal normal normal 12px\/18px Consolas, Monaco, monospace; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f7f7f7; margin-bottom: 24px; font-size: 15px; background-position: initial initial; background-repeat: initial initial; padding: 1.5em;\">timing-attack-check.pl 'login.pl -u knownuser -p x' 'login.pl -u notexist -p x'<\/pre>\n<p>The data is optionally saved in tab-delimited format for import into a spreadsheet. \u00a0Some raw stats are also output to help you decide if you&#8217;ve found a timing attack or not.<\/p>\n<h3>Download<\/h3>\n<p>Get the latest version from <a href=\"https:\/\/github.com\/pentestmonkey\/timing-attack-checker\">github<\/a><\/p>\n<h3>Usage<\/h3>\n<pre>timing-attack-checker v1.0 http:\/\/pentestmonkey.net\/tools\/timing-attack-checker\r\n\r\nUsage: timing-attack-check.pl [ options ] 'cmd1' 'cmd2' ['cmd3' ...]\r\n\r\noptions are:\r\n  -n N      Number of times to run the commands\r\n  -o file   File to write tab delimited data to\r\n\r\nExample:\r\n  timing-attack-check.pl 'login.pl -u knownuser -p x' 'login.pl -u notexist -p x'<\/pre>\n<h3>Dependencies<\/h3>\n<ul>\n<li>PERL<\/li>\n<li>Linux (because I use \/dev\/null for some output)<\/li>\n<li>Time::HiRes module (probably installed by default &#8211; it is on Ubuntu 11.04)<\/li>\n<\/ul>\n<h3>Worked Example<\/h3>\n<p>I set up an SSH server that only allowed logins using keys, not passwords. \u00a0I wanted to know if the server would take longer to respond to a login attempt for a valid username than for an invalid username &#8211; presumably it does less work if the username is invalid. \u00a0I load an SSH key into my ssh-agent so that the SSH client offers it to the server for each login attempt.<\/p>\n<p>I used the following usernames for testing:<\/p>\n<ul>\n<li>&#8220;x&#8221; the name of an account that exists. \u00a0It also has an ~\/.ssh\/authorized_keys file<\/li>\n<li>&#8220;y&#8221; the name of a non-existent account.<\/li>\n<li>&#8220;z&#8221; the name of an account that exists. \u00a0It has no ~\/.ssh\/authorized_keys file<\/li>\n<\/ul>\n<p>I had an ssh-agent running that had one key loaded. \u00a0The key was not authorised to log into any account on the target system:<\/p>\n<pre>$ ssh-keygen -f key1\r\n$ eval `ssh-agent`\r\n$ ssh-add key1<\/pre>\n<p>I ran the following command to make 40 login attempts for each:<\/p>\n<pre>$ timing-attack-checker.pl -o data.txt -n 40 'ssh x@host' 'ssh y@host' 'ssh z@host'<\/pre>\n<p>The script output the following:<\/p>\n<pre>[D] Running command: ssh x@host\r\n[D] Command took 0.464256 secs\r\n[D] Running command: ssh y@host\r\n[D] Command took 0.115495 secs\r\n[D] Running command: ssh z@host\r\n[D] Command took 0.128768 secs\r\n[D] Running command: ssh x@host\r\n[D] Command took 0.125885 secs\r\n[D] Running command: ssh y@host\r\n... snip ...\r\n=================================================\r\nResults for: ssh x@host\r\nAverage time: 0.143035425\r\nMinimum time: 0.10777\r\nMaximum time: 0.464256\r\nStandard deviation: 0.0608662980593068 (i.e. 68% of times within 1 sd, 95% within 2 sd)\r\nWas fastest on 3 out of 40 occassions (7.5% of the time)\r\nWas slowest on 10 out of 40 occassions (25% of the time)\r\n=================================================\r\nResults for: ssh y@host\r\nAverage time: 0.120723175\r\nMinimum time: 0.095311\r\nMaximum time: 0.206071\r\nStandard deviation: 0.0171279751063684 (i.e. 68% of times within 1 sd, 95% within 2 sd)\r\nWas fastest on 36 out of 40 occassions (90% of the time)\r\nWas slowest on 3 out of 40 occassions (7.5% of the time)\r\n=================================================\r\nResults for: ssh z@host\r\nAverage time: 0.132942175\r\nMinimum time: 0.114824\r\nMaximum time: 0.154482\r\nStandard deviation: 0.00611497853997666 (i.e. 68% of times within 1 sd, 95% within 2 sd)\r\nWas fastest on 1 out of 40 occassions (2.5% of the time)\r\nWas slowest on 27 out of 40 occassions (67.5% of the time)\r\n=================================================\r\n[+] Saving tab-delimited data to data.txt<\/pre>\n<p>There are a lot of stats there. \u00a0Let&#8217;s discuss each in turn an see if it leads us to believe that there&#8217;s a username enumeration issue:<\/p>\n<ul>\n<li>Average time: This ranges from about 0.12 secs to 0.14 secs. \u00a0That&#8217;s a difference of more than 10%. \u00a0It&#8217;s also\u00a0comparable\u00a0to a standard deviation (depending which of the 3 you use). \u00a0It could be random noise caused by the laggy wireless network I ran it over. \u00a0&#8220;x&#8221; looks pretty slow. \u00a0&#8220;y&#8221; looks pretty fast.<\/li>\n<li>Min\/Max time: The min and max times for each login attempt would ideally be very similar. \u00a0We see that for some usernames the max is 2x or 4x higher than the min. \u00a0This shows we might have a choppy network connection. \u00a0Or maybe the client or server is busy. \u00a0This min\/max helps to show the consistency (or otherwise) of the data collected. \u00a0Our samples aren&#8217;t particularly consistent.<\/li>\n<li><a href=\"http:\/\/en.wikipedia.org\/wiki\/Standard_deviation\">Standard Deviation<\/a>: How close our samples are to the average. \u00a0If themin\/max of your sample set are similar and the difference between average login time for &#8220;x&#8221; and &#8220;y&#8221; (say) is more than 2 standard deviations, I think you can be pretty sure you&#8217;ve found a timing attack. \u00a0That doesn&#8217;t apply to the data we collected here (more like 1 sd).<\/li>\n<li>Fastest\/Slowest: Shows how consistently a command was the fastest\/slowest in its round. \u00a0This can be useful for busy network\/hosts if you can assume that all attempts will be slowed down consistently by network\/host problems. \u00a0Logins were faster for &#8220;y&#8221; on 90% attempts, compared to the 33% you&#8217;d expect if no timing attack was present. \u00a0This seems quite compelling evidence that we can detect accounts that don&#8217;t exist &#8211; remember &#8220;y&#8221; doesn&#8217;t exist.<\/li>\n<\/ul>\n<p>So in conclusion, it seems that it would be possible to bruteforce a list of usernames that exist on the server tested. \u00a0If anyone wants to look further into this issue, I&#8217;ve included details on my config at the end of this post.<\/p>\n<p>More generally, you&#8217;ll probably want to run only two commands, not three or more. \u00a0The option is there if you need it, though.<\/p>\n<h3>Notes on SSH Server Config<\/h3>\n<p>OS: Ubuntu 11.04<\/p>\n<p>SSH Daemon:\u00a0OpenSSH_5.8p1 (package:\u00a0openssh-server 1:5.8p1-1ubuntu3)<\/p>\n<p>Changes to default \/etc\/ssh\/sshd_config:<\/p>\n<pre>PasswordAuthentication no\r\nPort 12345<\/pre>\n<p>CPU:\u00a0AMD Athlon(tm) 64 X2 Dual Core Processor 5000+<\/p>\n<p>RAM: 2GB<\/p>\n<p>Network: Wireless connection capable of around 3.5 MB\/sec<\/p>\n<p>Server was idle during testing.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>timing-attack-checker is a simple PERL script that helps you check for timing attacks. The most common form of timing attack I&#8217;ve noticed while pentesting is that the server may take longer to respond to a valid username than to an invalid username. \u00a0This can be handy for bruteforcing a list of valid usernames. \u00a0I&#8217;ll work [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":true,"template":"","format":"standard","meta":[],"categories":[16,4],"tags":[19,47,76,114],"_links":{"self":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/595"}],"collection":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/comments?post=595"}],"version-history":[{"count":13,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/595\/revisions"}],"predecessor-version":[{"id":597,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/595\/revisions\/597"}],"wp:attachment":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/media?parent=595"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/categories?post=595"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/tags?post=595"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}