{"id":101,"date":"2007-06-26T19:13:39","date_gmt":"2007-06-26T19:13:39","guid":{"rendered":"http:\/\/pentestmonkey.net\/?p=101"},"modified":"2011-08-20T16:07:15","modified_gmt":"2011-08-20T16:07:15","slug":"yaptest-overview","status":"publish","type":"post","link":"https:\/\/pentestmonkey.net\/yaptest\/overview\/yaptest-overview","title":{"rendered":"Yaptest Overview"},"content":{"rendered":"<h3>Yet Another PenTEST&#8230;<\/h3>\n<p>[The download \/ install page is <a href=\"http:\/\/pentestmonkey.net\/projects\/yaptest\/yaptest-installation\/\">over here<\/a> if that&#8217;s what you&#8217;re looking for].<\/p>\n<p>At times pentesting is one of the most fun jobs around.\u00a0 Other times, though it&#8217;s dull.\u00a0 When you&#8217;re having to manually check for the same issues on the next host and the next host and the next&#8230; testing can get kinda tedious.<\/p>\n<p>Vulnerability scanners (<a href=\"http:\/\/www.nessus.org\/\">nessus<\/a> and the like) have their place, but no scanner is going to test for everything that you&#8217;re interested in. \u00a0 Yaptest aims to make it easy for a pentester to automate parts of testing on the fly.\u00a0 This is particularly useful when testing very large networks.\u00a0 Below are some examples of tasks which would be easy to automate using yaptest:<\/p>\n<ul>\n<li>Run <a href=\"http:\/\/www.cirt.net\/code\/nikto.shtml\">nikto<\/a> on anything nmap thinks is an HTTP service<\/li>\n<li>Run <a href=\"http:\/\/thc.org\/thc-hydra\/\">hydra<\/a> on every host with TCP port 21 open<\/li>\n<li>Attempt upload a file to any TFTP servers found<\/li>\n<li>Run <a href=\"http:\/\/www.phreedom.org\/solar\/onesixtyone\/\">onesixtyone<\/a> on all hosts that are up<\/li>\n<li>Try <a href=\"http:\/\/www.metasploit.com\/\">metasploit<\/a>&#8216;s solaris_kcms_readfile exploit against any hosts running kcmsd<\/li>\n<\/ul>\n<p>Yaptest is the glue between your favourite tools and the knowledge base gathered during your pentest.\u00a0 It handles all the mundane stuff that can easily be automated and leaves you free to get on with <span style=\"text-decoration: line-through;\">owning boxes<\/span> demonstrating risk using techniques that yaptest doesn&#8217;t know about yet.<\/p>\n<p><!--more--><\/p>\n<h3>Platform<\/h3>\n<p>Initially the database backend will be <a href=\"http:\/\/www.postgresql.org\/\">PostgreSQL<\/a> with the APi written in PERL.\u00a0 Linux will be the primary development platform.<\/p>\n<p>However, <a href=\"http:\/\/www.mysql.com\/\">MySQL<\/a> support might be an option later on.\u00a0 It should also be possible to get yaptest running on any platform supporting Postgres and PERL &#8211; including Windows.\u00a0 This project is in its early stages, though and will focus on Linux initially.<\/p>\n<p>Note that if you&#8217;re running more than OS (e.g. via <a href=\"http:\/\/www.vmware.com\/\">VMWare<\/a>), each of your testing platforms will (eventually) be able to share a single database backend.<\/p>\n<h3><strong>Typical Usage<\/strong><\/h3>\n<p>Conceptually, pentesting using yapscan could proceed as follows:<\/p>\n<pre>$ yaptest-create-new-test.pl abc_co vlan1<\/pre>\n<pre>$ yaptest-add-some-hosts.pl --method=arpscan-local-network<\/pre>\n<pre>$ yaptest-fast-portscan-all-hosts.pl<\/pre>\n<pre>$ yaptest-nmap-services-scan-all-open-ports.pl<\/pre>\n<pre>$ yaptest-nikto-all-http-ports.pl<\/pre>\n<p>Each of the yaptest scripts would read from \/ write to the backend database, but call on other programs (nmap, nikto, <a href=\"http:\/\/www.nta-monitor.com\/tools\/arp-scan\/\">arp-scan<\/a>, etc.) to do the actual scanning work.\u00a0 A log of the output from each tool would be stored in files incase it was needed later.<\/p>\n<h3>Extending Yaptest on the fly<\/h3>\n<p>At this point in our ficticious test, the pentester notices that nmap has identified a large number of LDAP services running on the network.\u00a0 Some of these are running on strange ports.\u00a0 After a bit of maual testing he decides that he wants to run the following command on each service:<\/p>\n<pre>ldapsearch -h IP -p PORT -s base<\/pre>\n<p>He copies a suitable yaptest template script and comes up with something like:<\/p>\n<pre>#!\/usr\/bin\/perl -w\r\nuse strict;\r\nuse yaptest;\r\n\r\nmy $y = yaptest-&gt;new();\r\n$y-&gt;run_test(\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 command =&gt; 'ldapsearch -h ::IP:: -p ::PORT:: -s base',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 filter\u00a0 =&gt; { port_info =&gt; \"nmap_service_name = ldap\" },\r\n);<\/pre>\n<p>Yaptest will then be able to gather LDAP data for this any future test.<\/p>\n<p>Sometimes you need to run a test which might hang indefinitely.\u00a0 The following example shows how to set a timeout for the command (in seconds), so that one failed command doesn&#8217;t prevent yaptest from running.\u00a0 In this example we also run tests of up to 5 hosts concurrently and changes the name of the output file to something more meaningful:<\/p>\n<pre>#!\/usr\/bin\/perl -w\r\nuse strict;\r\nuse yaptest;\r\n\r\nmy $y = yaptest-&gt;new();\r\n$y-&gt;run_test(\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 command =&gt; 'telnet -l -fbin ::IP::',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 filter\u00a0 =&gt; { port =&gt; 23 },\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 timeout =&gt; 10,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 parallel_processes =&gt; 5,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 output_file =&gt; 'telnet-fuser-bin-::IP::.out'\r\n);<\/pre>\n<h3>More Information about Yaptest<\/h3>\n<p>Also check out the other pages on the <a href=\"..\/projects\/yaptest\">yaptest<\/a> project page.<\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Yet Another PenTEST&#8230; [The download \/ install page is over here if that&#8217;s what you&#8217;re looking for]. At times pentesting is one of the most fun jobs around.\u00a0 Other times, though it&#8217;s dull.\u00a0 When you&#8217;re having to manually check for the same issues on the next host and the next host and the next&#8230; testing [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[11],"tags":[69],"_links":{"self":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/101"}],"collection":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/comments?post=101"}],"version-history":[{"count":2,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/101\/revisions"}],"predecessor-version":[{"id":441,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/101\/revisions\/441"}],"wp:attachment":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/media?parent=101"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/categories?post=101"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/tags?post=101"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}