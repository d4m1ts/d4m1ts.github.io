{"id":112,"date":"2007-09-02T15:26:26","date_gmt":"2007-09-02T15:26:26","guid":{"rendered":"http:\/\/pentestmonkey.net\/?p=112"},"modified":"2011-08-20T16:00:31","modified_gmt":"2011-08-20T16:00:31","slug":"php-findsock-shell","status":"publish","type":"post","link":"https:\/\/pentestmonkey.net\/tools\/web-shells\/php-findsock-shell","title":{"rendered":"php-findsock-shell"},"content":{"rendered":"<p>This tool is designed for those situations during a pentest where you have upload access to a webserver that&#8217;s running PHP, you want an interactive shell, but the Firewall is doing proper egress and ingress filtering &#8211; so bindshells and reverse shells won&#8217;t work.<\/p>\n<p>Upload php-findsock-shell to somewhere in the web root then run it by accessing the appropriate URL via netcat (as opposed to via a browser).\u00a0 Instead of getting a normal HTTP response back, your HTTP session becomes an interactive shell session:<\/p>\n<pre>$ nc -v target 80\r\ntarget [10.0.0.1] 80 (http) open\r\nGET \/php-findsock-shell.php HTTP\/1.0\r\n\r\nsh-3.2$ id\r\nuid=80(apache) gid=80(apache) groups=80(apache)\r\nsh-3.2$\r\n... you now have an interactive shell ...<\/pre>\n<p>This will be a proper interactive shell in which you can run interective programs like telnet, ssh and su.\u00a0 It differs from web form-based shells which allow you to send a single command, then return you the output.<\/p>\n<p><!--more--><\/p>\n<h2>Download<\/h2>\n<p><a href=\"http:\/\/pentestmonkey.net\/tools\/php-findsock-shell\/php-findsock-shell-1.0.tar.gz\">php-findsock-shell-1.0.tar.gz<\/a><\/p>\n<p>MD5sum: aecfea69fc6b482709f339756d6b419b<\/p>\n<p>SHA1sum: 96e1a89cb15dcb64d81a13c2211faf98e80d3518<\/p>\n<h2>Preamble<\/h2>\n<p>I recently read about some (old) <a href=\"http:\/\/www.securityfocus.com\/archive\/1\/archive\/1\/449298\/100\/0\/threaded\">vulnerabilities<\/a> stemming from the fact that PHP scripts inherit some of Apache&#8217;s file descriptors and that programs run via PHP (e.g. via the &#8220;system&#8221; function) also inherit these file descriptors.\u00a0 Vulnerabilities include:<\/p>\n<ul>\n<li>Overwriting apache log file &#8211; even though it&#8217;s owned by root; and<\/li>\n<li>Hijacking apache&#8217;s listening TCP port, then killing apache so you can respond to incoming web requests<\/li>\n<\/ul>\n<p>This whole &#8220;inheriting file handles&#8221; class of vulnerability seems like an interesting area &#8211; albeit not a new area.<\/p>\n<p>It occurred to me that if PHP could directly access the file handle corresponding to the TCP connection between the user&#8217;s browser and the web server, PHP might be able to attach a shell (\/bin\/sh) to this connection.\u00a0 You&#8217;d then have an interactive shell which would pass straight through firewalls doing simple ingress and egree filtering.<\/p>\n<p>Alas, I couldn&#8217;t figure out how to implement this idea purely in PHP.\u00a0 However, with the help of a C program it&#8217;s possible to demonstrate that the idea works.<\/p>\n<h2>Walk Through<\/h2>\n<h3>Modify the source to prevent unauthorised access<\/h3>\n<p>To prevent someone else from abusing your backdoor &#8211; a nightmare scenario while pentesting &#8211; you should modify the source code to prevent unauthorised access to your script.\u00a0 This is left as an exercise to the reader.\u00a0 I haven&#8217;t implemented this in v1.0.<\/p>\n<h3>Compile findsock.c<\/h3>\n<p>You need to compile findsock.c so that it&#8217;ll run on the web server you&#8217;ve gained access to.\u00a0 If you&#8217;re running the same OS and architecture run the following locally:<\/p>\n<p>$ gcc -o findsock findsock.c<\/p>\n<p>If not, then you might have to compile elsewhere, or hope there&#8217;s a C compiler on the web server.<\/p>\n<h3>Upload &#8220;findsock&#8221; and &#8220;php-findsock-shell.php&#8221;<\/h3>\n<p>Upload the compiled binary plus the PHP script to the web server.<\/p>\n<h3>Enjoy your new shell<\/h3>\n<p>Access the PHP script using netcat (not using a browser).\u00a0 If all went well, your HTTP connection should turn into an interactive shell:<\/p>\n<pre>$ nc -v target 80\r\ntarget [10.0.0.1] 80 (http) open\r\nGET \/php-findsock-shell.php HTTP\/1.0<\/pre>\n<pre>sh-3.2$ id\r\nuid=80(apache) gid=80(apache) groups=80(apache)\r\nsh-3.2$\r\n... you now have an interactive shell ...<\/pre>\n<h2>FAQs<\/h2>\n<h3>When is this useful?<\/h3>\n<p>When you can&#8217;t use a bindshell or reverse shell because of Firewall filtering.<\/p>\n<p>Proper interactive shells are more useful than web-based shell in some circumstances, e.g:<\/p>\n<ul>\n<li>You want to change your user with &#8220;su&#8221;<\/li>\n<li>You want to upgrade your shell using a local exploit<\/li>\n<li>You want to log into another system using telnet \/ ssh<\/li>\n<\/ul>\n<h3>Isn&#8217;t the shell connection just going to be severed when the web server times out the PHP script?<\/h3>\n<p>No.\u00a0 It doesn&#8217;t seem to on the systems that I&#8217;ve tested it on (Gentoo Linux only so far).<\/p>\n<h3>Isn&#8217;t there going to be a rather suspicious looking shell process when the admin runs &#8220;ps&#8221;?<\/h3>\n<p>Yeah.\u00a0 \ud83d\ude42<\/p>\n<h3>Will this work with PERL as well as PHP?<\/h3>\n<p>I doesn&#8217;t seem to.\u00a0 The PERL script doesn&#8217;t to inherit any interesting file handles.\u00a0 It just has its STDIN, STDOUT and STDERR attached to a pipe.\u00a0 However, I&#8217;m sure that there&#8217;s more than one way to configure PERL with Apache, so maybe other configurations will be prone the above problem.<\/p>\n<h2>Caveats<\/h2>\n<p>The shell traffic doesn&#8217;t look much like HTTP, so I guess that you may have problems if the site is being protected by a Layer 7 (Application layer) Firewall.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>This tool is designed for those situations during a pentest where you have upload access to a webserver that&#8217;s running PHP, you want an interactive shell, but the Firewall is doing proper egress and ingress filtering &#8211; so bindshells and reverse shells won&#8217;t work. Upload php-findsock-shell to somewhere in the web root then run it [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[15],"tags":[106,19,53,76],"_links":{"self":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/112"}],"collection":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/comments?post=112"}],"version-history":[{"count":3,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/112\/revisions"}],"predecessor-version":[{"id":264,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/posts\/112\/revisions\/264"}],"wp:attachment":[{"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/media?parent=112"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/categories?post=112"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/pentestmonkey.net\/wp-json\/wp\/v2\/tags?post=112"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}